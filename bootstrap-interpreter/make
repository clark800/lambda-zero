#!/bin/sh
# http://www.gnu.org/software/autoconf/manual/autoconf.html#Portable-Shell

OUT=${OUT:-"main"}
CC=${CC:-"cc"}

RED='\033[0;31m'
NOCOLOR='\033[0m'

# stack-protector should be off by default, but some linux distributions
# patch gcc to turn it on by default, so we explicitly disable it here; it
# will cause the nostdlib build to fail if it is enabled

# no-asynchronous-unwind-tables decreases the executable size and there seems
# to be no downside because the information will still be included when
# compiling with "-g" https://stackoverflow.com/a/26302715

# no-ident removes a small unneeded comment from the executable

# use this command to find all warnings not enabled by -Wall -Wextra
# gcc -Wall -Wextra -Q --help=warning | grep "\[disabled\]"
# note: -Wswitch-enum looks helpful, but doesn't allow default case
# to catch multiple cases, which we are using
GCC_FLAGS="-Ilib -fno-asynchronous-unwind-tables \
-std=c99 -pedantic -Wfatal-errors -Wall -Wextra \
-Wshadow -Winit-self -Wwrite-strings -Wconversion -Wcast-qual \
-Wredundant-decls -Wstrict-prototypes -Wmissing-prototypes"
TCC_FLAGS="-Ilib -Wall -Werror -Wunsupported -Wwrite-strings"
XCC_FLAGS="-Ilib"  # for unknown C compiler

# gcc sets --hash-style to a non-default setting when calling ld, which
# increases the executable size; we can set it back to the default with
# --hash-style=sysv

LINK_FLAGS="-static -Wl,--hash-style=sysv,--gc-sections,--strip-discarded"
SOURCES=$(find -L ./src ./lib -name "*.c" | grep -v "/libc/")
HEADERS=$(find -L ./src ./lib -name "*.h" | grep -v "/libc/")
OBJECTS="*.o"

echoexec() {
    echo "$@" && "$@"
}

clean() {
    rm -f $OBJECTS "$OUT"
}

is_up_to_date() {
    test -f "$1" && test -z "$(find -L . -name "*.[c|h]" -newer "$1")"
}

build_libc() {
    (cd lib/libc && ./make)
}

showsize() {
    output="$(wc -c "$OUT" | tr '\t' ' ' | tr -s ' ')"
    echo "$1 SIZE:\t$(echo "${output## }" | cut -d' ' -f1) bytes"
}

finish() {
    rm -f $OBJECTS
    echo
    echo "BUILD SUCCESSFUL"
    showsize "BINARY"
}

xstrip() {
    # https://github.com/aunali1/super-strip
    if command -v sstrip > /dev/null; then
        sstrip "$OUT"
        showsize "STRIPPED"
    elif command -v strip > /dev/null; then
        if [ "$(uname)" == "Darwin" ]; then
            strip "$OUT"
        else
            strip -R .note -R .comment -R .eh_frame -R .eh_frame_hdr -s "$OUT"
        fi
        showsize "STRIPPED"
    else
        echo "Note: sstrip/strip not found, skipping strip"
    fi
}

compress() {
    if command -v upx > /dev/null; then
        upx -q -9 "$OUT" > /dev/null
        showsize "COMPRESSED"
    else
        echo "Note: upx not found, skipping compression"
    fi
}

build_one_stage() {
    echoexec "$CC" -o "$OUT" $CC_FLAGS $SOURCES &&
    finish
}

build_two_stage() {
    echoexec "$CC" -c $CC_FLAGS $SOURCES &&
    echoexec "$CC" $LINK_FLAGS -o "$OUT" $OBJECTS &&
    finish || (clean ; false)
}

is_cc() {
    "$CC" -v 2>&1 | grep -q "^$1"
}

build() {
    if is_up_to_date "$OUT"; then
        echo "$OUT up-to-date"
        return
    fi

    if is_cc "gcc" || is_cc "clang"; then
        CC_FLAGS="$GCC_FLAGS" build_two_stage
    elif is_cc "Apple clang"; then
        CC_FLAGS="$GCC_FLAGS" build_one_stage
    elif is_cc "tcc"; then
        CC_FLAGS="$TCC_FLAGS" build_one_stage
    else
        CC_FLAGS="$XCC_FLAGS" build_one_stage
    fi
}

config_fast() {
    GCC_FLAGS="-DNDEBUG -O3 -flto $GCC_FLAGS"
    LINK_FLAGS="-flto -Wl,--strip-all $LINK_FLAGS"
}

config_debug() {
    GCC_FLAGS="-g -Og $GCC_FLAGS"
    TCC_FLAGS="-g $TCC_FLAGS"
    XCC_FLAGS="-g $XCC_FLAGS"
}

config_custom() {
    printf "%b" "$RED"
    echo "NOTE: There has been some non-determinism in this build"
    echo "If the tests fail, try rebuilding and it should fix it,"
    echo "or you can change the optimization level from -Os to -O1"
    printf "%b\n" "$NOCOLOR"
    custom="-Os -nostdlib -nostdinc -isystem ./lib/libc/include/ -fno-builtin -flto"
    GCC_FLAGS="$custom $GCC_FLAGS"
    LINK_FLAGS="-nostdlib -Wl,--strip-all $LINK_FLAGS"
    SOURCES=$(find -L . -name "*.c")
    OBJECTS="*.o lib/libc/sys.o"
}

config_unused() {
    config_custom
    GCC_FLAGS="-O0 -fdata-sections -ffunction-sections $GCC_FLAGS"
    LINK_FLAGS="-Wl,--print-gc-sections $LINK_FLAGS"
}

get_loc() {
    gcc -fpreprocessed -dD -E -P $HEADERS $SOURCES | grep -v assert | wc -l
}

get_ploc() {
    # doesn't strip out /* ... */ comments
    cat $HEADERS $SOURCES | sed 's|//.*||' |
        grep -v '^[[:space:]]*$' | grep -v assert | wc -l
}

run_cloc() {
    cloc --quiet --exclude-list-file=.clocignore --by-file "$@"
}

lint() {
    # this is not usable due to bugs in splint
    splint +charint -redef -compdestroy -branchstate -mustfree \
        -temptrans -varuse -fcnuse -retvalother +matchanyintegral -unrecog \
        -Ilib $SOURCES
}

get_includes() {
    filename="$(basename "$1" | cut -d'.' -f 1)"
    "$CC" -MM -MT':' -I"." -Ilib "$1" | tr -d ':\\\\' | xargs -n 1 echo |
        grep -v "lib/" | xargs -n 1 basename | grep '\.h' | cut -d'.' -f 1 |
        xargs -n 1 -I{} echo "    $filename -> {};" | grep -v -- "-> $filename"
}

build_graph() {
    echo "digraph graphname {"
    echo "    size=6;"
    echo "    ranksep=1.2;"
    echo "    nodesep=0.8;"
    echo "    mclimit=100;"
    echo
    for file in $(find . -name "*.c" | grep -v "lib/"); do
        get_includes "$file"
    done
    echo "}"
}

show_floc() {
    gcc -fpreprocessed -dD -E -P $SOURCES | grep -v assert |
        ../tools/floc.sh | sort -n | ../tools/hist.sh
}

case "$1" in
    "") clean && config_fast && build && xstrip;;
    debug) clean && config_debug && build;;
    test) config_fast && build && time test/test.sh;;
    custom) clean && config_custom && build_libc && build && xstrip;;
    unused) clean && config_unused && build_libc && build && xstrip;;
    compress) config_fast && build && xstrip && compress;;
    lint) lint;;
    clean) clean;;
    tree) tree --noreport -C -P '*.[hc]' -I lib src;;
    dot) build_graph;;
    graph) build_graph | dot -o architecture.pdf -T pdf;;
    loc) get_loc;;
    ploc) get_ploc;;
    floc) show_floc;;
    cloc) run_cloc --exclude-dir="libc" . | tail -n +3 | cut -c -78;;
    cloc-all) run_cloc . | tail -n +3 | cut -c -78;;
    *) echo "usage error: unrecognized command \"$1\""; exit 1;;
esac
