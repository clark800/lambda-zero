#!/bin/sh

OUT=${OUT:-"main"}
CC=${CC:-"cc"}

RED='\033[0;31m'
NOCOLOR='\033[0m'

# use this command to find all warnings not enabled by -Wall -Wextra
# gcc -Wall -Wextra -Q --help=warning | grep "\[disabled\]"

WFLAGS="-std=c99 -Wpedantic -Wfatal-errors -Wall -Wextra \
-Wshadow -Winit-self -Wwrite-strings -Wconversion -Wcast-qual \
-Wredundant-decls -Wstrict-prototypes -Wmissing-prototypes"

SOURCES=$(find -L ./src ./lib -name "*.c" | grep -v "/libc/")
HEADERS=$(find -L ./src ./lib -name "*.h" | grep -v "/libc/")
OBJECTS="*.o"

echoexec() {
    echo "$@" && "$@"
}

clean() {
    rm -f $OBJECTS "$OUT"
}

is_up_to_date() {
    [ -f "$1" ] && [ -z "$(find -L . -name "*.[c|h]" -newer "$1")" ]
}

build_libc() {
    (cd lib/libc && ./make)
}

showsize() {
    output="$(wc -c "$OUT" | tr '\t' ' ' | tr -s ' ')"
    echo "$1 SIZE:\t$(echo "${output## }" | cut -d' ' -f1) bytes"
}

build() {
    if is_up_to_date "$OUT"; then
        return
    fi
    if "$CC" -v 2>&1 | grep -q "^tcc"; then
        WFLAGS="-Wall"
    fi
    if echoexec "$CC" -o "$OUT" -Ilib $WFLAGS $CFLAGS $SOURCES; then
        rm -f $OBJECTS
        echo
        echo "BUILD SUCCESSFUL"
        showsize "BINARY"
    fi
}

config_optimized() {
    # no-asynchronous-unwind-tables decreases the executable size
    CFLAGS="-DNDEBUG -O3 -flto -fno-asynchronous-unwind-tables $CFLAGS"
}

config_static() {
    CFLAGS="-static $CFLAGS"
}

config_debug() {
    WFLAGS="$WFLAGS -Wno-macro-redefined"
    CFLAGS="-g -Og -fsanitize=address,undefined -D_FORTIFY_SOURCE=2 $CFLAGS"
}

config_custom() {
    printf "%b" "$RED"
    echo "NOTE: There has been some non-determinism in this build"
    echo "If the tests fail, try rebuilding and it should fix it,"
    echo "or you can change the optimization level from -Os to -O1"
    printf "%b\n" "$NOCOLOR"
    # stack-protector should be off by default, but some linux distributions
    # patch gcc to turn it on by default, so we explicitly disable it here
    # since it will cause the custom build to fail if it is enabled
    CFLAGS="-Os -nostdlib -nostdinc -isystem ./lib/libc/include/ -fno-builtin -fno-stack-protector -flto $CFLAGS"
    SOURCES=$(find -L . -name "*.c")
    OBJECTS="*.o lib/libc/sys.o"
}

config_unused() {
    CFLAGS="-O0 -fdata-sections -ffunction-sections -Wl,--gc-sections,--print-gc-sections $CFLAGS"
}

strip_symbols() {
    if command -v sstrip > /dev/null; then
        sstrip "$OUT" && showsize "STRIPPED"
    else
        strip "$OUT" && showsize "STRIPPED"
    fi
}

strip_comments() {
    if is_cc "gcc"; then
        gcc -fpreprocessed -dD -E -P "$@"
    else
        # doesn't strip out /* ... */ comments
        cat "$@" | grep -v '^[[:space:]]*//' | grep -v '^[[:space:]]*$'
    fi
}

sloc() {
    strip_comments $HEADERS $SOURCES | grep -v assert | wc -l
}

floc() {
    strip_comments $SOURCES | grep -v assert |
        ../tools/floc.sh | sort -n | ../tools/hist.sh
}

case "$1" in
    "") config_optimized && build;;
    test) config_optimized && build && time test/test.sh;;
    static) clean && config_optimized && config_static && build;;
    debug) clean && config_debug && build;;
    custom) clean && config_custom && build_libc && build;;
    unused) clean && config_unused && build_libc && build;;
    strip) strip_symbols;;
    clean) clean;;
    sloc) sloc;;
    floc) floc;;
    tree) find lib src | sort | sed 's#[^/]*/#| #g';;
    graph) ../tools/depgraph.sh src | dot -o architecture.pdf -T pdf;;
    *) echo "usage error: unrecognized command \"$1\""; exit 1;;
esac
