#!/bin/sh

CC=${CC:-"cc"}
OUT=${OUT:-"main"}
SOURCES=$(find -L ./src ./lib -name "*.c" | grep -v "/libc/")
HEADERS=$(find -L ./src ./lib -name "*.h" | grep -v "/libc/")

# use this command to find all warnings not enabled by -Wall -Wextra
# gcc -Wall -Wextra -Q --help=warning | grep "\[disabled\]"

WFLAGS="-std=c99 -Wpedantic -Wfatal-errors -Wall -Wextra \
-Wshadow -Winit-self -Wwrite-strings -Wconversion -Wcast-qual \
-Wredundant-decls -Wstrict-prototypes -Wmissing-prototypes"

clean() {
    rm -f "$OUT"
}

is_up_to_date() {
    [ -f "$OUT" ] && [ -z "$(find -L . -name "*.[c|h]" -newer "$OUT")" ]
}

libc() {
    (cd lib/libc && ./make)
}

size() {
    output="$(wc -c "$OUT" | tr '\t' ' ' | tr -s ' ')"
    echo "${1:-"BINARY"} SIZE:\t$(echo "${output## }" | cut -d' ' -f1) bytes"
}

build() {
    _echoexec() { echo "$@" && "$@"; }
    if is_up_to_date; then
        return
    fi
    if "$CC" -v 2>&1 | grep -q "^tcc"; then
        WFLAGS="-Wall"
    fi
    if _echoexec "$CC" -o "$OUT" -Ilib $WFLAGS $CFLAGS $SOURCES; then
        echo && echo "BUILD SUCCESSFUL" && size
    fi
}

default() {
    # no-asynchronous-unwind-tables decreases the executable size
    CFLAGS="-DNDEBUG -O3 -flto -fno-asynchronous-unwind-tables $CFLAGS"
    build
}

test() {
    default && time test/test.sh
}

static() {
    CFLAGS="-static $CFLAGS"
    clean && default
}

debug() {
    WFLAGS="$WFLAGS -Wno-macro-redefined"
    CFLAGS="-g -Og -fsanitize=address,undefined -D_FORTIFY_SOURCE=2 $CFLAGS"
    clean && build
}

custom() {
    echo "NOTE: There has been some non-determinism in this build"
    echo "If the tests fail, try rebuilding and it should fix it,"
    echo "or you can change the optimization level from -Os to -O1"
    # stack-protector should be off by default, but some linux distributions
    # patch gcc to turn it on by default, so we explicitly disable it here
    # since it will cause the custom build to fail if it is enabled
    CFLAGS="-Os -nostdlib -nostdinc -isystem ./lib/libc/include/ \
        -fno-builtin -fno-stack-protector -flto $CFLAGS"
    SOURCES=$(find -L . -name "*.c")
    clean && libc && build
}

unused() {
    CFLAGS="-O0 -fdata-sections -ffunction-sections \
        -Wl,--gc-sections,--print-gc-sections $CFLAGS"
    clean && libc && build
}

strip() {
    if command -v sstrip > /dev/null; then
        sstrip "$OUT" && size "STRIPPED"
    else
        command strip "$OUT" && size "STRIPPED"
    fi
}

dump() {
    # prints source files with comments and blank lines removed
    if [ "$#" = 0 ]; then set $HEADERS $SOURCES; fi
    if "$CC" -v 2>&1 | grep -q "^gcc"; then
        gcc -fpreprocessed -dD -E -P "$@"
    else
        # doesn't strip out /* ... */ comments
        cat "$@" | grep -v '^[[:space:]]*//' | grep -v '^[[:space:]]*$'
    fi
}

sloc() {
    dump | grep -v assert | wc -l
}

floc() {
    dump $SOURCES | grep -v assert |
        ../tools/floc.sh | sort -n | ../tools/hist.sh
}

tree() {
    find lib src | sort | sed 's#[^/]*/#| #g'
}

graph() {
    ../tools/depgraph.sh src | dot -o architecture.pdf -T pdf
}

target="${1:-"default"}"
if [ "$(command -v "$target")" = "$target" ]; then "$target"
else echo "usage error: unrecognized command '$1'"; exit 1; fi
