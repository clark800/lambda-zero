===============================================================================
first (((1, 2)))
1
===============================================================================
first(((1, 2)))
1
===============================================================================
iterate((+ 1))(0)[2]
2
===============================================================================
head [7, 8]
7
===============================================================================
if false (x -> x) (y -> y)
(y -> y)
===============================================================================
--((x -> x) :: (y -> y))
(y -> y)
===============================================================================
head(((x -> x) :: (y -> y)) :: (z -> z))
(n -> (p -> ((p (x -> x)) (y -> y))))
===============================================================================
head(sort(5 :: 60 :: 7 :: 14 :: 2 :: 5 :: 33 :: []))
2
===============================================================================
head(5 :: (10 :: (15 :: (20 :: []))) | (> 10))
15
===============================================================================
head(replicate(10, 7))
10
===============================================================================
(x -> x"123"x) 0
\nRuntime error: extra argument at line 299 column 8
===============================================================================
main(input) := "Hello world"
Hello world
===============================================================================
main(input) := "abcdef".interleave(',')
a,b,c,d,e,f
===============================================================================
"abcd" =*= 'a'..'d'
(f -> (t -> t))
===============================================================================
"aceswild".find(isEven) ?|| -1
108
===============================================================================
"aces".find(isEven) ?|| -1
-1
===============================================================================
main(input) := ("abbc" | x -> "bbcd".any((= x)))
bbc
===============================================================================
just(10) ?|| 5
10
===============================================================================
nothing ?|| 5
5
===============================================================================
isJust(just(1))
(f -> (t -> t))
===============================================================================
isJust(nothing)
(f -> (t -> f))
===============================================================================
isNothing(nothing)
(f -> (t -> t))
===============================================================================
isNothing(just(10))
(f -> (t -> f))
===============================================================================
just(2) >>= just <> (2 *) ?|| 0
4
===============================================================================
length("")
0
===============================================================================
first((1 , (* 2) ^^ 2))
1
===============================================================================
head --[1, 2, 3]
2
===============================================================================
head (--[1, 2, 3])
2
===============================================================================
(head) --[1, 2, 3]
2
===============================================================================
length [1, 2, 3, 4, 5, 6]
6
===============================================================================
[1, 2, 3, 4, 5, 6][4]
5
===============================================================================
!isEmpty([])
(f -> (t -> f))
===============================================================================
![].isEmpty
(f -> (t -> f))
===============================================================================
length(3..9)
7
===============================================================================
(1..10)[5]
6
===============================================================================
"!@#$%^".any((= '#'))
(f -> (t -> t))
===============================================================================
! `divides(2, 10)
(f -> (t -> t))
===============================================================================
first(swap((1, 2)))
2
===============================================================================
"//123".startsWith("//")
(f -> (t -> t))
===============================================================================
parseInteger("1234567890", 10)
1234567890
===============================================================================
parseInteger("-1234567890", 10)
-1234567890
===============================================================================
"abc" <*= "abcd"
(f -> (t -> t))
===============================================================================
"abc" <*= "ab"
(f -> (t -> f))
===============================================================================
"acb" <*= "abc"
(f -> (t -> f))
===============================================================================
last([1,2,3,4])
4
===============================================================================
a := (1, 2, 3) \n f(x, y, z) := 5 * x - y + z \n f.a
6
===============================================================================
(a, b, c, d) := (1, 2, 3, 4) \n a + b * c + d
11
===============================================================================
((a, b, c), (d, e, f), (g, h, i)) := ((1, 2, 3), (4, 5, 6), (7, 8, 9)) \n c * h
24
===============================================================================
(nothing -> 0 ; just(x) -> x * x) nothing
0
===============================================================================
(nothing -> 0 ; just(x) -> x * x) just(5)
25
===============================================================================
([] -> 0 ; x :: xs -> x * x) []
0
===============================================================================
([] -> 0 ; x :: xs -> x * x) [3, 4, 5]
9
===============================================================================
(zero -> 0 ; positive(n) -> n + 1 ; negative(n) -> n - 1) zero
0
===============================================================================
(zero -> 0 ; positive(n) -> n + 1 ; negative(n) -> n - 1) positive(4)
5
===============================================================================
(zero -> 0 ; positive(n) -> n + 1 ; negative(n) -> n - 1) negative(4)
3
===============================================================================
