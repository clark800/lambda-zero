===============================================================================
1 +_ 2
Syntax error: missing operator before '+_' at line 1 column 3
===============================================================================
"x\"
Syntax error: missing end quote for '"x\"' at line 1 column 1
===============================================================================
first(((1, 2)))
1
===============================================================================
iterate((1 +))(0).pick(2) ?? 0
2
===============================================================================
pop([7, 8]) ?? 0
7
===============================================================================
if ~~ False then 1 else 0
1
===============================================================================
if False \n  (x ↦ x) \n(y ↦ y)
y ↦ y
===============================================================================
pop(sort(5 :: 60 :: 7 :: 14 :: 2 :: 5 :: 33 :: [])) ?? 0
2
===============================================================================
pop(5 :: (10 :: (15 :: (20 :: []))) |: (> 10)) ?? 0
15
===============================================================================
pop(replicate(7, 10)) ?? 0
10
===============================================================================
(x ↦ ""x)(0)
Syntax error: missing operator before 'x' at line 1 column 10
===============================================================================
main(input) := "Hello world"
Hello world
===============================================================================
main(input) := "abcdef".interleave(',')
a,b,c,d,e,f
===============================================================================
if "abcd" =*= 'a' .. 'd' then 1 else 0
1
===============================================================================
"aceswild".find(isEven) ?? 0
108
===============================================================================
"aces".find(isEven) ?? 0
0
===============================================================================
main(input) := "abbc" |: (x ↦ "bbcd".any((= x)))
bbc
===============================================================================
if isRight(Right(1)) then 1 else 0
1
===============================================================================
if isRight(Left(())) then 1 else 0
0
===============================================================================
length("")
0
===============================================================================
first((1 , (2 *) ^^ 2))
1
===============================================================================
pop([1, 2]) ?? 0
1
===============================================================================
pop([]) ?? 0
0
===============================================================================
length([1, 2, 3, 4, 5, 6])
6
===============================================================================
[1, 2, 3, 4, 5, 6].pick(4) ?? 0
5
===============================================================================
if not isNil([]) then 1 else 0
0
===============================================================================
if not[].isNil then 1 else 0
0
===============================================================================
length(3 .. 9)
7
===============================================================================
(1 .. 10).pick(5) ?? 0
6
===============================================================================
if "!@#$%^".any((= '#')) then 1 else 0
1
===============================================================================
if not divides(2, 10) then 1 else 0
1
===============================================================================
first(swap((1, 2)))
2
===============================================================================
if "//123".startsWith("//") then 1 else 0
1
===============================================================================
parseNatural("1234567890") ?? 0
1234567890
===============================================================================
if "abc" <*= "abcd" then 1 else 0
1
===============================================================================
if "abc" <*= "ab" then 1 else 0
0
===============================================================================
if "acb" <*= "abc" then 1 else 0
0
===============================================================================
pop(reverse([1,2,3,4])) ?? 0
4
===============================================================================
a := (1, 2, 3) \nf(x, y, z) := 5 * x -- y + z \nf.a
6
===============================================================================
(a, b, c, d) := (1, 2, 3, 4) \na + b * c + d
11
===============================================================================
((a, b, c), (d, e, f), (g, h, i)) := ((1, 2, 3), (4, 5, 6), (7, 8, 9)) \nc * h
24
===============================================================================
(case Left(()) ↦ 0 ; case Right(x) ↦ x * x)(Left(()))
0
===============================================================================
(case Left(()) ↦ 0 ; case Right(x) ↦ x * x)(Right(5))
25
===============================================================================
(case [] ↦ 0 ; case x :: xs ↦ x * x)([])
0
===============================================================================
(case [] ↦ 0 ; case x :: xs ↦ x * x)([3, 4, 5])
9
===============================================================================
(case +_ n ↦ n + 1 ; case -_ n ↦ n + 2;)(-_ 0)
2
===============================================================================
(case +_ n ↦ n + 1 ; case -_ n ↦ n -- 1)(+_ 4)
5
===============================================================================
(case +_ n ↦ n + 1 ; case -_ n ↦ n -- 1)(-_ 4)
3
===============================================================================
(p@(a, b) ↦ first(p) * (a + b))((4, 5))
36
===============================================================================
up 1000000000
1000000001
===============================================================================
up 0 + up up 0
3
===============================================================================
up 1000000000
1000000001
===============================================================================
1000000000 + up 1000000000
2000000001
===============================================================================
up 1000000000 + 1000000000
2000000001
===============================================================================
pop([]) ?? 0
0
===============================================================================
sum(1..10)
55
===============================================================================
f(x, y, z) := y * (z + 1) \n`f(2, 3, 5)
12
===============================================================================
f(x, y, z) := y * (z + 1) \n``f(2, 3, 5)
15
===============================================================================
(syntax(%%) := infix(20), 0)
Syntax error: invalid right hand side ':=' at line 1 column 13
===============================================================================
Void ?? 2
2
===============================================================================
Just(1) ?? 2
1
===============================================================================
mapJust((* 2), Just(2)) ?? 0
4
===============================================================================
mapJust((* 2), Void) ?? 0
0
===============================================================================
maybe x := Just(1)\nx
1
===============================================================================
(maybe x := Void\nx) ?? 2
2
===============================================================================
try x := Right(1)\nx
1
===============================================================================
try x := Right(1)\n2
2
===============================================================================
(case 0 ↦ 0; case up(n) ↦ 1)(0)
0
===============================================================================
(case 0 ↦ 0; case up(n) ↦ 1)(5)
1
===============================================================================
(case 0 ↦ 0; case n @ up n' ↦ n + n')(4)
Syntax error: invalid case '@' at line 1 column 23
===============================================================================
def x\n  match 3 to case 0 ↦ 1; case up(n) ↦ n * n\nx
4
==========================================================================
[1] |> case x :: xs ↦ x; case _ ↦ 0
1
==========================================================================
[] |> case x :: xs ↦ x; case _ ↦ 0
0
==========================================================================
Void |> case Void ↦ 1; case _ ↦ 2
1
==========================================================================
Just(3) |> case Void ↦ 1; case _ ↦ 2
2
==========================================================================
Void |> case Just(x) ↦ x; case _ ↦ 0
0
==========================================================================
Just(3) |> case Just(x) ↦ x; case _ ↦ 0
3
==========================================================================
Void |> case Just(x) ↦ x; case Void ↦ 1; case _ ↦ 0
1
==========================================================================
Just(3) |> case Void ↦ 1; case Just(x) ↦ x; case _ ↦ 0
3
==========================================================================
[] |> case _ ↦ 0; case x :: xs ↦ 1
Syntax error: invalid default case position 'this' at line 1 column 12
==========================================================================
if [1] is x :: xs\n  x\n0
1
==========================================================================
if [] is x :: xs\n  x\n0
0
==========================================================================
if [1] is x :: xs\n  if x = 1 then 2 * pass else 2\n3
6
==========================================================================
if x is (z -> z)\n  1\n0
Syntax error: expected pattern after 'is' at line 1 column 6
===============================================================================
if x is A then 1 else 0
Syntax error: invalid prior for 'then' at line 1 column 11
===============================================================================
main(input) := showSubscript(123)
₁₂₃
===============================================================================
(case 0 -> this + 1; case up n -> 2 * this)(0)
1
===============================================================================
(case 0 -> this + 1; case up n -> 2 * this)(2)
4
===============================================================================
(case 0 -> this + 1; case _ -> 2 * this)(0)
1
===============================================================================
(case 0 -> this + 1; case _ -> 2 * this)(2)
4
===============================================================================
