===============================================================================
"x\"
Syntax error: missing end quote for '"x\"' at line 1 column 1
===============================================================================
first(((1, 2)))
1
===============================================================================
iterate((1 +))(0)[2]
2
===============================================================================
head([7, 8])
7
===============================================================================
if(false)(x -> x)(y -> y)
(y -> y)
===============================================================================
tail((x -> x) :: (y -> y))
(y -> y)
===============================================================================
head(((x -> x) :: (y -> y)) :: (z -> z))
(_ -> (_ -> ((_ (x -> x)) (y -> y))))
===============================================================================
head(sort(5 :: 60 :: 7 :: 14 :: 2 :: 5 :: 33 :: []))
2
===============================================================================
head(5 :: (10 :: (15 :: (20 :: []))) |: (> 10))
15
===============================================================================
head(replicate(10, 7))
10
===============================================================================
(x -> ""x)(0)
Syntax error: missing operator before 'x' at line 1 column 9
===============================================================================
main(input) := "Hello world"
Hello world
===============================================================================
main(input) := "abcdef".interleave(',')
a,b,c,d,e,f
===============================================================================
"abcd" =*= 'a' .. 'd' ? 1 || 0
1
===============================================================================
"aceswild".find(isEven) ?! 0
108
===============================================================================
"aces".find(isEven) ?! 0
0
===============================================================================
main(input) := "abbc" |: (x -> "bbcd".any((= x)))
bbc
===============================================================================
just(10) ?! 5
10
===============================================================================
nothing ?! 5
5
===============================================================================
isJust(just(1)) ? 1 || 0
1
===============================================================================
isJust(nothing) ? 1 || 0
0
===============================================================================
isNothing(nothing) ? 1 || 0
1
===============================================================================
isNothing(just(10)) ? 1 || 0
0
===============================================================================
just(2) ?? just <> (2 *) ?! 0
4
===============================================================================
length("")
0
===============================================================================
first((1 , (2 *) ^^ 2))
1
===============================================================================
syntax( ) := infixL(18) \n f x := f(x) \n head tail([1, 2, 3])
2
===============================================================================
syntax( ) := infixL(18) \n f x := f(x) \n head (tail([1, 2, 3]))
2
===============================================================================
syntax( ) := infixL(18) \n f x := f(x) \n (head) (tail [1, 2, 3])
2
===============================================================================
length([1, 2, 3, 4, 5, 6])
6
===============================================================================
[1, 2, 3, 4, 5, 6][4]
5
===============================================================================
! isNil([]) ? 1 || 0
0
===============================================================================
![].isNil ? 1 || 0
0
===============================================================================
length(3 .. 9)
7
===============================================================================
(1 .. 10)[5]
6
===============================================================================
"!@#$%^".any((= '#')) ? 1 || 0
1
===============================================================================
! `divides(2, 10) ? 1 || 0
1
===============================================================================
first(swap((1, 2)))
2
===============================================================================
"//123".startsWith("//") ? 1 || 0
1
===============================================================================
abs′(parseInteger("1234567890", 10))
1234567890
===============================================================================
abs′(parseInteger("-1234567890", 10))
1234567890
===============================================================================
"abc" <*= "abcd" ? 1 || 0
1
===============================================================================
"abc" <*= "ab" ? 1 || 0
0
===============================================================================
"acb" <*= "abc" ? 1 || 0
0
===============================================================================
last([1,2,3,4])
4
===============================================================================
a := (1, 2, 3) \n f(x, y, z) := 5 * x - y + z \n f.a
6
===============================================================================
(a, b, c, d) := (1, 2, 3, 4) \n a + b * c + d
11
===============================================================================
((a, b, c), (d, e, f), (g, h, i)) := ((1, 2, 3), (4, 5, 6), (7, 8, 9)) \n c * h
24
===============================================================================
(nothing -> 0 ; just(x) -> x * x)(nothing)
0
===============================================================================
(nothing -> 0 ; just(x) -> x * x)(just(5))
25
===============================================================================
([] -> 0 ; x :: xs -> x * x)([])
0
===============================================================================
([] -> 0 ; x :: xs -> x * x)([3, 4, 5])
9
===============================================================================
(+ n -> n + 1 ; - n -> n + 2;)(- 0)
2
===============================================================================
(+ n -> n + 1 ; - n -> n - 1)(+ 4)
5
===============================================================================
(+ n -> n + 1 ; - n -> n - 1)(- 4)
3
===============================================================================
(p@(a, b) -> first(p) * (a + b))((4, 5))
36
===============================================================================
up 1000000000
1000000001
===============================================================================
up 0 + up up 0
3
===============================================================================
up 1000000000
1000000001
===============================================================================
1000000000 + up 1000000000
2000000001
===============================================================================
up 1000000000 + 1000000000
2000000001
===============================================================================
head([])
undefined
===============================================================================
sum(1..10)
55
===============================================================================
