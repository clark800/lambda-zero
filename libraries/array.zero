#@ array.zero

ArrayT(a) ::= {Array(size : ℕ, data : List(ℕ && FullBinaryTree(a)))}

newArray(xs) := Array(length(xs), newRandomAccessList(reverse(xs)))
Array(size, data).getSize := size
Array(size, data).toList := reverse(toListRAL(data))
Array(size, data).get(n) := if n >= size then Void else
    data.getRAL(size -- n -- 1)
Array(size, data).set(n, x) := if n >= size then Array(size, data) else
    Array(size, data.setRAL(size -- n -- 1, x))
Array(size, data).append(value) := (size, Array(up size, data.pushRAL(value)))
Array(size, data).push(value) := Array(up size, data.pushRAL(value))
Array(size, data).pull := Array(down size, data.pullRAL)
Array(size, data).peek(n) := data.getRAL(n)

def seek(index, array)
    match index
        case +_ n -> array.get(n)
        case -_ n -> if n = 0 then Void else array.peek(n -- 1)
#@
