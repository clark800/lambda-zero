#* prelude.zero

id(x) ≔ x
const(x) ≔ _ ↦ x
f of x ≔ f(x)
match x to f ≔ f(x)
f ∘ g ≔ x ↦ f(g(x))
`f(x, y) ≔ f(y, x)
``f(x, y, z) ≔ f(y, z, x)
on(f, g) ≔ x ↦ y ↦ g(f(x), f(y))
fix(f) ≔ 𝛚(f ∘ 𝛚) where 𝛚(x) ≔ x(x)

# bottom
⊥ ⩴ {}

# unit
𝕌 ⩴ {()}

# pair
a ⊓ b ⩴ {(_ : a, _ : b)}
first((a, b)) ≔ a
second((a, b)) ≔ b
pair(a, b) ≔ (a, b)
swap((x, y)) ≔ (y, x)
mapFirst(f, xy) ≔ (f(first(xy)), second(xy))
mapSecond(f, xy) ≔ (first(xy), f(second(xy)))
mapPair(f, xx) ≔ (f(first(xx)), f(second(xx)))
curry(f) ≔ x ↦ y ↦ f((x, y))
uncurry(f) ≔ xx ↦ f(first(xx), second(xx))

# more tuples
Triple(a, b, c) ⩴ {(_ : a, _ : b, _ : c)}
Quadruple(a, b, c, d) ⩴ {(_ : a, _ : b, _ : c, _ : d)}

# boolean
𝔹 ⩴ {False, True}
if b then x else y ≔ b ⦊ False ↦ y; True ↦ x
not b ≔ if b then False else True
b and c ≔ if b then c else False
b or c ≔ if b then True else c
b xor c ≔ if b then not c else c
until(p, f, z) ≔ if p(z) then z else until(p, f, f(z))
while(p, f, z) ≔ until((not) ∘ p, f, z)

# maybe
(a)? ⩴ {Void, Just(_ : a)}
isVoid ≔ Void ↦ True; Just(_) ↦ False
onJust(f, mx) ≔ mx ⦊ Void ↦ Void; Just(x) ↦ f(x)
mapJust(f, mx) ≔ mx.onJust(Just ∘ f)
mx ⁇ x ≔ mx ⦊ Void ↦ x; Just(x′) ↦ x′

# either
a ⊔ b ⩴ {Left(_ : a), Right(_ : b)}
isLeft ≔ Left(_) ↦ True; Right(_) ↦ False
isRight ≔ Left(_) ↦ False; Right(_) ↦ True
try exy catch f ≔ exy ⦊ Left(x) ↦ f(x); Right(y) ↦ y
onLeft(f, exy) ≔ exy ⦊ Left(x) ↦ f(x); Right(y) ↦ Right(y)
onRight(f, exy) ≔ exy ⦊ Left(x) ↦ Left(x); Right(y) ↦ f(y)
mapLeft(f, exy) ≔ exy.onLeft(Left ∘ f)
mapRight(f, exy) ≔ exy.onRight(Right ∘ f)
toMaybe ≔ Left(_) ↦ Void; Right(y) ↦ Just(y)

# numbers
ℕ ⩴ {0, ↑(n : ℕ)}
ℤ ⩴ {ᐩ(n : ℕ), ᐨ(n : ℕ)}
ℚ ⩴ {(numerator : ℤ) / (denominator : ℤ)}

↓ n ≔ n ⦊ 0 ↦ 0; ↑ n′ ↦ n′
(=) ≔ 0 ↦ (0 ↦ True; ↑ _ ↦ False); ↑ n ↦ (0 ↦ False; ↑ m ↦ n = m)
(≠) ≔ 0 ↦ (0 ↦ False; ↑ _ ↦ True); ↑ n ↦ (0 ↦ True; ↑ m ↦ n ≠ m)
(<) ≔ 0 ↦ (0 ↦ False; ↑ _ ↦ True); ↑ n ↦ (0 ↦ False; ↑ m ↦ n < m)
(>) ≔ 0 ↦ (0 ↦ False; ↑ _ ↦ False); ↑ n ↦ (0 ↦ True; ↑ m ↦ n > m)
(≤) ≔ 0 ↦ (0 ↦ True; ↑ _ ↦ True); ↑ n ↦ (0 ↦ False; ↑ m ↦ n ≤ m)
(≥) ≔ 0 ↦ (0 ↦ True; ↑ _ ↦ False); ↑ n ↦ (0 ↦ True; ↑ m ↦ n ≥ m)
(+) ≔ 0 ↦ m ↦ m; ↑ n ↦ m ↦ ↑(n + m)
(∸) ≔ 0 ↦ (0 ↦ 0; ↑ _ ↦ 0); ↑ n ↦ (0 ↦ ↑ n; ↑ m ↦ n ∸ m)
(⋅) ≔ 0 ↦ (_ ↦ 0); ↑ n ↦ m ↦ m + n ⋅ m
n ⫽ m ≔ if m = 0 or n < m then 0 else ↑((n ∸ m) ⫽ m)
n % m ≔ if m = 0 then n else (if n < m then n else (n ∸ m) % m)

(≐) ≔ ᐩ n ↦ (ᐩ m ↦ n = m; ᐨ m ↦ False); ᐨ n ↦ (ᐩ m ↦ False; ᐨ m ↦ n = m)
isPositive ≔ ᐩ n ↦ True; ᐨ n ↦ False
isNegative ≔ ᐩ n ↦ False; ᐨ n ↦ True
negate ≔ ᐩ n ↦ ᐨ n; ᐨ n ↦ ᐩ n
abs ≔ ᐩ n ↦ n; ᐨ n ↦ n
min(n, m) ≔ if n ≤ m then n else m
max(n, m) ≔ if n ≥ m then n else m
mod(d, n) ≔ n % d
isEven(n) ≔ n.mod(2) = 0
isOdd(n) ≔ n.mod(2) ≠ 0
divides(n, d) ≔ n.mod(d) = 0
n ! ≔ n ⦊ 0 ↦ 1; ↑ n′ ↦ n ⋅ n′ !
gcd(n, m) ≔ if m = 0 then n else gcd(m, n.mod(m))
f ° n ≔ n ⦊ 0 ↦ id; ↑ n′ ↦ f ∘ f ° n′
(n)² ≔ n ⋅ n
n ^ m ≔ m ⦊ 0 ↦ 1; ↑ m′ ↦ if isEven(m) then (n ^ (m ⫽ 2))² else n ⋅ n ^ m′


# list
List(a) ⩴ {[], (head : a) ∷ (tail : List(a))}
prepend ≔ (∷)
isNil ≔ [] ↦ True; _ ∷ _ ↦ False
fold(f, z, xs) ≔ xs ⦊ [] ↦ z; x ∷ xs′ ↦ f(x, fold(f, z, xs′))
cascade(f, z, xs) ≔ xs ⦊ [] ↦ z; x ∷ xs′ ↦ cascade(f, f(z, x), xs′)
abort(message : List(ℕ)) ≔ abort(message)

xs ⧺ ys ≔ xs.fold((∷), ys)
join(xss) ≔ xss.fold((⧺), [])
length(xs) ≔ xs.fold(const((↑)), 0)
reverse(xs) ≔ xs.cascade(`(∷), [])
drop(n, xs) ≔ n ⦊ 0 ↦ xs; ↑ n′ ↦ (xs ⦊ [] ↦ []; _ ∷ xs′ ↦ xs′.drop(n′))
take(n, xs) ≔ n ⦊ 0 ↦ []; ↑ n′ ↦ (xs ⦊ [] ↦ []; x ∷ xs′ ↦ x ∷ xs′.take(n′))
xs[n, n′] ≔ xs.drop(n).take(n′ ∸ n)
slice(n, n′, xs) ≔ xs[n, n′]
dropLast(xs) ≔ xs ⦊ [] ↦ [];
    x ∷ xs′ ↦ if isNil(xs′) then [] else x ∷ dropLast(xs′)
safeHead(xs) ≔ xs ⦊ [] ↦ Void; x ∷ _ ↦ Just(x)
safeTail(xs) ≔ xs ⦊ [] ↦ Void; _ ∷ xs ↦ Just(xs)
safeLast(xs) ≔ xs ⦊ [] ↦ Void;
    x ∷ xs′ ↦ (xs′ ⦊ [] ↦ Just(x); _ ∷ _ ↦ safeLast(xs′))
at(n, xs) ≔ n ⦊ 0 ↦ safeHead(xs);
    ↑ n′ ↦ (xs′.at(n′) where maybe xs′ ≔ safeTail(xs))
dropIf(p, ns) ≔ ns ⦊ [] ↦ []; n ∷ ns′ ↦ if p(n) then ns′ else ns
takeWhile(p, xs) ≔ xs ⦊ [] ↦ [];
    x ∷ xs′ ↦ if p(x) then x ∷ takeWhile(p, xs′) else []
dropWhile(p, xs) ≔ xs ⦊ [] ↦ [];
    x ∷ xs′ ↦ if p(x) then dropWhile(p, xs′) else xs
filter(p, xs) ≔ xs.fold(x ↦ xs′ ↦ if p(x) then x ∷ xs′ else xs′, [])
xs ¦ p ≔ filter(p, xs)
map(f, xs) ≔ xs.fold((∷) ∘ f, [])
(⬫) ≔ map
filterMap(f, xs) ≔ xs ⦊ [] ↦ []; x ∷ xs′ ↦
    (f(x) ⦊ Void ↦ xs″; Just(x′) ↦ x′ ∷ xs″ where xs″ ≔ filterMap(f, xs′))
prune(mxs) ≔ filterMap(id, mxs)
sequence(mxs) ≔ mxs ⦊ [] ↦ Just([]); mx ∷ mxs′ ↦
    (mx ⦊ Void ↦ Void; Just(x) ↦
        (sequence(mxs′) ⦊ Void ↦ Void; Just(xs) ↦ Just(x ∷ xs)))
zipWith(f, xs, ys) ≔ xs ⦊
    [] ↦ []; x ∷ xs′ ↦ (ys ⦊ [] ↦ []; y ∷ ys′ ↦ f(x, y) ∷ zipWith(f, xs′, ys′))
zip(xs, ys) ≔ zipWith(pair, xs, ys)
unzip(xs) ≔ (xs.map(first), xs.map(second))
pairs(xs) ≔ xs ⦊ [] ↦ []; _ ∷ xs′ ↦ zip(xs, xs′)
interleave(y, xs) ≔ xs ⦊ [] ↦ []; x ∷ xs′ ↦ x ∷ interleave′(xs′) where
    interleave′ ≔ [] ↦ []; x ∷ xs′ ↦ y ∷ x ∷ interleave′(xs′)
joinWith(ys, xss) ≔ join(interleave(ys, xss))
bisect(p, xs) ≔ (xs ¦ p, xs ¦ (not) ∘ p)
any(p, xs) ≔ xs.map(p).fold((or), False)
all(p, xs) ≔ xs.map(p).fold((and), True)
count(p, xs) ≔ length(xs ¦ p)

iterate(f, x) ≔ x ∷ iterate(f, f(x))
repeat(x) ≔ x ∷ repeat(x)
replicate(n, x) ≔ ((x ∷) ° n)([])
cycle(xs) ≔ xs ⧺ cycle(xs)
n ‥ m ≔ if n > m then [] else n ∷ (↑ n ‥ m)
(…) ≔ iterate((↑))
find(p, xs) ≔ safeHead(xs ¦ p)
contains(p, xs) ≔ not isVoid(xs.find(p))
findIndices(p, xs) ≔ (zip(0 …, xs) ¦ p ∘ second).map(first)
findIndex(p, xs) ≔ safeHead(findIndices(p, xs))

cascadeMaybe(f, z, xs) ≔ xs ⦊ [] ↦ Just(z); x ∷ xs′ ↦
    f(z, x).onJust(y ↦ cascadeMaybe(f, y, xs′))

# cascadeMap : (a => s => (b && s)) => s => List(a) => (List(b) && s)
cascadeMap(f, z, xs) ≔ xs.cascade((ys, s) ↦ x ↦
    f(x, s).mapFirst((∷ ys)), ([], z)).mapFirst(reverse)

sort ≔ [] ↦ []; n ∷ ns ↦ sort(ns ¦ (≤ n)) ⧺ [n] ⧺ sort(ns ¦ (> n))

sortBy((≾)) ≔ [] ↦ [];
    n ∷ ns ↦ sortBy((≾), ns ¦ (≾ n)) ⧺ [n] ⧺ sortBy((≾), ns ¦ (not) ∘ (≾ n))

deduplicateBy((≟), xs) ≔ xs ⦊ [] ↦ [];
    x ∷ xs′ ↦ x ∷ deduplicateBy((≟), xs′ ¦ (not) ∘ (≟ x))
deduplicate(xs) ≔ deduplicateBy((=), xs)

∑(ns) ≔ ns.cascade((+), 0)
∏(ns) ≔ ns.cascade((⋅), 1)
sum ≔ ∑
product ≔ ∏

fibonaccis ≔ f(0, 1) where f(m, n) ≔ m ∷ f(n, m + n)
primes ≔ p(2 …) where p ≔ [] ↦ []; n ∷ ns ↦ n ∷ p(ns ¦ (% n ≠ 0))

# string
def xs ≛ ys
    match xs
        [] ↦ isNil(ys)
        x ∷ xs′ ↦ (ys ⦊ [] ↦ False; y ∷ ys′ ↦ x = y and xs′ ≛ ys′)

def ns ⩿ ms
    match ns
        [] ↦ True
        n ∷ ns′ ↦ (ms ⦊ [] ↦ False; m ∷ ms′ ↦ n < m or n = m and ns′ ⩿ ms′)


def startsWith(ks, ns)
    match ks
        [] ↦ True
        k ∷ ks′ ↦ (ns ⦊ [] ↦ False; n ∷ ns′ ↦ n = k and startsWith(ks′, ns′))

def split(p, xs)
    match xs
        [] ↦ ([], [])
        x ∷ xs′ ↦ (if p(xs) then ([], xs) else (x ∷ before, after) where
                  (before, after) ≔ xs′.split(p))

def splitWhen(p, xs)
    match xs
        [] ↦ ([], [])
        x ∷ xs′ ↦ (if p(x) then ([], xs) else (x ∷ before, after) where
                  (before, after) ≔ xs′.splitWhen(p))

splitAt(n, xs) ≔ (xs.take(n), xs.drop(n))
splitEvery(n, xs) ≔ if isNil(xs) then [] else
    ys ∷ splitEvery(n, xs′) where (ys, xs′) ≔ xs.splitAt(n)
splitOn(delimiter, ns) ≔ ns.split(startsWith(delimiter))

def splitWith(splitter, ns)
    (before, after) ≔ splitter(ns)
    if before.isNil
        ([], ns)
    (before′, after′) ≔ after.splitWith(splitter)
    (before ⧺ before′, after′)

def partition(splitter, ns)
    if ns.isNil
        []
    (before, after) ≔ splitter(ns)
    before ∷ after.partition(splitter)

dropPrefix(prefix, ns) ≔
    if ns.startsWith(prefix) then ns.drop(length(prefix)) else ns

partitionBy(p, ns) ≔ ns.partition(splitWhen(p) ∘ dropIf(p))
partitionOn(delimiter, ns) ≔
    ns.partition(splitOn(delimiter) ∘ dropPrefix(delimiter))

words(ns) ≔ (ns.partitionOn(" ") ¦ (not) ∘ isNil)
lines(ns) ≔ ns.partitionOn("\n")

# ASCII character classes
isUppercase(n) ≔ n ≥ 'A' and n ≤ 'Z'
isLowercase(n) ≔ n ≥ 'a' and n ≤ 'z'
isDigit(n) ≔ n ≥ '0' and n ≤ '9'
isQuote(n) ≔ n = '"' or n = '\''
isWhitespace(n) ≔ n = ' ' or n ≥ '\t' and n ≤ '\r'
isBlank(n) ≔ n = ' ' or n = '\t'
isControl(n) ≔ n ≥ 0 and n < 32 or n = 127
isAlphabetic(n) ≔ isUppercase(n) or isLowercase(n)
isAlphanumeric(n) ≔ isAlphabetic(n) or isDigit(n)
isPrintable(n) ≔ n < 127 and not isControl(n)
isGraphical(n) ≔ isPrintable(n) and not isBlank(n)
isPunctuation(n) ≔ isGraphical(n) and not isAlphanumeric(n)

# serialization
showBoolean(b) ≔ if b then "True" else "False"

def showNatural(n)
    def showReversedNatural(m)
        if m = 0 then [] else ('0' + m.mod(10)) ∷ showReversedNatural(m ⫽ 10)
    if n = 0 then "0" else reverse(showReversedNatural(n))

showSign ≔ ᐩ _ ↦ ""; ᐨ _ ↦ "-"
showInteger(z) ≔ showSign(z) ⧺ showNatural(abs(z))
showString(ns) ≔ "\"" ⧺ ns ⧺ "\""     # todo: escape
def showPair(showFirst, showSecond, xsxs)
    "(" ⧺ showFirst(xsxs.first) ⧺ ", " ⧺ showSecond(xsxs.second) ⧺ ")"
showList(showElement, xs) ≔ "[" ⧺ xs.map(showElement).joinWith(", ") ⧺ "]"

def showSubscript(n)
    subscripts ≔ ["₀", "₁", "₂", "₃", "₄", "₅", "₆", "₇", "₈", "₉"]
    showNatural(n).map((-- '0')).map(`at(subscripts)).prune.join

showSubscriptSign ≔ ᐩ _ ↦ ""; ᐨ _ ↦ "₋"
showIntegerSubscript(z) ≔ showSubscriptSign(z) ⧺ showSubscript(abs(z))

# parsing
parseDigit(digit) ≔ if isDigit(digit) then Just(digit ∸ '0') else Void
parseNatural(ns) ≔ if isNil(ns) then Void else
    ns.cascadeMaybe(x ↦ d ↦
        (Just(10 ⋅ x + n) where maybe n ≔ parseDigit(d)), 0)
repl(prompt, f, input) ≔ prompt ⧺ input.lines.map(f).joinWith("\n" ⧺ prompt)

# tree
Tree(a) ⩴ {Node(datum : a, children : List(Tree(a)))}

# binary tree
BinaryTree(a) ⩴ {
    Tip,
    Fork(datum : a, left : BinaryTree(a), right : BinaryTree(a))
}

def search((≾), hash, key, tree)
    match tree
        case Tip ↦ Void
        case Fork(datum, left, right)
            key′ ≔ hash(datum)
            if key ≾ key′
                if key′ ≾ key
                    Just(datum)
                search((≾), hash, key, left)
            search((≾), hash, key, right)

def flatten(tree)
    match tree
        Tip ↦ []
        Fork(value, left, right) ↦ flatten(left) ⧺ [value] ⧺ flatten(right)

# full binary tree
FullBinaryTree(a) ⩴ {
    Leaf(datum : a),
    Branch(datum : a, left : FullBinaryTree(a), right : FullBinaryTree(a))
}


def showFullBinaryTree(showElement, tree)
    def showElementLine(indent, x)
        replicate(2 ⋅ indent, ' ') ⧺ showElement(x) ⧺ "\n"

    def showFullBinaryTreeNode(indent, node)
        match node
            case Leaf(x) ↦ showElementLine(indent, x)
            case Branch(x, left, right)
                showElementLine(indent, x) ⧺
                    showFullBinaryTreeNode(↑ indent, left) ⧺
                    showFullBinaryTreeNode(↑ indent, right)

    showFullBinaryTreeNode(0, tree)

# state

lift value ≔ state ↦ (value, state)
f ≫ g ≔ state ↦ (g(value, state′) where (value, state′) ≔ f(state))
getState ≔ state ↦ (state, state)
setState(newState) ≔ state ↦ ((), newState)
mapState(f, xs) ≔ state ↦ xs.cascadeMap(f, state)

#*
