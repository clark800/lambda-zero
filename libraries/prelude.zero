// naming conventions
// x, y, z unspecified type
// f, g, h function type
// n, m, k integer type
// b, c    boolean type
// p, q    boolean-valued function
// m*      maybe of *
// *s      list of *
// **      pair of * and *

// boolean logic
true(t, f) := t
false(t, f) := f
if(b) := b
(?) := if
[] := _ -> true
x :: xs := (x, xs)                     // prepend element to list (cons)

// universal
x.f := f(x)                     // uniform function call syntax
f || x := f(x)                  // low precedence application
f <> g := x -> f(g(x))          // function composition
`f(x, y) := f(y, x)             // flip order of first two arguments of function
id(x) := x                      // identity function
constant(x) := _ -> x           // return value does not depend on parameter
on(f, g) := x -> y -> f(g(x), g(y)) // apply binary f with unary g applied first
mirror(f)(x) := f(x, x)         // convert binary function to unary function
undefined := error("undefined")

!b := b ? false || true
b /\ c := b ? c || false
b \/ c := b ? true || c
b => c := b ? c || true
b <=> c := b ? c || !c

// pairs
(,)(x, y) := (x, y)     // this definition is for (,) and sections
first((x, y)) := x
second((x, y)) := y
swap((x, y)) := (y, x)

// function methods
f^^(n)(z) := n < 0 ? error("(^^): negative") || n = 0 ? z || f^^(n - 1)(f(z))
until(f, p, z) := p(z) ? z || f.until(p, f(z))
while(f, p, z) := f.until((!) <> p, z)
curry(f) := x -> y -> f((x, y))
uncurry(f) := xx -> f(first(xx), second(xx))

// more pairs
mapFirst(xy, f) := (f(first(xy)), second(xy))
mapSecond(xy, f) := (first(xy), f(second(xy)))
mapPair(xx, f) := (,).on(f).uncurry(xx)

// maybe
nothing := z -> f -> z
just(x) := z -> f -> f(x)
maybe(mx, f, x) := mx(x, f)
isNothing(mx) := mx.maybe(constant(false), true)
isJust(mx) := mx.maybe(constant(true), false)
fromJust(mx) := mx.maybe(id, error("fromJust: not a just"))
mx >>= f := mx.maybe(f, nothing)         // maybe chaining (bind)
mx ?|| x := mx.maybe(id, x)              // just value or default

// math
abs(n) := n >= 0 ? n || -n
sign(n) := n = 0 ? 0 || n > 0 ? 1 || -1
min(n, m) := n <= m ? n || m
max(n, m) := n >= m ? n || m
mod(n, m) := n % m
even(n) := n.mod(2) = 0
odd(n) := n.mod(2) != 0
divides(n, m) := m.mod(n) = 0
factorial(n) := (n = 0) ? 1 || n * factorial(n - 1)
gcd(n, m) := (m = 0) ? n || gcd(m, n.mod(m))
n ^ m := (
    m = 0 ? 1
    m < 0 ? 1 / n ^ -m
    even(m) ? (*).mirror(n ^ (m / 2))
    n * n ^ (m - 1)
)

// list basics
prepend := `(::)
isEmpty(xs) := xs(_ -> _ -> false)
head(xs) := isEmpty(xs) ? error("head: empty list") || first(xs)
--xs := isEmpty(xs) ? error("dropHead: empty list") || second(xs)
drop(xs, n) := (--)^^(n)(xs)            // drop n elements from front of list
take(xs, n) := n = 0 ? [] || xs.head :: (--xs).take(n - 1)
xs[n] := head(xs.drop(n))          // get element of list at index
slice(xs, start, end) := xs.drop(start).take(end - start)
xs =*= ys := xs.isEmpty \/ ys.isEmpty ? xs.isEmpty <=> ys.isEmpty ||
    xs[0] = ys[0] /\ --xs =*= --ys       // integer list equality
last(xs) := (--).until(isEmpty <> (--), xs)[0] // get last element of list
dropLast(xs) := isEmpty(xs) \/ isEmpty(--xs) ? [] || xs[0] :: dropLast(--xs)
dropWhile(ns, p) := (--).while(p <> head, ns)
takeWhile(ns, p) := ns.isEmpty \/ !p(ns[0]) ? [] || ns[0] :: takeWhile(--ns, p)

takeSafe(xs, n) := (
    n = 0 ? just([])
    xs.isEmpty ? nothing
    takeSafe(--xs, n - 1) >>= just <> (xs[0] ::)
)
dropSafe(xs, n) := n = 0 \/ isEmpty(xs) ? xs || dropSafe(--xs, n - 1)

// newBranch : a -> List(Tree(a)) -> Tree(a)
newNode(data, children) := (data, children)
// getData : Tree(a) -> a
getData := first
// getChildren : Tree(a) -> List(Tree(a))
getChildren := second

// list folds
fold(xs, f, z) := if(isEmpty(xs), z, f(head(xs), fold(--xs, f, z)))
cascade(xs, f, z) := if(isEmpty(xs), z, cascade(--xs, f, f(z, head(xs))))
reduce(xs, f) := (--xs).cascade(f, xs[0])

// list fold operations
xs ++ ys := xs.fold((::), ys)                   // concatenate two lists
length(xs) := xs.fold(constant((+ 1)), 0)         // get length of list

// generic list constructors
iterate(f, x) := x :: iterate(f, f(x))       // iteratively apply f
repeat(x) := x :: repeat(x)                  // infinitely repeat one element
replicate(x, n) := (x ::)^^(n)([])         // replicate one element n times
cycle(xs) := xs ++ cycle(xs)                 // infinitely cycle list

// generic list transformations
filter(xs, p) := fold(xs, x -> xs' -> if(p(x), x :: xs', xs'), [])
(|) := filter
map(xs, f) := fold(xs, (::) <> f, [])          // map function over list
zipWith(xs, f, ys) := isEmpty(xs) \/ isEmpty(ys) ? [] ||
    f(xs[0], ys[0]) :: zipWith(--xs, f, --ys)
zip(xs, ys) := zipWith(xs, (,), ys)
unzip(xs) := (xs.map(first), xs.map(second))
join(xss) := xss.fold((++), [])            // concatenate list of lists
reverse(xs) := xs.cascade(`(::), [])
interleave(xs, y) := (
    isEmpty(xs) ? []
    isEmpty(--xs) ? xs || head(xs) :: y :: interleave(--xs, y)
)
joinWith(xss, ys) := join(interleave(xss, ys))
bisect(xs, p) := (xs | p, xs | (!) <> p)

// generic list reducers
any(xs, p) := xs.map(p).fold((\/), false)     // test if any element satisfies p
all(xs, p) := xs.map(p).fold((/\), true)      // test if all elements satisfy p
// find first element satisfying p, or return nothing
find(xs, p) := isEmpty(xs) ? nothing || p(xs[0]) ? just(xs[0]) || (--xs).find(p)

// foldMap : a[] --> (a --> s --> (b; s)) --> s --> (b[], s)
foldMap(xs, f, z) := xs.cascade((ys, s) -> x ->
    f(x, s).mapFirst((:: ys)), ([], z)).mapFirst(reverse)

indexOf(nss, key) := (
    indexOf'(list, depth) := (
        isEmpty(list) ? nothing
        list[0] =*= key ? just(depth)
        indexOf'(--list, depth + 1)
    )
    indexOf'(nss, 0)
)
contains(nss, key) := isJust(nss.indexOf(key))

// integer list basics
ns <*= ms := ns.isEmpty \/ !ms.isEmpty /\
    (head(ns) < head(ms) \/ head(ns) = head(ms) /\ --ns <*= --ms)

// integer list constructors
n .. m := n > m ? [] || n :: (n + 1 .. m)

// integer list transformations
sort(ns) := (
    isEmpty(ns) ? []
    n := head(ns)
    sort(--ns | (<= n)) ++ [n] ++ sort(--ns | (> n))
)
deduplicate(ns) := (
    isEmpty(ns) ? []
    head(ns) :: deduplicate(--ns | (!= head(ns)))
)
deduplicateBy(xs, (=?=)) := (
    isEmpty(xs) ? []
    head(xs) :: deduplicateBy(--xs | (!) <> (=?= head(xs)), (=?=))
)
ns ** ms := join(ns.map(n -> ms.map(m -> (n, m))))

startsWith(ns, ks) := ks.isEmpty ? true ||
    ns.isEmpty \/ ns[0] != ks[0] ? false || startsWith(--ns, --ks)

split(ns, p) := (
    ns.isEmpty ? ([], [])
    p(ns) ? ([], ns)
    (before, after) := (--ns).split(p)
    (ns[0] :: before, after)
)

splitAt(xs, n) := (xs.take(n), xs.drop(n))
splitWhen(ns, p) := ns.split(p <> head)
splitOn(ns, delimiter) := ns.split(`startsWith(delimiter))

splitWith(ns, splitter) := (
    (before, after) := splitter(ns)
    before.isEmpty ? ([], ns)
    (before', after') := after.splitWith(splitter)
    (before ++ before', after')
)

partition(ns, splitter) := (
    ns.isEmpty ? []
    (before, after) := splitter(ns)
    before :: partition(after, splitter)
)

dropIf(ns, p) := isEmpty(ns) ? [] || p(ns[0]) ? --ns || ns
dropPrefix(ns, prefix) := ns.startsWith(prefix) ? ns.drop(length(prefix)) || ns

partitionBy(ns, p) := ns.partition(`splitWhen(p) <> `dropIf(p))
partitionOn(ns, delimiter) := ns.partition(
    `splitOn(delimiter) <> `dropPrefix(delimiter))

words(ns) := ns.partitionOn(" ") | (!) <> isEmpty
lines(ns) := ns.partitionOn("\n")

repl(in, prompt, f) := prompt ++ in.lines.map(f).joinWith("\n" ++ prompt)

// integer list reducers
sum(ns) := ns.cascade((+), 0)
product(ns) := ns.cascade((*), 1)
minimum(ns) := ns.reduce(min)
maximum(ns) := ns.reduce(max)

// infinite lists
countFrom := iterate((+ 1))
naturals := countFrom(0)
primes := (
    filterPrime(ns) := head(ns) :: filterPrime(--ns | n' -> n' % head(ns) != 0)
    filterPrime(countFrom(2))
)

// ASCII character classes
isUppercase(n) := n >= 'A' /\ n <= 'Z'
isLowercase(n) := n >= 'a' /\ n <= 'z'
isDigit(n) := n >= '0' /\ n <= '9'
isQuote(n) := n = '"' \/ n = '\''
isWhitespace(n) := n = ' ' \/ n >= '\t' /\ n <= '\r'
isBlank(n) := n = ' ' \/ n = '\t'
isControl(n) := n >= 0 /\ n < 32 \/ n = 127
isAlphabetic(n) := isUppercase(n) \/ isLowercase(n)
isAlphanumeric(n) := isAlphabetic(n) \/ isDigit(n)
isPrintable(n) := n < 127 /\ !isControl(n)
isGraphical(n) := isPrintable(n) /\ !isBlank(n)
isPunctuation(n) := isGraphical(n) /\ !isAlphanumeric(n)

// serialization
showBoolean(b) := b ? "true" || "false"
showNatural(n) := (
    showReversedNatural(m) := m = 0 ? [] ||
        ('0' + m.mod(10)) :: showReversedNatural(m / 10)
    n = 0 ? "0" || reverse(showReversedNatural(n))
)

showString(ns) := "\"" ++ ns ++ "\""     // todo: escape
showPair(xsxs) := "(" ++ xsxs.first ++ ", " ++ xsxs.second ++ ")"
showList(xs) := "[" ++ xs.joinWith(", ") ++ "]"
showInteger(n) := (n < 0 ? "-" || "") ++ showNatural(abs(n))

showStringPair(nsns) := showPair(nsns.mapPair(showString))
showIntegerPair(nn) := showPair(nn.mapPair(showInteger))
showStringIntegerPair(nsn) := showPair(
    (showString(nsn.first), showInteger(nsn.second)))

showStringList(nss) := showList(nss.map(showString))
showIntegerList(ns) := showList(ns.map(showInteger))
showIntegerPairList(nns) := showList(nns.map(showIntegerPair))
showIntegerListPair(nsns) := showPair(nsns.mapPair(showIntegerList))
showIntegerListList(nss) := showList(nss.map(showIntegerList))
showStringIntegerPairList(nsns) := showList(nsns.map(showStringIntegerPair))

// parsing
parseDigit(digit, base) :=
    isDigit(digit) /\ digit - '0' < base ? digit - '0' ||
    error("Invalid digit in base " ++ showInteger(base) ++ ": " ++ [digit])
parseNatural(string, base) :=
    string.cascade(x -> d -> base * x + parseDigit(d, base), 0)
parseInteger(string, base) := string.head = '-' ?
    -parseNatural(--string, base) || parseNatural(string, base)
