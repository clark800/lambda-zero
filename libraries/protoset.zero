#* protoset.zero
# todo: store size in data structure for constant time cardinality
# totally preordered set (total proset)

newProtoset((~<), elements) := ((~<), elements)

getElements := second
cardinality := length <> getElements

elicit(protoset, object) := (
    ((~<), elements) := protoset
    if elements.isNil
        Left()
    element := elements[0]
    if object ~< element /\ element ~< object
        Right(element)
    ((~<), tail(elements)).elicit(object)
)

object : protoset := isRight(protoset.elicit(object))
object /: protoset := not object : protoset

mapElements(protoset, f) := (
    ((~<), elements) := protoset
    ((~<), elements.map(f))
)

filterElements(protoset, p) := (
    ((~<), elements) := protoset
    ((~<), elements |: p)
)

add(protoset, object) := (
    if object : protoset
        protoset
    ((~<), elements) := protoset
    ((~<), object :: elements)
)

remove(protoset, object) := (
    ((~<), elements) := protoset
    a ~ b := a ~< b /\ b ~< a
    protoset.filterElements((not) <> (~ object))
)

protoset U protoset' := (
    (order', elements') := protoset'
    if elements'.isNil
        protoset
    if elements'[0] : protoset
        protoset U (order', tail(elements'))
    (order, elements) := protoset
    (order, elements'[0] :: elements) U (order', tail(elements'))
)

protoset \ protoset' := protoset.filterElements(/: protoset')

#*
