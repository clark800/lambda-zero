#* protoset.zero

KVP(k, v) ::= {KeyValuePair(getKey : k, getValue : v)}

ProtosetType(k, v) ::= {
    Protoset(_hash : (v => k), _compare : (k => k => 𝔹),
        _data : BinaryTree(AADatumType(KVP(k, v))))
}

makeKVP(hash, object) := KeyValuePair(hash(object), object)

newProtoset(hash, (~<), elements) := Protoset(hash, (~<), data) where
    data := extendAA((~<).on(getKey), elements.map(makeKVP(hash)), Leaf)

Protoset(_, _, data).getElements := flattenAA(data).map(getValue)

Protoset(_, _, data).cardinality := length(flattenAA(data))

Protoset(hash, (~<), data).elicit(object) :=
    searchAA((~<).on(getKey), makeKVP(hash, object), data).mapJust(getValue)

object in protoset := not isVoid(protoset.elicit(object))

Protoset(hash, (~<), data).add(object) :=
    Protoset(hash, (~<), insertAA((~<).on(getKey), makeKVP(hash, object), data))

Protoset(hash, (~<), data) U Protoset(_, _, data') :=
    Protoset(hash, (~<), mergeAA((~<).on(getKey), data, data'))

#*
