#* ralist.zero

def list.pushRAL(x)
    match list
        case [] -> [(1, Leaf(x))]
        case (size, tree) :: rest
            match rest
                case [] -> (1, Leaf(x)) :: list
                case (size', tree') :: rest'
                    if size = size'
                        (size + size' + 1, Branch(x, tree, tree')) :: rest'
                    (1, Leaf(x)) :: list


def list.pullRAL
    match list
        case [] -> []
        case (size, tree) :: rest
            match tree
                case Leaf(_) -> rest
                case Branch(_, left, right)
                    size' := size // 2
                    (size', left) :: (size', right) :: rest


def list.peekRAL
    match list
        case [] -> Void
        case (size, tree) :: _
            match tree
                Leaf(x) -> Just(x)
                Branch(x, _, _) -> Just(x)


def seekTree(n, size, tree)
    match tree
        case Leaf(x)
            if n = 0 then Just(x) else Void
        case Branch(x, left, right)
            if n = 0
                Just(x)
            size' := size // 2
            if n <= size'
                seekTree(n -- 1, size', left)
            seekTree(n -- size' -- 1, size', right)


def list.getRAL(n)
    match list
        case [] -> Void
        case (size, tree) :: rest
            if n < size then seekTree(n, size, tree) else rest.getRAL(n -- size)


def updateTree(n, x, size, tree)
    match tree
        case Leaf(_)
            if n = 0 then Leaf(x) else tree
        case Branch(x', left, right)
            if n = 0
                Branch(x, left, right)
            size' := size // 2
            if n <= size'
                Branch(x', updateTree(n -- 1, x, size', left), right)
            Branch(x', left, updateTree(n -- size' -- 1, x, size', right))


def list.setRAL(n, x)
    match list
        case [] -> []
        case (size, tree) :: rest
            if n < size
                (size, updateTree(n, x, size, tree)) :: rest
            (size, tree) :: rest.setRAL(n -- size, x)


def flattenPreorderTree(tree)
    match tree
        case Leaf(x) -> [x]
        case Branch(x, left, right)
            x :: flattenPreorderTree(left) ++ flattenPreorderTree(right)


def list.toListRAL
    match list
        case [] -> []
        case (_, tree) :: rest
            flattenPreorderTree(tree) ++ toListRAL(rest)


def list.showRAL(showValue)
    list.map(second).map(showFullBinaryTree(showValue)).joinWith("\n")


def newRandomAccessList(elements)
    elements.fold(pushRAL, [])

#*
