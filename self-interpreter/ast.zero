#* ast.zero

DefinitionType ::= {PlainDefinition, MaybeDefinition, TryDefinition,
    SyntaxDefinition, ADTDefinition}
ArrowType ::= {Simple, Strict, Locked, Double, Squiggle}
SectionSide ::= {LeftSection, RightSection, LeftRightSection}

StateT(ast, syntax) ::= {State(
    getStack : List(ast),
    getOperators : List(TableT(List(ℕ), syntax))
)}

SyntaxT(ast) ::= {Syntax(
    getAlias : List(ℕ),
    getLeftPrecedence : ℕ,
    getRightPrecedence : ℕ,
    getFixity : ℕ,
    getAssociativity : ℕ,
    getSpecial : 𝔹,
    getShift : (StateT(ast, SyntaxT(ast)) => ast => StateT(ast, SyntaxT(ast))),
    getReduce : (ast => ast => ast => ast),
    getPrior : List(ℕ)
)}

AST ::= {
    Reference(_ : TagT, _debruijn : ℕ),
    Arrow(_ : TagT, _type : ArrowType, _constructors : List(AST),
        _parameter : AST, _body : AST),
    Juxtaposition(_ : TagT, _left : AST, _right : AST),
    Let(_ : TagT, _isTypeConstructor ∈ 𝔹,
        _name : AST, _value : AST, _scope : AST),
    Number(_ : TagT, _value : ℕ),
    Operator(_ : TagT, _rank : ℕ, _syntax : SyntaxT(AST)),
    Definition(_ : TagT, _type : DefinitionType,
        _definiendum : AST, _definiens : AST),
    AsPattern(_ : TagT, _left : AST, _pattern : AST),
    CommaPair(_ : TagT, _left : AST, _right : AST),
    Section(_ :  TagT, _side : SectionSide, _body : AST),
    SetBuilder(_ : TagT, _forms : List(AST)),
    Constructor(_ : TagT, _parameterTypes : List(AST), _dataType : AST,
        _function : AST, _count : ℕ, _index : ℕ),
    TypedNode(_ : TagT, _type : AST, _node : AST),
    Null(_ : TagT)
}

define lockArrow(node)
    with node as Arrow(tag, arrowType, constructors, left, right)
        with arrowType as Simple
            Arrow(tag, Locked, constructors, left, right)
        with arrowType as Strict
            Arrow(tag, Locked, constructors, left, right)
        node
    node

define getTag
    Reference(tag, _) -> tag
    Arrow(tag, _, _, _, _) -> tag
    Juxtaposition(tag, _, _) -> tag
    Let(tag, _, _, _, _) -> tag
    Number(tag, _) -> tag
    Operator(tag, _, _) -> tag
    Definition(tag, _, _, _) -> tag
    AsPattern(tag, _, _) -> tag
    CommaPair(tag, _, _) -> tag
    Section(tag, _, _) -> tag
    SetBuilder(tag, _) -> tag
    Constructor(tag, _, _, _, _, _) -> tag
    TypedNode(tag, _, _) -> tag
    Null(tag) -> tag

define containsName(name)
    Reference(tag, _) -> getTagLexeme(tag) =*= getTagLexeme(getTag(name))
    Arrow(_, _, _, _, body) -> containsName(name, body)
    Juxtaposition(_, left, right) ->
        containsName(name, left) or containsName(name, right)
    Let(_, _, _, value, scope) ->
        containsName(name, value) or containsName(name, scope)
    Number(_, _) -> False
    Operator(_, _, _) -> False
    Definition(_, _, _, _) -> False
    AsPattern(_, _, _) -> False
    CommaPair(_, _, _) -> False
    Section(_, _, _) -> False
    SetBuilder(_, _) -> False
    Constructor(_, _, _, _, _, _) -> False
    TypedNode(_, _, _) -> False
    Null(_) -> False


define showArrow
    Simple -> " -> "
    Strict -> " -> "
    Locked -> " -> "
    Double -> " => "
    Squiggle -> " ~> "


define showAST
    Reference(tag, _) -> showTag(tag)
    Arrow(tag, arrowType, _, parameter, body) ->
        "(" ++ showAST(parameter) ++
            showArrow(arrowType) ++ showAST(body) ++ ")"
    Juxtaposition(tag, left, right) ->
        "(" ++ showAST(left) ++ " " ++ showAST(right) ++ ")"
    Let(tag, _, name, value, scope) ->
        "(" ++ showAST(name) ++ " := " ++ showAST(value) ++
            ";;" ++ showAST(scope) ++ ")"
    Number(tag, value) -> showNatural(value)
    Operator(tag, rank, rules) -> showTag(tag)
    Definition(tag, _, left, right) ->
        "(" ++ showAST(left) ++ " := " ++ showAST(right) ++ ")"
    AsPattern(tag, name, pattern) ->
        "(" ++ showAST(name) ++ ")@(" ++ showAST(pattern) ++ ")"
    CommaPair(tag, left, right) ->
        "(" ++ showAST(left) ++ ", " ++ showAST(right) ++ ")"
    Section(_, _, body) -> showAST(body)
    SetBuilder(_, forms) -> "{" ++ forms.map(showAST).joinWith(", ") ++ "}"
    Constructor(_, _, _, body, _, _) -> showAST(body)
    TypedNode(_, _, node) -> showAST(node)
    Null(_) -> "#NULL#"

isReference := Reference(_, _) -> True; _ -> False
isArrow := Arrow(_, _, _, _, _) -> True; _ -> False
isJuxtaposition := Juxtaposition(_, _, _) -> True; _ -> False
isLet := Let(_, _, _, _, _) -> True; _ -> False
isNumber := Number(_, _) -> True; _ -> False
isOperator := Operator(_, _, _) -> True; _ -> False
isDefinition := Definition(_, _, _, _) -> True; _ -> False
isAsPattern := AsPattern(_, _, _) -> True; _ -> False
isCommaPair := CommaPair(_, _, _) -> True; _ -> False
isSection := Section(_, _, _) -> True; _ -> False
isSetBuilder := SetBuilder(_, _) -> True; _ -> False
isConstructor := Constructor(_, _, _, _, _, _) -> True; _ -> False
isTypedNode := TypedNode(_, _, _) -> True; _ -> False
isNull := Null(_) -> True; _ -> False

isCase(node) := with node as Arrow(_, type, _, _, _);
    (type |> Locked -> False; _ -> True) <| False

Name(tag) := Reference(tag, 0)
isName(node) := with node as Reference(_, debruijn); debruijn = 0 <| False
SimpleArrow(parameter, body) :=
    Arrow(getTag(parameter), Simple, [], parameter, body)
StrictArrow(tag, constructors, body) :=
    Arrow(tag, Strict, constructors, Name(veil(tag)), body)
LockedArrow(parameter, body) :=
    Arrow(getTag(parameter), Locked, [], parameter, body)
DoubleArrow(left, right) :=
    Arrow(getTag(left), Double, [], left, right)
ImplicitArrow(parameter, body) :=
    Arrow(getTag(parameter), Squiggle, [], parameter, body)

isSyntaxDefinition(node) := with node as Definition(_, type, _, _);
    (with type as SyntaxDefinition; True <| False) <| False
getLexeme(node) := getTagLexeme(getTag(node))
showLexeme(node) := showTag(getTag(node))
isThisName(node, lexeme) := isName(node) and getLexeme(node) =*= lexeme
isThisOperator(node, lexeme) := isOperator(node) and getLexeme(node) =*= lexeme
isEOF(node) := isThisOperator(node, "\0")
isUnderscore(tag) := getTagLexeme(tag) =*= "_"
isUnused(tag) := getTagLexeme(tag).startsWith("_")
UnderscoreArrow(tag, body) := LockedArrow(Name(veil(tag)), body)
Underscore(tag, debruijn) := Reference(veil(tag), debruijn)
newNil(tag) := Name(renameTag(tag, "[]", NOFIX))
prependList(tag, item, list) := Juxtaposition(tag,
    Juxtaposition(tag, Name(renameTag(tag, "::", INFIX)), item), list)
newLeftPlaceholder(tag) :=
    Section(tag, RightSection, Name(renameTag(tag, ".*", NOFIX)))
newRightPlaceholder(tag) :=
    Section(tag, LeftSection, Name(renameTag(tag, "*.", NOFIX)))
isLeftPlaceholder(node) := with node as Section(_, _, body);
    isThisName(body, ".*") <| False
wrapLeftSection(tag, body) :=
    LockedArrow(Name(renameTag(tag, "*.", NOFIX)), body)
wrapRightSection(tag, body) :=
    LockedArrow(Name(renameTag(tag, ".*", NOFIX)), body)

define wrapSection(tag, section)
    with section as Section(_, side, body)
        match side
            case LeftSection
                wrapLeftSection(tag, body)
            case RightSection
                with body as Juxtaposition(_, left, _)
                    if isName(left)
                        left       # parenthesized postfix operator
                    wrapRightSection(tag, body)
                wrapRightSection(tag, body)
            case LeftRightSection
                wrapLeftSection(tag, wrapRightSection(tag, body))
    section

#*
