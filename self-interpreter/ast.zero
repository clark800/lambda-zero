#* ast.zero

AST ::= {
    Name(_ : Tag),
    Arrow(_ : Tag, getArrowLeft : AST, getArrowRight : AST),
    Juxtaposition(_ : Tag, getLeft : AST, getRight : AST),
    Number(_ : Tag, getNumericValue : Natural),
    Reference(_ : Tag, _ : Natural),
    Operator(_ : Tag, getRank : Natural, getOperatorSyntax : _),
    Definition(_ : tag, getDefinee : AST, getDefinedValue : AST)
}

define getTag
    case Name(tag) -> tag
    case Arrow(tag, _, _) -> tag
    case Juxtaposition(tag, _, _) -> tag
    case Number(tag, _) -> tag
    case Reference(tag, _) -> tag
    case Operator(tag, _, _) -> tag
    case Definition(tag, _, _) -> tag

define getASTIndex
    case Name(_) -> 0
    case Arrow(_, _, _) -> 1
    case Juxtaposition(_, _, _) -> 2
    case Number(_, _) -> 3
    case Reference(_, _) -> 4
    case Operator(_, _, _) -> 5
    case Definition(_, _, _) -> 6

isName(node) := getASTIndex(node) = 0
isArrow(node) := getASTIndex(node) = 1
isJuxtaposition(node) := getASTIndex(node) = 2
isNumber(node) := getASTIndex(node) = 3
isReference(node) := getASTIndex(node) = 4
isOperator(node) := getASTIndex(node) = 5
isDefinition(node) := getASTIndex(node) = 6

getLexeme(node) := getTagLexeme(getTag(node))

NULL := Name(Tag("\0\0", Location("", 0, 0)))
isThisLexeme(node, lexeme) := getLexeme(node) =*= lexeme
isThisName(node, lexeme) := isName(node) and isThisLexeme(node, lexeme)
isThisOperator(node, lexeme) := isOperator(node) and isThisLexeme(node, lexeme)
isNull(node) := isThisName(node, "\0\0")
isEOF(node) := isThisOperator(node, "\0")
isUnused(tag) := head(getTagLexeme(tag)) = '_'

define isSection(node)
    isThisLexeme(node, ".*.") or
        isThisLexeme(node, ".*") or isThisLexeme(node, "*.")

define newUnderscore(tag, debruijn)
    Reference(Tag("_", getTagLocation(tag)), debruijn)

define newNil(tag)
    Name(Tag("[]", getTagLocation(tag)))

define prependList(tag, item, list)
    name := Name(Tag("::", getTagLocation(tag)))
    Juxtaposition(tag, Juxtaposition(tag, name, item), list)

define isValidPattern(node)
    isName(node) or (isJuxtaposition(node) and
        isValidPattern(getLeft(node)) and isValidPattern(getRight(node)))

define renameTag(tag, lexeme)
    Tag(lexeme, getTagLocation(tag))

define renameNode(node, lexeme)
    Name(renameTag(getTag(node), lexeme))

define showLexeme(node)
    showTag(getTag(node))

define showAST
    case Name(tag) -> showTag(tag)
    case Arrow(tag, parameter, body) ->
        "(" ++ showTag(getTag(parameter)) ++ " -> " ++ showAST(body) ++ ")"
    case Juxtaposition(tag, left, right) ->
        "(" ++ showAST(left) ++ " " ++ showAST(right) ++ ")"
    case Number(tag, value) -> showNatural(value)
    case Reference(tag, debruijn) -> showTag(tag)
    case Operator(tag, rank, rules) -> showTag(tag)
    case Definition(tag, left, right) ->
        "(" ++ showAST(left) ++ " := " ++ showAST(right) ++ ")"

#*
