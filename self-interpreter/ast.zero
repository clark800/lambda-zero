cNAME := -1
cOPERATOR := -2
cLAMBDA := -3
cAPPLICATION := -4
cINTEGER := -5
cBUILTIN := -6

newName(tag) := newNode((tag, cNAME), [])
newOperator(tag) := newNode((tag, cOPERATOR), [])
newReference(tag, debruijn) := newNode((tag, debruijn), [])
newLambda(tag, parameter, body) := newNode((tag, cLAMBDA), [parameter, body])
newApplication(tag, left, right) := newNode((tag, cAPPLICATION), [left, right])
newBuiltin(tag) := newNode((tag, cBUILTIN), [])
newInteger(tag, value) := newNode((tag, cINTEGER), [newNode((tag, value), [])])

getTag(node) := first(getData(node))
getType(node) := second(getData(node))
getDebruijnIndex(node) := getType(node)
getLeft(node) := getChildren(node)[0]
getRight(node) := getChildren(node)[1]
getParameter(node) := getLeft(node)
getBody(node) := getRight(node)
getInteger(node) := getType(getLeft(node))

isReference(node) := getType(node) >= 0
isName(node) := getType(node) = cNAME
isOperator(node) := getType(node) = cOPERATOR
isLambda(node) := getType(node) = cLAMBDA
isApplication(node) := getType(node) = cAPPLICATION
isInteger(node) := getType(node) = cINTEGER
isBuiltin(node) := getType(node) = cBUILTIN
isSymbol(node) := isName(node) \/ isOperator(node)

newClosure(term, environment) := newNode(term, environment)
getTerm := getData
getEnvironment := getChildren
