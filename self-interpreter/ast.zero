--* ast.zero

NodeType ::= {SYMBOL, LAMBDA, APPLICATION, DEFINITION, NATURAL, BUILTIN}
ASTDataType ::= {ASTData(_ : Tag, _ : NodeType, _ : Maybe(_), _ : Integer)}

newLeaf(tag, nodeType, maybeData, value) :=
    Node(ASTData(tag, nodeType, maybeData, value), [])
newBranch(tag, nodeType, children) :=
    Node(ASTData(tag, nodeType, nothing, 0), children)

isLeaf(node) := isNil(getChildren(node))

newSymbol(tag, value, maybeData) := newLeaf(tag, SYMBOL, maybeData, value)
newOperator(tag, value, syntax') := newSymbol(tag, value, just(syntax'))
newReference(tag, debruijn) := newSymbol(tag, debruijn, nothing)
newName(tag) := newReference(tag, 0)
newLambda(tag, parameter, body) := newBranch(tag, LAMBDA, [parameter, body])
newApplication(tag, left, right) := newBranch(tag, APPLICATION, [left, right])
newDefinition(tag, left, right) := newBranch(tag, DEFINITION, [left, right])
newNatural(tag, value) := newLeaf(tag, NATURAL, nothing, value)
newBuiltin(tag) := newLeaf(tag, BUILTIN, nothing, 0)

getTag(Node(ASTData(tag, _, _, _), _)) := tag
getNodeType(Node(ASTData(_, nodeType, _, _), _)) := nodeType
getMaybeData(Node(ASTData(_, _, maybeData, _), _)) := maybeData
getValue(Node(ASTData(_, _, _, value), _)) := value

getDebruijnIndex(node) := getValue(node)
getLeft(node) := head(getChildren(node))
getRight(node) := head(tail(getChildren(node)))
getParameter(node) := getLeft(node)
getBody(node) := getRight(node)

getNodeTypeCode(nodeType) := nodeType.match(
    SYMBOL -> 0;
    LAMBDA -> 1;
    APPLICATION -> 2;
    DEFINITION -> 3;
    NATURAL -> 4;
    BUILTIN -> 5;
)

isNodeType(node, nodeType) :=
    getNodeTypeCode(getNodeType(node)) = getNodeTypeCode(nodeType)
isSymbol(node) := isNodeType(node, SYMBOL)
isLambda(node) := isNodeType(node, LAMBDA)
isApplication(node) := isNodeType(node, APPLICATION)
isDefinition(node) := isNodeType(node, DEFINITION)
isNatural(node) := isNodeType(node, NATURAL)
isBuiltin(node) := isNodeType(node, BUILTIN)

Closure(term, environment) := Node(term, environment)
getTerm := getData
getEnvironment := getChildren

getLexeme(node) := getTagLexeme(getTag(node))
getLocation(node) := getTagLocation(getTag(node))
getLine(node) := getLocationLine(getLocation(node))
getColumn(node) := getLocationColumn(getLocation(node))

NULL := newName(Tag("\0\0", Location("", 0, 0)))
isThisLexeme(node, lexeme) := getLexeme(node) =*= lexeme
isThisSymbol(node, lexeme) := isSymbol(node) and isThisLexeme(node, lexeme)
isNull(node) := isThisSymbol(node, "\0\0")
isEOF(node) := isThisSymbol(node, "\0")
isUnderscore(node) := isThisSymbol(node, "_")
isUnused(node) := isSymbol(node) and head(getLexeme(node)) = '_'

isIdentity(node) := isLambda(node) and isSymbol(getBody(node)) and
    getLexeme(getParameter(node)) =*= getLexeme(getBody(node))

define isSection(node)
    isThisLexeme(node, ".*.") or
        isThisLexeme(node, ".*") or isThisLexeme(node, "*.")

define newUnderscore(tag, debruijn)
    newReference(Tag("_", getTagLocation(tag)), debruijn)

define newYCombinator(tag)
    x := newUnderscore(tag, 1)
    y := newUnderscore(tag, 2)
    yxx := newApplication(tag, y, newApplication(tag, x, x))
    xyxx := newLambda(tag, newUnderscore(tag, 0), yxx)
    newLambda(tag, newUnderscore(tag, 0), newApplication(tag, xyxx, xyxx))

define newBoolean(tag, b)
    newLambda(tag, newUnderscore(tag, 0), newLambda(tag, newUnderscore(tag, 0),
        newUnderscore(tag, b ? 1 || 2)))

define newNil(tag)
    newName(Tag("[]", getTagLocation(tag)))

define prependList(tag, item, list)
    name := newName(Tag("::", getTagLocation(tag)))
    newApplication(tag, newApplication(tag, name, item), list)

define isValidPattern(node)
    isSymbol(node) or (isApplication(node) and
        isValidPattern(getLeft(node)) and isValidPattern(getRight(node)))

define setTag(Node(ASTData(tag, nodeType, maybeData, value), children), tag')
    Node(ASTData(tag', nodeType, maybeData, value), children)

define renameTag(tag, lexeme)
    Tag(lexeme, getTagLocation(tag))

define renameNode(node, lexeme)
    newName(renameTag(getTag(node), lexeme))

define convertOperator(tag)
    builtins := ["+", "-", "*", "//", "%", "=", "=/=", "<", ">",
        "<=", ">=", "up", "error"]
    if isJust(builtins.find(=*= getTagLexeme(tag)))
        newBuiltin(tag)
    newName(tag)

--*
