#* bind.zero

define isDefined(parameter, parameterNames)
    isNatural(parameter) or (not isUnderscore(parameter) and
        parameterNames.contains(getLexeme(parameter)))

define bind(root)
    define bind'(node, parameterNames)
        match getNodeType(node)
            case SYMBOL
                if getDebruijnIndex(node) =/= 0
                    node
                if isUnused(node)
                    syntaxError(
                        "cannot reference a symbol starting with underscore",
                        node)
                tag := getTag(node)
                lexeme := getLexeme(node)
                newReference(getTag(node), 1 + (
                    try parameterNames.indexOf(lexeme) recover with
                        syntaxError("undefined symbol", node)))
            case LAMBDA
                parameter := getParameter(node)
                if isDefined(parameter, parameterNames)
                    syntaxError("symbol already defined", parameter)
                parameterName := getLexeme(parameter)
                newBody := bind'(getBody(node), parameterName :: parameterNames)
                newLambda(getTag(node), parameter, newBody)
            case APPLICATION
                newFunction := bind'(getLeft(node), parameterNames)
                newArgument := bind'(getRight(node), parameterNames)
                newApplication(getTag(node), newFunction, newArgument)
            case DEFINITION
                syntaxError("missing scope for definition", node)
            case NATURAL
                node
            case BUILTIN
                node
    bind'(root, [])

#*
