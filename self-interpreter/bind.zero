bind(root) := (
    isDefined(parameter, parameterNames) := (
        parameterName := getLexeme(parameter)
        !isInternal(parameter) /\ !(parameterName =*= "_") /\
            parameterNames.contains(parameterName) \/
            isJust(getBuiltin(parameter))
    )

    bind'(node, parameterNames) := (
        node.isLambda ? (
            parameter := getParameter(node)
            !isTuple(node) /\ isDefined(parameter, parameterNames) ?
                syntaxError("symbol already defined", parameter)
            parameterName := getLexeme(parameter)
            newBody := bind'(getBody(node), parameterName :: parameterNames)
            newLambda(getTag(node), parameter, newBody)
        )
        node.isApplication ? (
            newFunction := bind'(getLeft(node), parameterNames)
            newArgument := bind'(getRight(node), parameterNames)
            newApplication(getTag(node), newFunction, newArgument)
        )
        node.isSymbol ? (
            tag := getTag(node)
            lexeme := getLexeme(node)
            lexeme =*= "_" /\ !isInternal(node) ?
                syntaxError("cannot reference", node)
            getBuiltin(node) >>= (x -> just(newBuiltin(getTag(node)))) ?||
                newReference(getTag(node), parameterNames.indexOf(lexeme) ?||
                syntaxError("undefined symbol", node))
        )
        node
    )
    bind'(root, [])
)
