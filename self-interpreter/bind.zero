#* bind.zero

define findDebruijnIndex(parameterNames, tag)
    if isUnused(tag)
        parseError("cannot reference a symbol starting with underscore", tag)
    parameterNames.indexOf(getTagLexeme(tag)).mapRight(1 +) ?
        parseError("undefined symbol", tag)


define bindOperation(tag)
    try (arity, optimize) := getBuiltin(tag)
    return Operation(tag, arity, optimize)


define isDefined(parameter, parameterNames)
    isNumber(parameter) or bool(bindOperation(getTag(parameter))) or
        (not isThisName(parameter, "_") and
            parameterNames.contains(getLexeme(parameter)))


define bind(node, parameterNames)
    match node
        case Name(tag)
            bindOperation(tag) ?
                Variable(tag, parameterNames.findDebruijnIndex(tag))
        case Arrow(tag, parameter, body)
            if isDefined(parameter, parameterNames)
                syntaxError("symbol already defined", parameter)
            parameterName := getLexeme(parameter)
            Abstraction(getTag(parameter),
                bind(body, parameterName :: parameterNames))
        case Juxtaposition(tag, left, right)
            Application(tag, bind(left, parameterNames),
                             bind(right, parameterNames))
        case Number(tag, value)
            Numeral(renameTag(tag, "_"), value)
        case Reference(tag, debruijn)
            Variable(tag, debruijn)
        case Operator(_, _, _)
            syntaxError("internal error", node)
        case Defintion(_, _, _)
            syntaxError("missing scope for definition", node)

#*
