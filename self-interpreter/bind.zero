--* bind.zero

isDefined(parameter, parameterNames) :=
    isNatural(parameter) \/ (not isUnderscore(parameter) /\
        parameterNames.contains(getLexeme(parameter)))

bind(root) := (
    bind'(node, parameterNames) := getNodeType(node).match(
        SYMBOL -> (
            getDebruijnIndex(node) =/= 0 ? node
            isUnused(node) ? syntaxError(
                "cannot reference a symbol starting with underscore", node)
            tag := getTag(node)
            lexeme := getLexeme(node)
            newReference(getTag(node), 1 + (
                parameterNames.indexOf(lexeme) ?!
                syntaxError("undefined symbol", node)))
        );
        LAMBDA -> (
            parameter := getParameter(node)
            isDefined(parameter, parameterNames) ?
                syntaxError("symbol already defined", parameter)
            parameterName := getLexeme(parameter)
            newBody := bind'(getBody(node), parameterName :: parameterNames)
            newLambda(getTag(node), parameter, newBody)
        );
        APPLICATION -> (
            newFunction := bind'(getLeft(node), parameterNames)
            newArgument := bind'(getRight(node), parameterNames)
            newApplication(getTag(node), newFunction, newArgument)
        );
        NATURAL -> node;
        BUILTIN -> node;
    )
    bind'(root, [])
)

--*
