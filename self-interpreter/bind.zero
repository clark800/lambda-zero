#* bind.zero

define isDefined(parameter, parameterNames)
    isNatural(parameter) or (not isUnderscore(parameter) and
        parameterNames.contains(getLexeme(parameter)))


define findDebruijnIndex(parameterNames, node)
    if getValue(node) =/= 0
        getValue(node)
    if isUnused(node)
        syntaxError("cannot reference a symbol starting with underscore", node)
    parameterNames.indexOf(getLexeme(node)).mapRight(1 +) ?
        syntaxError("undefined symbol", node)


define bind(node, parameterNames)
    match getNodeType(node)
        case SYMBOL
            Reference(getTag(node), parameterNames.findDebruijnIndex(node))
        case LAMBDA
            parameter := getParameter(node)
            if isDefined(parameter, parameterNames)
                syntaxError("symbol already defined", parameter)
            parameterName := getLexeme(parameter)
            Function(getTag(parameter),
                bind(getBody(node), parameterName :: parameterNames))
        case APPLICATION
            Application(bind(getLeft(node), parameterNames),
                        bind(getRight(node), parameterNames))
        case DEFINITION
            syntaxError("missing scope for definition", node)
        case NATURAL
            Natural(renameTag(getTag(node), "_"), getValue(node))
        case BUILTIN
            Optimization(getTag(node))

#*
