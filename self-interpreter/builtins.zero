--* builtins.zero

getCharacter(node) := (
    isNatural(node) ? getValue(node)
    runtimeError("expected byte value in string at", node)
)

getFirstCharacter(node) :=
    getCharacter(getRight(getLeft(getBody(getBody(node)))))

-- todo: this only works for literal strings
extractString(astString) := getFirstCharacter(astString) ::
    extractString(getRight(getBody(getBody(astString))))

getBuiltin(builtin) := (
    maxInteger := 9223372036854775807

    getNatural(term) := (
        isNatural(term) ? getValue(term)
        runtimeError("expected natural argument to", builtin)
    )

    compute(f, left, right) :=
        f(getNatural(getTerm(left)), getNatural(getTerm(right)))

    makeNaturalBuiltin(f, left, right) :=
        Closure(newNatural(getTag(builtin), f.compute(left, right)), [])

    makeComparisonBuiltin(f, left, right) :=
        Closure(newBoolean(getTag(builtin), f.compute(left, right)), [])

    addBuiltin(left, right) := (
        left > maxInteger - right ?
            runtimeError("overflow in", builtin)
        left + right
    )

    subtractBuiltin(left, right) := (
        right > left ?
            runtimeError("underflow in", builtin)
        left - right
    )

    multiplyBuiltin(left, right) := (
        right =/= 0 /\ left > maxInteger // right ?
            runtimeError("overflow in", builtin)
        left * right
    )

    divideBuiltin(left, right) := (
        right = 0 ? runtimeError("divide by zero in", builtin)
        left // right
    )

    moduloBuiltin(left, right) := (
        right = 0 ? left
        left % right
    )

    upBuiltin(left, right) := (
        left >= maxInteger ?
            runtimeError("overflow in", builtin)
        left + 1
    )

    builtins := newDictionary([
        ("+", (2, makeNaturalBuiltin(addBuiltin))),
        ("-", (2, makeNaturalBuiltin(subtractBuiltin))),
        ("*", (2, makeNaturalBuiltin(multiplyBuiltin))),
        ("//", (2, makeNaturalBuiltin(divideBuiltin))),
        ("%", (2, makeNaturalBuiltin(moduloBuiltin))),
        ("=", (2, makeComparisonBuiltin(=))),
        ("=/=", (2, makeComparisonBuiltin(=/=))),
        ("<", (2, makeComparisonBuiltin(<))),
        (">", (2, makeComparisonBuiltin(>))),
        ("<=", (2, makeComparisonBuiltin(<=))),
        (">=", (2, makeComparisonBuiltin(>=))),
        ("up", (1, makeNaturalBuiltin(upBuiltin))),
        ("error", (1, closure -> error(extractString(getTerm(closure))))),
        ("(undefined)", (0, closure -> undefined))
    ])

    builtins.lookup(getLexeme(builtin))
)

--*
