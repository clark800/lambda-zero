getBuiltin(builtin) := (
    maxInteger := 9223372036854775807

    getIntegerValue(term) := (
        isInteger(term) ? getInteger(term)
        runtimeError("expected integer argument to", builtin)
    )

    compute(f, left, right) :=
        f(getIntegerValue(getTerm(left)), getIntegerValue(getTerm(right)))

    makeIntegerBuiltin(f, left, right) :=
        newClosure(newInteger(getTag(builtin), f.compute(left, right)), [])

    makeComparisonBuiltin(f, left, right) :=
        newClosure(newBoolean(getTag(builtin), f.compute(left, right)), [])

    addBuiltin(left, right) := (
        left > 0 /\ right > 0 /\ left > maxInteger - right ?
            runtimeError("integer overflow in", builtin)
        left < 0 /\ right < 0 /\ left < -maxInteger - right ?
            runtimeError("integer overflow in", builtin)
        left + right
    )

    subtractBuiltin(left, right) := (
        left > 0 /\ right < 0 /\ left > maxInteger + right ?
            runtimeError("integer overflow in", builtin)
        left < 0 /\ right > 0 /\ left < -maxInteger + right ?
            runtimeError("integer overflow in", builtin)
        left - right
    )

    multiplyBuiltin(left, right) := (
        right != 0 /\ abs(left) > abs(maxInteger / right) ?
            runtimeError("integer overflow in", builtin)
        left * right
    )

    divideBuiltin(left, right) := (
        right = 0 ? runtimeError("divide by zero in", builtin)
        left / right
    )

    moduloBuiltin(left, right) := (
        right = 0 ? runtimeError("divide by zero in", builtin)
        left % right
    )

    builtins := newDictionary([
        ("+", (2, makeIntegerBuiltin(addBuiltin))),
        ("-", (2, makeIntegerBuiltin(subtractBuiltin))),
        ("*", (2, makeIntegerBuiltin(multiplyBuiltin))),
        ("/", (2, makeIntegerBuiltin(divideBuiltin))),
        ("%", (2, makeIntegerBuiltin(moduloBuiltin))),
        ("=", (2, makeComparisonBuiltin((=)))),
        ("!=", (2, makeComparisonBuiltin((!=)))),
        ("<", (2, makeComparisonBuiltin((<)))),
        (">", (2, makeComparisonBuiltin((>)))),
        ("<=", (2, makeComparisonBuiltin((<=)))),
        (">=", (2, makeComparisonBuiltin((>=)))),
        ("error", (1, closure -> error(extractString(getTerm(closure)))))
    ])
    builtins.lookup(getLexeme(builtin))
)
