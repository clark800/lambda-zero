#@ builtins.zero

maxInteger := 9223372036854775807


def newBoolean(tag, numeralType, b)
    FreeAbstraction(tag,
        FreeAbstraction(tag, Variable(tag, +_(if b then 1 else 2))))


def makeUnaryBuiltin(f, evaluate, arguments)
    if arguments is argument :: arguments'
        if getTerm(evaluate(argument)) is Numeral(_, type, value)
            Just(enclose(Numeral(noTag, type, f(value))))
        Void
    Void


def makeBinaryBuiltin(constructor, f, evaluate, arguments)
    if arguments is left :: arguments'
        if arguments' is right :: _
            if getTerm(evaluate(left)) is Numeral(_, type, value)
                if getTerm(evaluate(right)) is Numeral(_, _, value')
                    result := constructor(noTag, type, f(value, value'))
                    Just(enclose(result))
                Void
            Void
        Void
    Void


def makeNaturalBuiltin(f, evaluate, arguments)
    makeBinaryBuiltin(Numeral, f, evaluate, arguments)


def makeComparisonBuiltin(f, evaluate, arguments)
    makeBinaryBuiltin(newBoolean, f, evaluate, arguments)


def addBuiltin(left, right)
    if left > maxInteger -- right
        abort("\nRuntime error: overflow in '+'")
    left + right


def monusBuiltin(left, right)
    left -- right


def multiplyBuiltin(left, right)
    if right =/= 0 and left > maxInteger // right
        abort("\nRuntime error: overflow in '*'")
    left * right


def divideBuiltin(left, right)
    left // right


def moduloBuiltin(left, right)
    left % right


def incrementBuiltin(argument)
    if argument >= maxInteger
        abort("\nRuntime error: overflow in 'up'")
    argument + 1


def abortBuiltin(evaluate, arguments)
    if arguments is argument :: _
        message := serializeString(evaluate, argument) ??
            abort("\nRuntime error: expected string argument to 'abort'")
        abort message
    abort("\nRuntime error: missing argument to 'abort'")


def getBuiltin(tag)
    builtins := newDictionary([
        ("+", (2, makeNaturalBuiltin(addBuiltin))),
        ("--", (2, makeNaturalBuiltin(monusBuiltin))),
        ("*", (2, makeNaturalBuiltin(multiplyBuiltin))),
        ("//", (2, makeNaturalBuiltin(divideBuiltin))),
        ("%", (2, makeNaturalBuiltin(moduloBuiltin))),
        ("=", (2, makeComparisonBuiltin((=)))),
        ("=/=", (2, makeComparisonBuiltin((=/=)))),
        ("<", (2, makeComparisonBuiltin((<)))),
        (">", (2, makeComparisonBuiltin((>)))),
        ("<=", (2, makeComparisonBuiltin((<=)))),
        (">=", (2, makeComparisonBuiltin((>=)))),
        ("abort", (1, abortBuiltin)),
        ("up", (1, makeUnaryBuiltin(incrementBuiltin)))
    ])

    builtins.lookup(getTagLexeme(tag))

#@
