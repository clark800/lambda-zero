#* define.zero

define getHead(node)
    if isJuxtaposition(node) then getHead(getLeft(node)) else node

define applyPlainDefinition(tag, name, value, scope)
    Juxtaposition(tag, newPatternArrow(tag, name, scope), value)

define applyTryDefinition(tag, name, value, scope)
    Juxtaposition(tag, Juxtaposition(tag, Name(renameTag(tag, "??")),
        value), newPatternArrow(tag, name, scope))

define transformRecursion(name, value)
    if not isName(name) or not containsName(name, value)
        value
    tag := getTag(name)
    fix' := Name(renameTag(tag, "fix"))
    Juxtaposition(tag, fix', Arrow(tag, Name(tag), value))

define isTupleConstructor(node)
    isName(node) and not isNil(getLexeme(node)) and getLexeme(node)[0] = ','

define isTuple(node)
    if isJuxtaposition(node)
        isTuple(getLeft(node))
    isTupleConstructor(node)

define isValidPattern(node)
    isName(node) or (isJuxtaposition(node) and
        isValidPattern(getLeft(node)) and isValidPattern(getRight(node)))

define isValidConstructorParameter(parameter)
    isJuxtaposition(parameter) and isJuxtaposition(getLeft(parameter)) and
    isValidPattern(getRight(parameter)) and
    isName(getRight(getLeft(parameter))) and
    (isThisName(getLeft(getLeft(parameter)), ":") or
     isThisName(getLeft(getLeft(parameter)), "âˆˆ"))

define newGetterDefinition(tag, n, j, m, (parameter, k), scope)
    if not isValidConstructorParameter(parameter)
        syntaxError("invalid constructor parameter", parameter)
    name := getRight(getLeft(parameter))
    if isUnused(getTag(name))
        scope
    projector := newProjector(tag, m, k)
    undefined' := Name(renameTag(tag, "undefined"))
    arguments := (0 .. n - 1).map(q -> if q = j then projector else undefined)
    getter := Arrow(tag, Name(renameTag(tag, "_")),
        arguments.cascade(Juxtaposition(tag), newUnderscore(tag, 1)))
    applyPlainDefinition(tag, name, getter, scope)

define newConstructorDefinition(tag, n, (pattern, j), scope)
    name := getHead(pattern)
    if not isName(name)
        syntaxError("invalid constructor name", name)
    parameters := getArguments(pattern)
    m := length(parameters)
    scope' := zip(parameters, naturals).fold(
        newGetterDefinition(tag, n, j, m), scope)
    base := newUnderscore(tag, n - j)
    arguments := reverse(n + 1 .. n + m).map(newUnderscore(tag))
    body := arguments.cascade(Juxtaposition(tag), base)
    constructor := ((Arrow(tag, Name(renameTag(tag, "_"))))^^(n + m))(body)
    applyPlainDefinition(tag, name, constructor, scope')

define applyADTDefinition(tag, left, right, scope)
    undefined' := Name(renameTag(tag, "undefined"))
    scope' := applyPlainDefinition(tag, getHead(left), undefined', scope)
    constructors := getContents(right)
    n := length(constructors)
    zip(constructors, naturals).fold(newConstructorDefinition(tag, n), scope')

define applyDefinition(definition, scope)
    tag := getTag(definition)
    name := getDefinee(definition)
    value := getDefinedValue(definition)
    match getDefinitionType(definition)
        case PlainDefinition -> applyPlainDefinition(tag, name, value, scope)
        case TryDefinition -> applyTryDefinition(tag, name, value, scope)
        case SyntaxDefinition -> scope
        case ADTDefinition -> applyADTDefinition(tag, name, value, scope)

define reduceDefine'(tag, definitionType, left, right)
    if isTuple(left)
        Definition(tag, definitionType, left, right)
    (name, value) := getNameAndValue(newPatternArrow(tag), left, right)
    if not isName(name)
        parseError("invalid left hand side", tag)
    if isThisName(name, "main")
        applyPlainDefinition(tag, name, value, name)
    Definition(tag, definitionType, name, transformRecursion(name, value))

define reduceDefine(operator, left, right)
    tag := getTag(operator)
    if isKeyphrase(left, "try")
        reduceDefine'(tag, TryDefinition, getRight(left), right)
    if isKeyphrase(left, "syntax")
        reduceDefine'(tag, SyntaxDefinition, getRight(left), right)
    reduceDefine'(tag, PlainDefinition, left, right)

define reduceADTDefine(operator, left, right)
    if not isValidPattern(left)
        syntaxError("invalid left hand side", operator)
    if not isADT(right)
        syntaxError("ADT required to right of", operator)
    Definition(getTag(operator), ADTDefinition, left, right)

#*
