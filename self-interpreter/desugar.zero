
isDefinition(node) := isApplication(node) /\ getLexeme(node) =*= ":="

hasRecursiveCalls(node, name) := (
    isLambda(node) ? (
        getLexeme(getParameter(node)) =*= getLexeme(name) ? (
            isInternal(getParameter(node)) ? false
            syntaxError("symbol already defined", getParameter(node))
        )
        hasRecursiveCalls(getBody(node), name)
    )
    isApplication(node) ?
        hasRecursiveCalls(getLeft(node), name) \/
        hasRecursiveCalls(getRight(node), name)
    isSymbol(node) \/ isReference(node) ?
        getLexeme(node) =*= getLexeme(name)
    false
)

transformRecursion(name, value) := (
    isComma(name) \/ !isSymbol(name) \/ !hasRecursiveCalls(value, name) ? value
    newApplication(getTag(name), yCombinator,
        newLambda(getTag(name), newName(getTag(name)), value))
)

getNameAndValue(left, right) := (
    !isApplication(left) ? (left, transformRecursion(left, right))
    getNameAndValue(getLeft(left),
        newPatternLambda(getTag(getRight(left)), getRight(left), right))
)

createScope(name, explicitScope, input) := (
    getLexeme(name) =*= "main" ? (
        !isEOF(explicitScope) ?
            syntaxError("main must be the last function defined", name)
        newApplication(getTag(name), name,
            buildStringLiteral(inputTag, input.map(newInteger(blank))))
    )
    isEOF(explicitScope) ? name || explicitScope
)

transformDefinition(tag, left, right, explicitScope, input) := (
    (name, value) := getNameAndValue(left, right)
    scope := createScope(name, explicitScope, input)
    transform := newPatternLambda(tag, name, scope)
    newApplication(tag, transform, value)
)

desugar(node, input) := (
    tag := getTag(node)
    isLambda(node) ?
        newLambda(tag, getParameter(node), desugar(getBody(node), input))
    isApplication(node) ? (
        isDefinition(node) ? (
            isDefinition(getLeft(node)) ?
                syntaxError("cannot define a definition", node)
            transformDefinition(getTag(node),
                desugar(getLeft(node), input),
                desugar(getRight(node), input), eof, input)
        )
        isDefinition(getLeft(node)) ?
            transformDefinition(getTag(getLeft(node)),
                desugar(getLeft(getLeft(node)), input),
                desugar(getRight(getLeft(node)), input),
                desugar(getRight(node), input), input)
        newApplication(getTag(node),
            desugar(getLeft(node), input), desugar(getRight(node), input))
    )
    node        // all leaf nodes are returned unmodified
)
