#* evaluate.zero

define expandNatural(tag, n)
    metadata := Metadata(Free, Free, [])
    Abstraction(tag, metadata, Abstraction(tag, metadata,
        n |> 0 -> Variable(tag, 2); up n' ->
            Application(tag, False, Variable(tag, 1), Numeral(tag, n'))))


define evaluate(closure @ Closure(term, environment), stack)
    match term
        case Variable(_, debruijn)
            evaluate(environment.seek(debruijn -- 1), stack)
        case Abstraction(_, _, body)
            with stack as argument :: stack'
                evaluate(Closure(body, environment.push(argument)), stack')
            closure
        case Application(_, _, applicand, argument)
            evaluate(Closure(applicand, environment),
                     Closure(argument, environment) :: stack)
        case Numeral(tag, n)
            if isNil(stack) then closure else
                evaluate(Closure(expandNatural(tag, n), environment), stack)
        case Operation(_, arity, operator)
            result := operator(`evaluate([]), stack.take(arity))
            evaluate(result, stack.drop(arity))


define evaluateClosure(closure)
    evaluate(closure, newRandomAccessList([]))


define evaluateTerm(term)
    evaluateClosure(Closure(term, []))

#*
