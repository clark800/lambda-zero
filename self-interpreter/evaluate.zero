#* evaluate.zero

def expandNumeral(tag, type, n)
    FreeFunction(tag, FreeFunction(tag,
            n |> 0 -> Variable(tag, -_ 2); up n' ->
                Application(tag, Variable(tag, -_ 1), Numeral(tag, type, n'))))


def evaluate(metacontext, metaindices, stack, closure)
    evaluate' := evaluate(metacontext)
    evaluate := evaluate'(metaindices)
    _ @ Closure(term, environment) := closure
    done(tag) := if isNil(stack) then closure else enclose(Unknown(tag))

    match term
        case MetaVariable(tag, index)
            if index is +_ index'
                if metacontext.getMetaValue(index') is Just(closure')
                    if metaindices.contains((= index'))
                        done(tag)
                    evaluate'(index' :: metaindices, stack, closure')
                done(tag)
            done(tag)
        case Type(tag, index) -> done(tag)
        case Variable(tag, index)
            if environment.seek(-_ abs(index)) is Just(closure')
                evaluate(stack, closure')
            closure
        case Singleton(tag, type, element) -> done(tag)
        case Function(tag, domain, body)
            if stack is argument :: stack'
                evaluate(stack', Closure(body, environment.push(argument)))
            closure
        case Implication(tag, domain, body) -> done(tag)
        case Intersection(tag, domain, body) -> done(tag)
        case Application(tag, applicand, argument)
            evaluate(Closure(argument, environment) :: stack,
                Closure(applicand, environment))
        case Numeral(tag, type, n)
            if isNil(stack)
                enclose(term)
            evaluate(stack, Closure(expandNumeral(tag, type, n), environment))
        case Operation(tag, term', Optimization(arity, operator))
            if operator(evaluate([]), stack.take(arity)) is Just(closure')
                evaluate(stack.drop(arity), closure')
            evaluate(stack, Closure(term', environment))


def evaluateClosure(closure)
    evaluate(emptyMetacontext, [], [], closure)


def evaluateTerm(term)
    evaluateClosure(Closure(term, newArray([])))

#*
