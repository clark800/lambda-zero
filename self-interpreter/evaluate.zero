#* evaluate.zero

define expandNumeral(tag, type, n)
    FreeAbstraction(tag, FreeAbstraction(tag,
            n |> 0 -> Variable(tag, 2); up n' ->
                Application(tag, Variable(tag, 1), Numeral(tag, type, n'))))


define evaluate(stack, closure @ Closure(term, environment))
    match term
        case Top(tag)
            closure
        case Constant(tag, isTypeConstructor, index)
            with environment.get(index) as Just(closure')
                evaluate(stack, closure')
            closure
        case Variable(_, debruijn)
            with environment.peek(debruijn -- 1) as Just(closure')
                evaluate(stack, closure')
            closure
        case MetaVariable(tag, _)
            if isNil(stack) then closure else runtimeError("metavariable", tag)
        case Abstraction(_, _, body)
            with stack as argument :: stack'
                evaluate(stack', Closure(body, environment.push(argument)))
            closure
        case Implication(tag, _, _)
            if isNil(stack) then closure else runtimeError("implication", tag)
        case Implicit(tag, _, _)
            if isNil(stack) then closure else runtimeError("implicit", tag)
        case Application(_, applicand, argument)
            evaluate(Closure(argument, environment) :: stack,
                Closure(applicand, environment))
        case Construction(tag, _, _)
            if isNil(stack) then closure else runtimeError("construction", tag)
        case Numeral(tag, type, n)
            with stack as _ :: _
                numeral := expandNumeral(tag, type, n)
                evaluate(stack, Closure(numeral, environment))
            closure
        case Operation(_, _, arity, operator)
            result := operator(evaluate([]), stack.take(arity))
            evaluate(stack.drop(arity), result)


define evaluateClosure(closure)
    evaluate([], closure)


define evaluateTerm(environment, term)
    evaluateClosure(Closure(term, environment))

#*
