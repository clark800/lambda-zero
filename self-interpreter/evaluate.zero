
evaluate(closure, stack) := (
    (term, environment) := closure
    isReference(term) ?
        evaluate(environment[getDebruijnIndex(term)], stack)
    isApplication(term) ?
        evaluate(newClosure(getLeft(term), environment),
                 newClosure(getRight(term), environment) :: stack)
    isLambda(term) ? (
        stack.isEmpty ? closure
        evaluate(newClosure(getBody(term), stack[0] :: environment), --stack)
    )
    isInteger(term) ? (
        stack.isEmpty ? closure
        runtimeError("extra argument", getTerm(stack[0]))
    )
    isBuiltin(term) ? (
        (arity, builtin) := getData(term)
        arguments := stack.takeSafe(arity) ?||
            runtimeError("missing argument to", term)
        evaluate(builtin.apply(arguments.map(`evaluate([]))), stack.drop(arity))
    )
    undefined
)
