
evaluate(closure, stack) := (
    (term, environment) := unpackClosure(closure)
    isReference(term) ?
        evaluate(environment[getDebruijnIndex(term)], stack)
    isApplication(term) ?
        evaluate(newClosure(getLeft(term), environment),
                 newClosure(getRight(term), environment) :: stack)
    isLambda(term) ? (
        stack.isEmpty ? closure
        evaluate(newClosure(getBody(term), stack[0] :: environment), --stack)
    )
    isInteger(term) ? (
        stack.isEmpty ? closure
        runtimeError("extra argument", getTerm(stack[0]))
    )
    isBuiltin(term) ? (
        (arity, builtin) := fromJust(getBuiltin(term))
        arguments := (stack.takeSafe(arity) ?||
            runtimeError("missing argument to", term)).map(`evaluate([]))
        right := arity > 1 ? arguments[1] || newClosure(blank, [])
        evaluate(builtin(arguments[0], right), stack.dropSafe(arity))
    )
    undefined
)
