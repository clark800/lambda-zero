#@ interpret.zero

def runtimeError(message, tag)
    throwError("\nRuntime error: " ++ message, tag)


def splitCodeAndInput(input)
    (code, afterCode) := input.splitOn("\0")
    afterCode |> (case [] -> (code, []); case _ :: input' -> (code, input'))


def isMain(term)
    # todo: detect the name "main" rather than parameter name "input"
    isAbstraction(term) and getTagLexeme(getTermTag(term)) =*= "input"


def newNilTerm(tag)
    FreeAbstraction(tag, FreeAbstraction(tag, Variable(tag, +_ 2)))


def constructString(tag, string)
    # todo: implement this
    newNilTerm(veil(tag))


def evaluateCheck(closure)
    closure' := evaluateClosure(closure)
    if isUnknown(getTerm(closure'))
        runtimeError("unknown value", getTermTag(getTerm(closure')))
    closure'


def evaluateMain(Closure(main, environment), input)
    # todo: use tag for "input" parameter to main
    tag := getTermTag(main)
    term := Application(tag, main, constructString(tag, input))
    serializeString(evaluateCheck, Closure(term, environment)) ??
        runtimeError("expected string from", tag)


def showDefinition((tag, term))
    showTag(tag) ++ " := " ++ showTerm(term)


def showDefinitions(tags, environment)
    terms := environment.toList.map(getTerm)
    zip(tags, terms).map(showDefinition).joinWith("\n")


def interpret(input)
    (code, input') := splitCodeAndInput(input)
    bindings := parse(getBuiltin, code)
    if bindings is Binding(_, Closure(term, environment), _, _) :: _
        if code.startsWith("#% dump")
            tags := reverse(bindings.map(getBindingTag))
            return showDefinitions(tags, environment)
        closure := evaluateCheck(Closure(term, environment))
        if isMain(getTerm(closure))
            return evaluateMain(closure, input')
        serialized := showClosure(closure)
        if length(serialized) < 0
            error "force syntax errors"
        return serialized
    error "No input"


def main(input)
    match interpret(input)
        case Left(message) -> abort(message)
        case Right(output) -> output


#main(input) := showAST(parse(getBuiltin, input))

#@
