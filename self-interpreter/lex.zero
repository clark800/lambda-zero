getLexeme(node) := getTagLexeme(getTag(node))
getLine(node) := getTagLine(getTag(node))
getColumn(node) := getTagColumn(getTag(node))

isOpenParen(node) := isOperator(node) /\ getLexeme(node) =*= "("
isCloseParen(node) := isOperator(node) /\ getLexeme(node) =*= ")"
isSpace(node) := isOperator(node) /\ isBlank(getLexeme(node)[0])
isNewline(node) := isOperator(node) /\ getLexeme(node) =*= "\n"
isEOF(node) := isOperator(node) /\ getLexeme(node) =*= "\0"
isComma(node) := isSymbol(node) /\ getLexeme(node) =*= ","
isCommaList(node) := isApplication(node) /\ getLexeme(node) =*= ","
isTuple(node) := isLambda(node) /\ isComma(getParameter(node))
isUnit(node) := isTuple(node) /\ isComma(getBody(node))
isList(node) := isLambda(node) /\ getLexeme(node) =*= "["
isInternal(node) := getLine(node) = 0 /\ getColumn(node) = 0
isInput(node) := isInternal(node) /\ getLexeme(node) =*= "input"
isStringLiteral(node) := isTuple(node) /\ getLexeme(node)[0] = '"'

isNameLexeme(lexeme) := isOperandCharacter(lexeme[0]) /\ !isDigit(lexeme[0])
isOperatorLexeme(lexeme) :=
    isOperatorCharacter(lexeme[0]) \/ isDelimiterCharacter(lexeme[0])
isIntegerLexeme(lexeme) := lexeme.all(isDigit)

showLexeme(lexeme) := (
    lexeme.isEmpty \/ lexeme[0] = 0 ? "\\0"
    lexeme[0] = '\n' ? "\\n"
    lexeme
)

showToken(token) := showLexeme(getLexeme(token))

showLocation(tag) :=
    "line " ++ showNatural(getTagLine(tag)) ++
    " column " ++ showNatural(getTagColumn(tag))

showLexemeAndLocationLine(tag, quote) :=
    quote ++ showLexeme(getTagLexeme(tag)) ++ quote ++
        " at " ++ showLocation(tag) ++ "\n"

inputTag := ("input", (0, 0))
blank := newName(("_", (0, 0)))
projectionBlank := newName(("(_)", (0, 0)))
comma := newName((",", (0, 0)))
cT := newName(("t", (0, 0)))
cF := newName(("f", (0, 0)))
cX := newName(("x", (0, 0)))
cY := newName(("y", (0, 0)))
eof := newOperator(("\0", (0, 0)))
cXY := newLambda(getTag(cX), cX, newApplication(getTag(cX), cY,
        newApplication(getTag(cX), cX, cX)))
yCombinator := newLambda(getTag(cY), cY, newApplication(getTag(cY), cXY, cXY))

newTrue(tag) := newLambda(tag, cT, newLambda(tag, cF,
    newReference(getTag(cT), 1)))
newFalse(tag) := newLambda(tag, cT, newLambda(tag, cF,
    newReference(getTag(cF), 0)))
newBoolean(tag, b) := b ? newTrue(tag) || newFalse(tag)
newNil(tag) := newLambda(tag, blank, newTrue(tag))

applyToCommaList(f, commaList) := (
    isCommaList(commaList) ? newApplication(getTag(f),
        applyToCommaList(f, getLeft(commaList)), getRight(commaList))
    isComma(commaList) ? f          // allow applying to tuple body
    newApplication(getTag(f), f, commaList)
)

newTuple(tag, commaList) :=
   newLambda(tag, comma, applyToCommaList(comma, commaList))

getCommaListSize(commaList) := (
    isCommaList(commaList) ? getCommaListSize(getLeft(commaList)) + 1
    isComma(commaList) ? 0 || 1
)

getTupleSize(tuple) := getCommaListSize(getBody(tuple))

prependList(tag, item, list) :=
    newLambda(tag, comma, newApplication(tag,
        newApplication(tag, comma, item), list))

getListElements(list) := (
    !isTuple(list) ? []
    getRight(getLeft(getBody(list))) :: getListElements(getRight(getBody(list)))
)

getListLength(list) := (
    !isTuple(list) ? 0
    tail := getRight(getBody(list))
    getListLength(tail) + 1
)

parseEscapeCode(code, tag) := (
    code = '0' ? '\0'
    code = 'n' ? '\n'
    code = 't' ? '\t'
    code = 'r' ? '\r'
    code = '\\' ? '\\'
    code = '\"' ? '\"'
    code = '\'' ? '\''
    error("Syntax error: invalid escape sequence in " ++ showPrettyTag(tag))
)

parseQuotedCharacter(tag, string) := (
    string[0] < 0 \/ string[0] > 127 ?
        error("Syntax error: illegal character in " ++ showPrettyTag(tag))
    string[0] != '\\' ?
        newInteger(tag, string[0])
    --string =*= [] ?
        error("Syntax error: missing end quote for " ++ showPrettyTag(tag))
    newInteger(tag, parseEscapeCode((--string)[0], tag))
)

splitStringLiteral(string) := (
    string =*= [] ? []
    n := (string[0] = '\\' /\ !(--string =*= [])) ? 2 || 1
    string.take(n) :: splitStringLiteral(string.drop(n))
)

buildStringLiteral(tag, characters) := (
    characters.isEmpty ? newNil(tag)
    prependList(tag, characters[0], buildStringLiteral(tag, --characters))
)

getQuoteContents(tag) := (
    lexeme := getTagLexeme(tag)
    lexeme.length > 1 /\ lexeme.last = lexeme[0] ? dropLast(--lexeme)
    error("Syntax error: missing end quote for " ++ showPrettyTag(tag))
)

getQuotedCharacters(tag) :=
    splitStringLiteral(getQuoteContents(tag)).map(parseQuotedCharacter(tag))

parseStringLiteral(tag) := buildStringLiteral(tag, getQuotedCharacters(tag))

parseCharacterLiteral(tag) := (
    characters := getQuotedCharacters(tag)
    (characters.length = 1)? characters[0]
    error("Syntax error: invalid character literal " ++ showPrettyTag(tag))
)

createInteger(tag) := (
    lexeme := getTagLexeme(tag)
    maxInteger := "9223372036854775807"
    integer := lexeme.dropIf((= '0'))
    integer.length > maxInteger.length ?
        error("Syntax error: magnitude of integer is too large " ++
            showLexemeAndLocationLine(tag, "'"))
    integer.length = maxInteger.length /\
        zipWith(integer, (>), maxInteger).any() ?
        error("Syntax error: magnitude of integer is too large " ++
            showLexemeAndLocationLine(tag, "'"))
    newInteger(tag, parseInteger(lexeme, 10))
)

createToken(tag) := (
    lexeme := getTagLexeme(tag)
    isUppercase(lexeme[0]) ?
        error("Syntax error: names can't start with uppercase " ++
            showLexemeAndLocationLine(tag, "'"))
    (lexeme[0] = '"')? parseStringLiteral(tag)
    (lexeme[0] = '\'')? parseCharacterLiteral(tag)
    isIntegerLexeme(lexeme)? createInteger(tag)
    isNameLexeme(lexeme)? newName(tag)
    isOperatorLexeme(lexeme)? newOperator(tag)
    error("Syntax error: invalid token " ++ showPrettyTag(tag))
)

tokenError(title, message, token) :=
    error(title ++ message ++ " " ++
        showLexemeAndLocationLine(getTag(token), "'"))

syntaxError(message, token) := tokenError("Syntax error: ", message, token)
runtimeError(message, token) := tokenError("\nRuntime error: ", message, token)

getFirstCharacter(node) := (
    characterNode := getRight(getLeft(getBody(node)))
    isInteger(characterNode) ? getData(characterNode)
    runtimeError("expected byte value in string at", characterNode)
)

extractString(astString) := (
    !isTuple(astString) ? []
    getFirstCharacter(astString) :: extractString(getRight(getBody(astString)))
)

lex(string) := scan(string).map(createToken)
