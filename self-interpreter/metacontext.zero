#* metacontext.zero

MetacontextT ::= {Metacontext(
    positives : ArrayT((ClosureT(Term))?),
    negatives : ArrayT((ClosureT(Term))?)
)}

emptyMetacontext := Metacontext(newArray([]), newArray([]))


def showMetaValue(metaValue)
    if metaValue is Just(Closure(term, environment))
        showTerm(term)
    "Free"


def showMetacontext(Metacontext(positives, negatives))
    if getSize(positives) = 0
        "Empty"
    zip((0 ...).map((+_)), positives.toList).map((index, metaValue) ->
        showMetaVariable(index) ++ " := " ++
        showMetaValue(metaValue)).joinWith("\n")


def newPositiveMetaVariable(tag, Metacontext(positives, negatives))
    (index, positives') := positives.append(Void)
    (MetaVariable(tag, +_ index), Metacontext(positives', negatives))


def addPositiveMetaVariable(tag, value, Metacontext(positives, negatives))
    (index, positives') := positives.append(Just(value))
    (MetaVariable(tag, +_ index), Metacontext(positives', negatives))


def newNegativeMetaVariable(tag, Metacontext(positives, negatives))
    (index, negatives') := negatives.append(Void)
    (MetaVariable(tag, -_ index), Metacontext(positives, negatives'))


def getMetaValue(index, Metacontext(positives, negatives))
    positives.get(index) ?? Void


def setMetaValue(index, value, Metacontext(positives, negatives))
    Metacontext(positives.set(index, Just(value)), negatives)


def isNegativeMetaVariable(term)
    if term is MetaVariable(_, index)
        isNegative(index)
    False


def isDeterminedMetaVariable(metavariable, metacontext)
    if metavariable is MetaVariable(_, index)
        if index is +_ index'
            not isVoid(metacontext.getMetaValue(index'))
        False
    False

#*
