#@ metacontext.zero

MetacontextT ::= {Metacontext(
    positives : ArrayT((ClosureT(Term))?),
    negatives : ArrayT((ClosureT(Term))?),
    domains : ArrayT((ClosureT(Term))?)    # for positives only
)}

emptyMetacontext := Metacontext(newArray([]), newArray([]), newArray([]))


def getPositives(Metacontext(positives, negatives, domains))
    positives


def getNegatives(Metacontext(positives, negatives, domains))
    negatives


def getDomain(Metacontext(_, _, domains), index)
    domains.get(index) ?? Void


def showMetaValue(metaValue)
    if metaValue is Just(Closure(term, environment))
        showTerm(term)
    "Free"


def showMetacontext(Metacontext(positives, negatives, domains))
    if getSize(positives) = 0
        "Empty"
    enumerate(positives.toList).map((index, metaValue) ->
        showMetavariable(+_ index) ++ " := " ++
        showMetaValue(metaValue)).joinWith("\n")


def newPositiveMetavariable(tag, domain,
        Metacontext(positives, negatives, domains))
    (index, positives') := positives.append(Void)
    (_, domains') := domains.append(domain)
    (Metavariable(tag, +_ index), Metacontext(positives', negatives, domains'))


def newMetaconstant(tag, value, Metacontext(positives, negatives, domains))
    (index, positives') := positives.append(Just(value))
    (_, domains') := domains.append(Void)
    (Metavariable(tag, +_ index), Metacontext(positives', negatives, domains'))


def newNegativeMetavariable(tag, Metacontext(positives, negatives, domains))
    (index, negatives') := negatives.append(Void)
    (Metavariable(tag, -_ index), Metacontext(positives, negatives', domains))


def getMetaValue(index, Metacontext(positives, negatives, domains))
    positives.get(index) ?? Void


def getMetavariableValue(metavariable, metacontext)
    if metavariable is Metavariable(tag, index)
        if index is +_ index'
            getMetaValue(index', metacontext)
        Void
    Void


def isDeterminedMetavariable(metavariable, metacontext)
    if getMetavariableValue(metavariable, metacontext) is Just(Closure(term, _))
        if isMetavariable(term)
            isDeterminedMetavariable(term, metacontext)
        True
    False


def setMetaValue(index, value, Metacontext(positives, negatives, domains))
    Metacontext(positives.set(index, Just(value)), negatives, domains)


def clearMetaValue(index, Metacontext(positives, negatives, domains))
    Metacontext(positives.set(index, Void), negatives, domains)


def clearMetaValues(indices, metacontext)
    indices.fold(clearMetaValue, metacontext)


def getMetacontextUpdates(metacontext, metacontext')
    indices := upto(getSize(getPositives(metacontext)))
    indices.filter(index ->
        isVoid(getMetaValue(index, metacontext)) and
        not isVoid(getMetaValue(index, metacontext')))

#@
