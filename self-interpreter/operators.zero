leftAssociative := 0
rightAssociative := 1
nonAssociative := 2

infix := 0
prefix := 1
openfix := 2
closefix := 3

isSpecialOperator(operator) := isOperator(operator) /\
    ["(", ")", "[", "]", ",", " ", "\n", "->", ":=", "\0"].
    contains(getLexeme(operator))

isProjection(node) := isLambda(node) /\
    getLexeme(getParameter(node)) =*= getLexeme(projectionBlank)

newProjection(tag, size, index) := (
    reference := newReference(tag, size - index - 1)
    function := (newLambda(tag, blank))^^(size)(reference)
    newLambda(tag, projectionBlank,
        newApplication(tag, projectionBlank, function))
)

getTupleElements(tuple) := (
    getTupleElements'(body) := (
        !isApplication(body) ? []
        getTupleElements'(getLeft(body)) ++ [getRight(body)]
    )
    getTupleElements'(getBody(tuple))
)

newPatternLambda(tag, pattern, body) := (
    isSymbol(pattern) ? newLambda(tag, pattern, body)
    !isTuple(pattern) \/ getTupleSize(pattern) = 0 ?
        syntaxError("invalid parameter", pattern)
    tag' := getTag(pattern)
    size := getTupleSize(pattern)
    function := getTupleElements(pattern).foldr(element -> x ->
        newPatternLambda(getTag(element), element, x), body)
    projections := (0 .. size - 1).map(n ->
        newApplication(tag', newProjection(tag', size, n), blank))
    application := projections.foldl(x -> projection ->
        newApplication(tag', x, projection), function)
    newLambda(tag, blank, application)
)

reduceApply(operator, left, right) :=
    newApplication(getTag(operator), left, right)
reduceInfix(operator, left, right) :=
    reduceApply(operator, reduceApply(operator, operator, left), right)
reducePrefix(operator, _, right) := reduceApply(operator, operator, right)
reduceNegate(operator, _, right) :=
    reduceInfix(operator, newInteger(getTag(operator), 0), right)
reduceLambda(operator, left, right) :=
    newPatternLambda(getTag(operator), left, right)
reduceUnmatched(operator, _, _) := syntaxError("missing close for", operator)
reduceParentheses(close, open, contents) := (
    !isOpenParen(open) ? syntaxError("missing open for", close)
    isEOF(contents) ? newUnit(getTag(open))
    isSpecialOperator(contents) /\ !(getLexeme(contents) =*= ",") ?
        syntaxError("operator cannot be parenthesized", contents)
    isOperator(contents) ? newName(getTag(contents))
    isCommaList(contents) ? newTuple(getTag(open), contents)
    contents
)

createList(tag, commaList, list) := (
    isEOF(commaList) ? list
    !isCommaList(commaList) ? prependList(tag, commaList, list)
    createList(tag, getLeft(commaList),
        prependList(tag, getRight(commaList), list))
)

reduceBrackets(close, open, contents) := (
    !(getLexeme(open) =*= "[") ? syntaxError("missing open for", close)
    isEOF(contents) ? newName(("[]", getTagLocation(getTag(open))))
    createList(getTag(open), contents, newNil(getTag(open)))
)
reduceIllegal(_, _, _) := error("Internal error")

syntax(rules) := rules.first
collapse(rules) := rules.second
ordering(rules) := rules.syntax.first
fixity(rules) := rules.syntax.second
precedence(rules) := rules.ordering.first
associativity(rules) := rules.ordering.second
leftPrecedence(rules) := rules.precedence.first
rightPrecedence(rules) := rules.precedence.second

getRules(operator, isAfterOperator) := (
    isSpace(operator) ? ((((20, 20), leftAssociative), infix), reduceApply)
    getLexeme(operator) =*= "-" /\ isAfterOperator ?
        ((((21, 21), leftAssociative), prefix), reduceNegate)
    operators := newDictionary([
        // syntactic operators
        ("\0", ((((0, 0), leftAssociative), closefix), reduceIllegal)),
        ("(", ((((22, 0), leftAssociative), openfix), reduceUnmatched)),
        (")", ((((0, 22), rightAssociative), closefix), reduceParentheses)),
        ("[", ((((22, 0), leftAssociative), openfix), reduceUnmatched)),
        ("]", ((((0, 22), rightAssociative), closefix), reduceBrackets)),
        (",", ((((1, 1), leftAssociative), infix), reduceApply)),
        ("\n", ((((2, 2), rightAssociative), infix), reduceApply)),
        (":=", ((((3, 3), nonAssociative), infix), reduceApply)),
        ("|", ((((4, 4), leftAssociative), infix), reduceInfix)),
        ("->", ((((5, 5), rightAssociative), infix), reduceLambda)),

        // conditional operators
        ("||", ((((5, 5), rightAssociative), infix), reduceInfix)),
        ("?", ((((6, 6), rightAssociative), infix), reduceInfix)),
        ("?||", ((((6, 6), rightAssociative), infix), reduceInfix)),

        // monadic operators
        (">>=", ((((7, 7), leftAssociative), infix), reduceInfix)),

        // logical operators
        ("<=>", ((((8, 8), nonAssociative), infix), reduceInfix)),
        ("=>", ((((9, 9), nonAssociative), infix), reduceInfix)),
        ("\\/", ((((10, 10), rightAssociative), infix), reduceInfix)),
        ("/\\", ((((11, 11), rightAssociative), infix), reduceInfix)),

        // comparison/test operators
        ("=", ((((12, 12), nonAssociative), infix), reduceInfix)),
        ("!=", ((((12, 12), nonAssociative), infix), reduceInfix)),
        ("=*=", ((((12, 12), nonAssociative), infix), reduceInfix)),
        ("<", ((((12, 12), nonAssociative), infix), reduceInfix)),
        (">", ((((12, 12), nonAssociative), infix), reduceInfix)),
        ("<=", ((((12, 12), nonAssociative), infix), reduceInfix)),
        (">=", ((((12, 12), nonAssociative), infix), reduceInfix)),
        ("=<", ((((12, 12), nonAssociative), infix), reduceInfix)),
        ("~<", ((((12, 12), nonAssociative), infix), reduceInfix)),
        ("<:", ((((12, 12), nonAssociative), infix), reduceInfix)),
        (":", ((((12, 12), nonAssociative), infix), reduceInfix)),
        ("!:", ((((12, 12), nonAssociative), infix), reduceInfix)),
        ("~", ((((12, 12), nonAssociative), infix), reduceInfix)),

        // arithmetic/list operators
        ("..", ((((15, 15), nonAssociative), infix), reduceInfix)),
        ("::", ((((16, 16), rightAssociative), infix), reduceInfix)),
        ("&", ((((16, 16), leftAssociative), infix), reduceInfix)),
        ("+", ((((16, 16), leftAssociative), infix), reduceInfix)),
        ("\\./", ((((16, 16), leftAssociative), infix), reduceInfix)),
        ("++", ((((16, 16), rightAssociative), infix), reduceInfix)),
        ("-", ((((16, 16), leftAssociative), infix), reduceInfix)),
        ("\\", ((((16, 16), leftAssociative), infix), reduceInfix)),
        ("*", ((((17, 17), leftAssociative), infix), reduceInfix)),
        ("**", ((((17, 17), rightAssociative), infix), reduceInfix)),
        ("/", ((((17, 17), leftAssociative), infix), reduceInfix)),
        ("%", ((((17, 17), leftAssociative), infix), reduceInfix)),
        ("^", ((((18, 18), rightAssociative), infix), reduceInfix)),

        // functional operators
        ("<>", ((((19, 19), rightAssociative), infix), reduceInfix)),

        // prefix operators
        ("--", ((((21, 21), leftAssociative), prefix), reducePrefix)),
        ("!", ((((21, 21), leftAssociative), prefix), reducePrefix)),
        ("#", ((((21, 21), leftAssociative), prefix), reducePrefix)),
        ("^^", ((((23, 23), leftAssociative), infix), reduceInfix)),
        (".", ((((24, 24), leftAssociative), infix), reduceInfix)),
        ("`", ((((25, 25), leftAssociative), prefix), reducePrefix))
    ])
    defaultRules := ((((14, 14), leftAssociative), infix), reduceInfix)
    operators.get(getLexeme(operator), defaultRules)
)

isHigherPrecedence(leftOperatorWithRules, rightOperatorWithRules) := (
    (leftOperator, leftRules) := leftOperatorWithRules
    (rightOperator, rightRules) := rightOperatorWithRules

    leftRules.rightPrecedence = rightRules.leftPrecedence /\
        leftRules.associativity = nonAssociative ?
            syntaxError("operator is non-associative", leftOperator)

    leftRules.rightPrecedence = rightRules.leftPrecedence /\
        rightRules.associativity = nonAssociative ?
            syntaxError("operator is non-associative", rightOperator)

    rightRules.associativity = rightAssociative ?
        leftRules.rightPrecedence > rightRules.leftPrecedence
    leftRules.rightPrecedence >= rightRules.leftPrecedence
)
