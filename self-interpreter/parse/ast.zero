#* ast.zero

DefinitionType ::= {PlainDefinition, MaybeDefinition, TryDefinition,
    SyntaxDefinition, ADTDefinition, BindDefinition, TryBindDefinition}
ArrowType ::= {Single, ExplicitCase, DefaultCase, Double, Tail}

AST ::= {
    Top(tag : TagT),
    Family(tag : TagT),
    Reference(tag : TagT, index : ℤ),
    Arrow(tag : TagT, type : ArrowType, cases : List(AST && ℕ),
        parameter : AST, annotation : (AST)?, body : AST),
    Juxtaposition(tag : TagT, left : AST, right : AST),
    Let(tag : TagT, isConstruct : 𝔹, annotation : (AST)?,
        name : AST, value : AST, scope : AST),
    Number(tag : TagT, value : ℕ),
    PreInference(tag : TagT),
    PreEquation(tag : TagT, left : AST, right : AST),
    Definition(tag : TagT, type : DefinitionType,
        definiendum : AST, definiens : AST),
    AsPattern(tag : TagT, left : AST, pattern : AST),
    CommaPair(tag : TagT, left : AST, right : AST),
    ColonPair(tag : TagT, left : AST, right : AST),
    SetBuilder(tag : TagT, forms : List(AST)),
    ADT(tag : TagT, parameters : List(AST), body : AST),
    For(tag : TagT, left : AST, right : AST),
    Constructor(tag : TagT, adtType : AST, function : AST,
        count : ℕ, index : ℕ, arity : ℕ)
}


def lockArrow(node)
    if node is Arrow(tag, arrowType, cases, left, annotation, right)
        if arrowType is ExplicitCase
            Arrow(tag, Single, cases, left, annotation, right)
        if arrowType is DefaultCase
            Arrow(tag, Single, cases, left, annotation, right)
        node
    node


def getTag
    case Top(tag) -> tag
    case Family(tag) -> tag
    case Reference(tag, _) -> tag
    case Arrow(tag, _, _, _, _, _) -> tag
    case Juxtaposition(tag, _, _) -> tag
    case Let(tag, _, _, _, _, _) -> tag
    case Number(tag, _) -> tag
    case PreInference(tag) -> tag
    case PreEquation(tag, _, _) -> tag
    case Definition(tag, _, _, _) -> tag
    case AsPattern(tag, _, _) -> tag
    case CommaPair(tag, _, _) -> tag
    case ColonPair(tag, _, _) -> tag
    case SetBuilder(tag, _) -> tag
    case ADT(tag, _, _) -> tag
    case For(tag, _, _) -> tag
    case Constructor(tag, _, _, _, _, _) -> tag


def astSyntaxError(message, node)
    syntaxError(message, getTag(node))


def isPreterm
    case Top(_) -> True
    case Family(_) -> True
    case Reference(_, _) -> True
    case Arrow(_, _, _, _, _, _) -> True
    case Juxtaposition(_, _, _) -> True
    case Let(_, _, _, _, _, _) -> True
    case Number(_, _) -> True
    case PreInference(_) -> True
    case PreEquation(_, _, _) -> True
    case Definition(_, _, _, _) -> False
    case AsPattern(_, _, _) -> False
    case CommaPair(_, _, _) -> False
    case ColonPair(_, _, _) -> False
    case SetBuilder(_, _) -> False
    case ADT(_, _, _) -> True
    case For(_, _, _) -> False
    case Constructor(_, _, _, _, _, _) -> True


def showArrow
    case Single -> " -> "
    case ExplicitCase -> " -> "
    case DefaultCase -> " -> "
    case Double -> " => "
    case Tail -> " >-> "


def showAnnotation(showAST, annotation)
    if annotation is Just(type)
        " : " ++ showAST(type)
    ""


def showAST
    case Top(tag) -> "⊤"
    case Family(tag) -> "⊤{" ++ showTag(tag) ++ "}"
    case Reference(tag, _) -> showTag(tag)
    case Arrow(tag, arrowType, _, parameter, annotation, body) ->
        "(" ++ showAST(parameter) ++ showAnnotation(showAST, annotation) ++
            showArrow(arrowType) ++ showAST(body) ++ ")"
    case Juxtaposition(tag, left, right) ->
        "(" ++ showAST(left) ++ " " ++ showAST(right) ++ ")"
    case Let(tag, _, _, name, value, scope) ->
        "(" ++ showAST(name) ++ " := " ++ showAST(value) ++
            ";;" ++ showAST(scope) ++ ")"
    case Number(tag, value) -> showNatural(value)
    case PreInference(tag) -> "infer"
    case PreEquation(tag, left, right) ->
        "((" ++ showAST(left) ++ ") == (" ++ showAST(right) ++ "))"
    case Definition(tag, _, left, right) ->
        "(" ++ showAST(left) ++ " := " ++ showAST(right) ++ ")"
    case AsPattern(tag, name, pattern) ->
        "(" ++ showAST(name) ++ ")@(" ++ showAST(pattern) ++ ")"
    case CommaPair(tag, left, right) ->
        "(" ++ showAST(left) ++ ", " ++ showAST(right) ++ ")"
    case ColonPair(tag, left, right) ->
        "(" ++ showAST(left) ++ " : " ++ showAST(right) ++ ")"
    case SetBuilder(_, forms) -> "{" ++ forms.map(showAST).joinWith(", ") ++ "}"
    case ADT(tag, parameters, body) ->
        showTag(tag) ++ "(" ++ parameters.map(showAST).joinWith(", ") ++ ")"
    case For(tag, left, right) ->
        "(" ++ showAST(left) ++ " for " ++ showAST(right) ++ ")"
    case Constructor(_, _, body, _, _, _) -> showAST(body)


isTop := case Top(_) -> True; case _ -> False
isFamily := case Family(_) -> True; case _ -> False
isReference := case Reference(_, _) -> True; case _ -> False
isArrow := case Arrow(_, _, _, _, _, _) -> True; case _ -> False
isJuxtaposition := case Juxtaposition(_, _, _) -> True; case _ -> False
isLet := case Let(_, _, _, _, _, _) -> True; case _ -> False
isNumber := case Number(_, _) -> True; case _ -> False
isPreInference := case PreInference(_) -> True; case _ -> False
isPreEquation := case PreEquation(_, _, _) -> True; case _ -> False
isDefinition := case Definition(_, _, _, _) -> True; case _ -> False
isAsPattern := case AsPattern(_, _, _) -> True; case _ -> False
isCommaPair := case CommaPair(_, _, _) -> True; case _ -> False
isColonPair := case ColonPair(_, _, _) -> True; case _ -> False
isSetBuilder := case SetBuilder(_, _) -> True; case _ -> False
isADT := case ADT(_, _, _) -> True; case _ -> False
isFor := case For(_, _, _) -> True; case _ -> False
isConstructor := case Constructor(_, _, _, _, _, _) -> True; case _ -> False

def isCase(node)
    if node is Arrow(_, type, _, _, _, _)
        match type
            case ExplicitCase -> True
            case DefaultCase -> True
            case _ -> False
    False

def isDefaultCase(node)
    if node is Arrow(_, type, _, _, _, _)
        type |> case DefaultCase -> True; case _ -> False
    False

Name(tag) := Reference(tag, +_ 0)
This(tag) := Reference(renameTag(tag, "this", NOFIX), -_ 1)
Underscore(tag, debruijn) := Reference(veil(tag), +_ debruijn)
NegativeUnderscore(tag) := Reference(veil(tag), -_ 1)
FixedName(tag, lexeme) := Name(renameTag(tag, lexeme, NOFIX))
isName(node) := if node is Reference(_, index); abs(index) = 0 <| False

def TypedArrow(arrowType, defaultAnnotation, left, body)
    if left is ColonPair(_, parameter, type)
        Arrow(getTag(parameter), arrowType, [], parameter, Just(type), body)
    Arrow(getTag(left), arrowType, [], left, defaultAnnotation, body)

def DoubleArrow(left, body)
    if left is ColonPair(_, parameter, type)
        Arrow(getTag(parameter), Double, [], parameter, Just(type), body)
    parameter := Name(veil(getTag(left)))
    Arrow(getTag(parameter), Double, [], parameter, Just(left), body)

SingleArrow := TypedArrow(Single, Void)
TailArrow := TypedArrow(Tail, Void)
SingleArrowDefault(annotation) := TypedArrow(Single, Just(annotation))
ExplicitCaseArrow(tag, cases, parameter, body) :=
    Arrow(tag, ExplicitCase, cases, parameter, Void, body)
DefaultCaseArrow := TypedArrow(DefaultCase, Void)

def setAnnotation(annotation, node)
    if node is Arrow(tag, arrowType, cases, parameter, _, body)
        Arrow(tag, arrowType, cases, parameter, Just(annotation), body)
    abort("can only set annotation on arrow nodes")


isSyntaxDefinition(node) := if node is Definition(_, type, _, _);
    (if type is SyntaxDefinition; True <| False) <| False
getLexeme(node) := getTagLexeme(getTag(node))
showLexeme(node) := showTag(getTag(node))
isThisLexeme(node, lexeme) := getLexeme(node) =*= lexeme
isSameLexeme(node, node') := getLexeme(node) =*= getLexeme(node')
isThisName(node, lexeme) := isName(node) and isThisLexeme(node, lexeme)
isUnderscore(node) := isThisName(node, "_")
isUnused(tag) := getTagLexeme(tag).startsWith("_")
UnderscoreArrow(tag, body) := SingleArrow(Name(veil(tag)), body)
newNil(tag) := FixedName(tag, "[]")
prependList(tag, item, list) := Juxtaposition(tag,
    Juxtaposition(tag, Name(renameTag(tag, "::", INFIX)), item), list)
buildList(tag, nodes) := nodes.fold(prependList(tag), newNil(tag))


def getFixityCode(fixity)
    match fixity
        case Nofix(_) -> NOFIX
        case Prefix(_) -> PREFIX
        case Infix(_) -> INFIX
        case Postfix(_) -> POSTFIX
        case Openfix(_) -> OPENFIX
        case Closefix(_) -> CLOSEFIX


def maybeConstructorCount(node)
    if node is Constructor(_, _, _, count, _, _)
        Just(count)
    Void


def maybeConstructorIndex(node)
    if node is Constructor(_, _, _, _, index, _)
        Just(index)
    Void


def maybeConstructorArity(node)
    if node is Constructor(_, _, _, _, _, arity)
        Just(arity)
    Void

#*
