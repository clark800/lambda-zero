#* ast.zero

DefinitionType ::= {PlainDefinition, MaybeDefinition, TryDefinition,
    SyntaxDefinition, ADTDefinition}
ArrowType ::= {Simple, Strict, Locked, Double, Squiggle}

StateT(astT, syntaxT) ::= {State(
    stack : List(astT),
    operators : List(TableT(List(ℕ), syntaxT))
)}

getStack(State(stack, _)) := stack
getOperators(State(_, operators)) := operators

SyntaxT(ast) ::= {Syntax(
    aliasName : List(ℕ),
    leftPrecedence : ℕ,
    rightPrecedence : ℕ,
    fixity : ℕ,
    associativity : ℕ,
    special : 𝔹,
    bracketType : ℕ,
    shift : (StateT(ast, SyntaxT(ast)) => ast => StateT(ast, SyntaxT(ast))),
    reduce : (ast => ast => ast => ast),
    prior : List(ℕ)
)}

getAlias(Syntax(aliasName, _, _, _, _, _, _, _, _, _)) := aliasName
getLeftPrecedence(Syntax(_, leftP, _, _, _, _, _, _, _, _)) := leftP
getRightPrecedence(Syntax(_, _, rightP, _, _, _, _, _, _, _)) := rightP
getFixity(Syntax(_, _, _, fixity, _, _, _, _, _, _)) := fixity
getAssociativity(Syntax(_, _, _, _, assoc, _, _, _, _, _)) := assoc
isSpecial(Syntax(_, _, _, _, _, special, _, _, _, _)) := special
getBracketType(Syntax(_, _, _, _, _, _, bracketType, _, _, _)) := bracketType
getShift(Syntax(_, _, _, _, _, _, _, shift, _, _)) := shift
getReduce(Syntax(_, _, _, _, _, _, _, _, reduce, _)) := reduce
getPrior(Syntax(_, _, _, _, _, _, _, _, _, prior)) := prior

AST ::= {
    Reference(tag : TagT, debruijn : ℕ),
    Arrow(tag : TagT, type : ArrowType, constructors : List(AST),
        parameter : AST, annotation : AST, body : AST),
    Juxtaposition(tag : TagT, left : AST, right : AST),
    Let(tag : TagT, isTypeConstructor : 𝔹,
        name : AST, value : AST, scope : AST),
    Number(tag : TagT, value : ℕ),
    Operator(tag : TagT, rank : ℕ, syntax' : SyntaxT(AST)),
    Definition(tag : TagT, type : DefinitionType,
        definiendum : AST, definiens : AST),
    AsPattern(tag : TagT, left : AST, pattern : AST),
    CommaPair(tag : TagT, left : AST, right : AST),
    ColonPair(tag : TagT, left : AST, right : AST),
    SetBuilder(tag : TagT, forms : List(AST)),
    ADT(tag : TagT, parameters : List(AST), objectType : AST),
    Constructor(tag : TagT, parameterTypes : List(AST), dataType : AST,
        function : AST, count : ℕ, index : ℕ),
    TypedNode(tag : TagT, type : AST, node : AST),
    Null(tag : TagT)
}


def getSyntax(operator)
    with operator as Operator(_, _, syntax')
        syntax'
    abort("internal error: getSyntax of non-operator")


def lockArrow(node)
    with node as Arrow(tag, arrowType, constructors, left, annotation, right)
        with arrowType as Simple
            Arrow(tag, Locked, constructors, left, annotation, right)
        with arrowType as Strict
            Arrow(tag, Locked, constructors, left, annotation, right)
        node
    node

def getTag
    Reference(tag, _) -> tag
    Arrow(tag, _, _, _, _, _) -> tag
    Juxtaposition(tag, _, _) -> tag
    Let(tag, _, _, _, _) -> tag
    Number(tag, _) -> tag
    Operator(tag, _, _) -> tag
    Definition(tag, _, _, _) -> tag
    AsPattern(tag, _, _) -> tag
    CommaPair(tag, _, _) -> tag
    ColonPair(tag, _, _) -> tag
    SetBuilder(tag, _) -> tag
    ADT(tag, _, _) -> tag
    Constructor(tag, _, _, _, _, _) -> tag
    TypedNode(tag, _, _) -> tag
    Null(tag) -> tag

def containsName(name)
    Reference(tag, _) -> getTagLexeme(tag) =*= getTagLexeme(getTag(name))
    Arrow(_, _, _, _, _, body) -> containsName(name, body)
    Juxtaposition(_, left, right) ->
        containsName(name, left) or containsName(name, right)
    Let(_, _, _, value, scope) ->
        containsName(name, value) or containsName(name, scope)
    Number(_, _) -> False
    Operator(_, _, _) -> False
    Definition(_, _, _, _) -> False
    AsPattern(_, _, _) -> False
    CommaPair(_, _, _) -> False
    ColonPair(_, _, right) -> containsName(name, right)
    SetBuilder(_, _) -> False
    ADT(_, _, objectType) -> containsName(name, objectType)
    Constructor(_, _, _, _, _, _) -> False
    TypedNode(_, _, _) -> False
    Null(_) -> False


def showArrow
    Simple -> " -> "
    Strict -> " -> "
    Locked -> " -> "
    Double -> " => "
    Squiggle -> " ~> "


def showAST
    Reference(tag, _) -> showTag(tag)
    Arrow(tag, arrowType, _, parameter, annotation, body) ->
        "(" ++ showAST(parameter) ++
            showArrow(arrowType) ++ showAST(body) ++ ")"
    Juxtaposition(tag, left, right) ->
        "(" ++ showAST(left) ++ " " ++ showAST(right) ++ ")"
    Let(tag, _, name, value, scope) ->
        "(" ++ showAST(name) ++ " := " ++ showAST(value) ++
            ";;" ++ showAST(scope) ++ ")"
    Number(tag, value) -> showNatural(value)
    Operator(tag, rank, rules) -> showTag(tag)
    Definition(tag, _, left, right) ->
        "(" ++ showAST(left) ++ " := " ++ showAST(right) ++ ")"
    AsPattern(tag, name, pattern) ->
        "(" ++ showAST(name) ++ ")@(" ++ showAST(pattern) ++ ")"
    CommaPair(tag, left, right) ->
        "(" ++ showAST(left) ++ ", " ++ showAST(right) ++ ")"
    ColonPair(tag, left, right) ->
        "(" ++ showAST(left) ++ " : " ++ showAST(right) ++ ")"
    SetBuilder(_, forms) -> "{" ++ forms.map(showAST).joinWith(", ") ++ "}"
    ADT(tag, parameters, objectType) ->
        showTag(tag) ++ "(" ++ parameters.map(showAST).joinWith(", ") ++ ")"
    Constructor(_, _, _, body, _, _) -> showAST(body)
    TypedNode(_, _, node) -> showAST(node)
    Null(_) -> "#NULL#"

isReference := Reference(_, _) -> True; _ -> False
isArrow := Arrow(_, _, _, _, _, _) -> True; _ -> False
isJuxtaposition := Juxtaposition(_, _, _) -> True; _ -> False
isLet := Let(_, _, _, _, _) -> True; _ -> False
isNumber := Number(_, _) -> True; _ -> False
isOperator := Operator(_, _, _) -> True; _ -> False
isDefinition := Definition(_, _, _, _) -> True; _ -> False
isAsPattern := AsPattern(_, _, _) -> True; _ -> False
isCommaPair := CommaPair(_, _, _) -> True; _ -> False
isColonPair := ColonPair(_, _, _) -> True; _ -> False
isSetBuilder := SetBuilder(_, _) -> True; _ -> False
isADT := ADT(_, _, _) -> True; _ -> False
isConstructor := Constructor(_, _, _, _, _, _) -> True; _ -> False
isTypedNode := TypedNode(_, _, _) -> True; _ -> False
isNull := Null(_) -> True; _ -> False
isSpecialOperator(op) := isOperator(op) and isSpecial(getSyntax(op))

isCase(node) := with node as Arrow(_, type, _, _, _, _);
    (type |> Locked -> False; _ -> True) <| False

Name(tag) := Reference(tag, 0)
FixedName(tag, lexeme) := Name(renameTag(tag, lexeme, NOFIX))
isName(node) := with node as Reference(_, debruijn); debruijn = 0 <| False
SimpleArrow(parameter, body) :=
    Arrow(getTag(parameter), Simple, [], parameter, Null(noTag), body)
StrictArrow(tag, constructors, body) :=
    Arrow(tag, Strict, constructors, Name(veil(tag)), Null(noTag), body)
LockedArrow(parameter, body) :=
    Arrow(getTag(parameter), Locked, [], parameter, Null(noTag), body)
DoubleArrow(left, right) :=
    Arrow(getTag(left), Double, [], left, Null(noTag), right)
ImplicitArrow(parameter, body) :=
    Arrow(getTag(parameter), Squiggle, [], parameter, Null(noTag), body)

def setAnnotation(annotation, node)
    with node as Arrow(tag, arrowType, constructors, parameter, _, body)
        Arrow(tag, arrowType, constructors, parameter, annotation, body)
    abort("can only set annotation on arrow nodes")

isSyntaxDefinition(node) := with node as Definition(_, type, _, _);
    (with type as SyntaxDefinition; True <| False) <| False
getLexeme(node) := getTagLexeme(getTag(node))
getRank := Operator(_, rank, _) -> rank; _ -> 0
showLexeme(node) := showTag(getTag(node))
isThisName(node, lexeme) := isName(node) and getLexeme(node) =*= lexeme
isThisOperator(node, lexeme) := isOperator(node) and getLexeme(node) =*= lexeme
isUnderscore(tag) := getTagLexeme(tag) =*= "_"
isUnused(tag) := getTagLexeme(tag).startsWith("_")
UnderscoreArrow(tag, body) := LockedArrow(Name(veil(tag)), body)
Underscore(tag, debruijn) := Reference(veil(tag), debruijn)
newNil(tag) := FixedName(tag, "[]")
prependList(tag, item, list) := Juxtaposition(tag,
    Juxtaposition(tag, Name(renameTag(tag, "::", INFIX)), item), list)

#*
