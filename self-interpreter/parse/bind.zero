#* bind.zero

GlobalT ::= {Global(index : ‚Ñï, ast : AST, term : Term)}

BindingT ::= {Binding(
    tag : TagT,
    closure : ClosureT(Term),
    annotation : (ClosureT(Term))?,
    isConstruct : ùîπ
)}

getGlobalIndex(Global(index, _, _)) := index
getGlobalAST(Global(_, ast, _)) := ast
getGlobalTerm(Global(_, _, term)) := term

getBindingTag(Binding(tag, _, _, _)) := tag
getBindingClosure(Binding(_, closure, _, _)) := closure
getBindingAnnotation(Binding(_, _, annotation, _)) := annotation


def pushParameter(parameter, (level, table))
    (up level, table.insert(getLexeme(parameter), level))


def newVariable(tag, negative, index, level, level')
    tag' := if level' < index then setGlobal(tag) else tag
    debruijn := level -- level'
    Variable(tag', if negative then -_ debruijn else +_ debruijn)


def bindVariable(parameters @ (level, table), index, negative, tag)
    table.lookup(getTagLexeme(tag)).mapJust(
        newVariable(tag, negative, index, level))


def bindName(getBuiltin, parameters, index, negative, tag)
    if isUnused(tag)
        syntaxError("cannot reference a symbol starting with underscore", tag)
    bindVariable(parameters, index, negative, tag) ??
        syntaxError("undefined symbol", tag)


def bindOperation(getBuiltin, tag, term)
    maybe (arity, operator) := getBuiltin(tag)
    Just(Operation(tag, term, Optimization(arity, operator)))


def getADTName(constructor)
    if constructor is Constructor(_, adtType, _, _, _, _)
        getHead(adtType)
    astSyntaxError("invalid constructor", constructor)


def findIncorrectArityConstructor(constructors, arities)
    zip(constructors, arities).find((constructor, arity) -> (
        if maybeConstructorArity(constructor) is Just(arity')
            arity =/= arity'
        True
    )).mapJust(first)


def getTypeConstructor(tag, constructors, arities)
    if isNil(constructors)
        throwError("Type error: no cases:", tag)
    if not constructors.all(isConstructor)
        throwError("Type error: invalid cases:", tag)
    adtNames := constructors.map(getADTName)
    adtLexemes := adtNames.map(getLexeme).deduplicateBy((=*=))
    counts := deduplicate(constructors.map(maybeConstructorCount).sift)
    if length(adtLexemes) =/= 1 or length(counts) =/= 1
        throwError("Type error: inconsistent cases:", tag)
    count := pop(counts) ?? throwError("Type error: invalid cases:", tag)
    indices := deduplicate(constructors.map(maybeConstructorIndex).sift)
    if length(indices) < count
        throwError("Type error: missing case:", tag)
    if length(indices) > count
        throwError("Type error: too many cases:", tag)
    if not indices =*= sort(indices)
        throwError("Type error: cases out of order:", tag)
    if findIncorrectArityConstructor(constructors, arities) is Just(constructor)
        throwError("Type error: incorrect arity for:", getTag(constructor))
    pop(adtNames) ?? throwError("Type error: invalid cases", tag)


def getConstructorFamily(tag, cases, globals)
    (constructorNames, arities) := unzip(cases)
    if constructorNames.map(getLexeme).map(`lookup(globals)).collect is
            Just(constructorGlobals)
        constructors := constructorGlobals.map(getGlobalAST)
        typeConstructor := getTypeConstructor(tag, constructors, arities)
        adtLexeme := getTagLexeme(getTag(typeConstructor))
        if globals.lookup(adtLexeme) is Just(Global(index, _, _))
            Type(getTag(typeConstructor), -_ index)
        throwError("Type error: undefined type constructor", tag)
    throwError("Type error: undefined constructor", tag)


def getNaturalName(tag, globals)
    if globals.lookup("0") is Just(Global(_, _, term))
        if term is Numeral(_, type, _)
            Name(getTermTag(type))
        syntaxError("0 must be a numeral to use numerals", tag)
    syntaxError("must define 0 before using numerals", tag)


def bind(getBuiltin, globals, index, parameters, node)
    bind' := bind(getBuiltin, globals, index, parameters)
    bind''(p) := bind(getBuiltin, globals, index, parameters.pushParameter(p))

    match node
        case Top(tag)
            Type(tag, +_ 0)
        case Family(tag)
            Type(tag, -_ index)
        case Reference(tag, debruijn)
            if abs(debruijn) > 0
                Variable(tag, debruijn)
            bindName(getBuiltin, parameters, index, isNegative(debruijn), tag)
        case Arrow(_, arrowType, cases, parameter, annotation, body)
            tag := getTag(parameter)
            if arrowType is Double
                if annotation is Just(type)
                    Implication(tag, bind'(type), body.bind''(parameter))
                astSyntaxError("missing domain", node)

            if arrowType is Tail
                domain := annotation.mapJust(bind') ?? Type(tag, +_ 0)
                Intersection(tag, domain, body.bind''(parameter))

            bodyTerm := body.bind''(parameter)
            if isNil(cases)
                domain := annotation.mapJust(bind') ?? Unknown(tag)
                Function(tag, domain, bodyTerm)
            if not isVoid(annotation)
                astSyntaxError("parameter annotation not permitted on case",
                    node)
            typeFamily := getConstructorFamily(tag, cases, globals)
            if isUnknown(typeFamily)   # force errors
                astSyntaxError("error binding pattern match", node)
            Function(tag, typeFamily, bodyTerm)
        case Juxtaposition(tag, left, right)
            Application(tag, bind'(left), bind'(right))
        case Let(tag, isConstruct, annotation, name, value, scope)
            if not isName(name)
                throwError("Internal error: non-name in let", getTag(node))
            if isConstruct
                astSyntaxError("type constructors must be at the top level",
                    node)
            domain := (if annotation is Just(type); bind'(type);; Unknown(tag))
            abstraction := Function(getTag(name), domain, scope.bind''(name))
            Application(tag, abstraction, bind'(value))
        case Number(tag, value)
            type := bind'(getNaturalName(tag, globals))
            Numeral(tag, type, value)
        case PreInference(tag)
            Inference(tag, Void)
        case PreEquation(tag, left, right)
            Equation(tag, bind'(left), bind'(right))
        case Definition(_, _, _, _)
            astSyntaxError("missing scope for definition", node)
        case AsPattern(_, _, _)
            astSyntaxError("as pattern not in valid location", node)
        case CommaPair(_, _, _)
            astSyntaxError("comma not inside brackets", node)
        case ColonPair(_, _, _)
            astSyntaxError("colon not in valid location", node)
        case SetBuilder(_, _)
            astSyntaxError("bracket not in valid location", node)
        case ADT(tag, adtParameters, body)
            arguments := adtParameters.map(bind')
            type := Variable(tag, +_ 0)  # todo
            domainTerm := Singleton(tag, type, index)
            bodyTerm := body.bind''(Name(tag))
            term := Intersection(tag, domainTerm, bodyTerm)
            Construction(tag, index, arguments, term)
        case Constructor(tag, adtType, function, count, index, arity)
            if function is Number(_, value)
                Numeral(tag, bind'(adtType), value)
            bind'(function)


def bindDefinition(getBuiltin, state, (tag, node, annotation, isConstruct))
    (bindings, parameters, globals, environment) := state
    bindNode := bind(getBuiltin, globals, getSize(environment), parameters)
    term := bindNode(node)
    # note: operations can only be defined at the top level
    definiens := bindOperation(getBuiltin, tag, term) ?? term
    closure := Closure(definiens, environment)
    annotation' := annotation.mapJust(bindNode).mapJust(`Closure(environment))
    bindings' := Binding(tag, closure, annotation', isConstruct) :: bindings

    parameters' := parameters.pushParameter(Name(tag))
    (index, environment') := environment.append(closure)
    global := Global(index, node, definiens)
    globals' := globals.insert(getTagLexeme(tag), global)
    (bindings', parameters', globals', environment')


def getDefinitions(node)
    if node is Let(tag, isConstruct, annotation, name, value, scope)
        (getTag(name), value, annotation, isConstruct) :: getDefinitions(scope)
    [(veil(getTag(node)), node, Void, False)]


def bindAST(getBuiltin, node)
    # TODO: make state a parameter so we can bind with an existing state
    parameters := (0, newDictionary([]))
    state := ([], parameters, newDictionary([]), newArray([]))
    state' := getDefinitions(node).cascade(bindDefinition(getBuiltin), state)
    (bindings, _parameters, _globals, _environment) := state'
    bindings  # top level bindings in reverse order

#*
