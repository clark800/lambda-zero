#@ bind.zero

GlobalT ::= {Global(index : ‚Ñï, ast : AST, term : Term)}

BindingT ::= {Binding(
    tag : TagT,
    closure : ClosureT(Term),
    annotation : (ClosureT(Term))?,
    isConstruct : ùîπ
)}

getGlobalIndex(Global(index, _, _)) := index
getGlobalAST(Global(_, ast, _)) := ast
getGlobalTerm(Global(_, _, term)) := term

getBindingTag(Binding(tag, _, _, _)) := tag
getBindingClosure(Binding(_, closure, _, _)) := closure
getBindingAnnotation(Binding(_, _, annotation, _)) := annotation


def pushParameter(parameter, (level, table))
    (up level, table.insert(getLexeme(parameter), level))


def newVariable(tag, negative, index, level, level')
    tag' := if level' < index then setGlobal(tag) else tag
    debruijn := level -- level'
    Variable(tag', if negative then -_ debruijn else +_ debruijn)


def bindVariable(parameters @ (level, table), index, negative, tag)
    table.lookup(getTagLexeme(tag)).mapJust(
        newVariable(tag, negative, index, level))


def bindName(getBuiltin, parameters, index, negative, tag)
    if isUnused(tag)
        error showSyntaxError(
            "cannot reference a symbol starting with underscore", tag)
    bindVariable(parameters, index, negative, tag) ?!
        showSyntaxError("undefined symbol", tag)


def bindOperation(getBuiltin, tag, term)
    maybe (arity, operator) := getBuiltin(tag)
    Just(Operation(tag, term, Optimization(arity, operator)))


def getADTName(constructor)
    if constructor is Constructor(_, adtName, _, _, _, _)
        return adtName
    error showAstSyntaxError("invalid constructor", constructor)


def findIncorrectArityConstructor(constructors, arities)
    zip(constructors, arities).find((constructor, arity) -> (
        if maybeConstructorArity(constructor) is Just(arity')
            arity =/= arity'
        True
    )).mapJust(first)


def getTypeConstructor(tag, constructors, arities)
    if isNil(constructors)
        error showError("Type error: no cases:", tag)
    if not constructors.all(isConstructor)
        error showError("Type error: invalid cases:", tag)
    try adtNames := constructors.tryMap(getADTName)
    adtLexemes := adtNames.map(getLexeme).deduplicateBy((=*=))
    counts := deduplicate(constructors.map(maybeConstructorCount).sift)
    if length(adtLexemes) =/= 1 or length(counts) =/= 1
        error showError("Type error: inconsistent cases:", tag)
    try count := pop(counts) ?! showError("Type error: invalid cases:", tag)
    indices := deduplicate(constructors.map(maybeConstructorIndex).sift)
    if length(indices) < count
        error showError("Type error: missing case:", tag)
    if length(indices) > count
        error showError("Type error: too many cases:", tag)
    if not indices =*= sort(indices)
        error showError("Type error: cases out of order:", tag)
    if findIncorrectArityConstructor(constructors, arities) is Just(constructor)
        error showError("Type error: incorrect arity for:", getTag(constructor))
    pop(adtNames) ?! showError("Type error: invalid cases", tag)


def getConstructorFamily(tag, cases, globals)
    (constructorNames, arities) := unzip(cases)
    if constructorNames.map(getLexeme).map(`lookup(globals)).collect is
            Just(constructorGlobals)
        constructors := constructorGlobals.map(getGlobalAST)
        try typeConstructor := getTypeConstructor(tag, constructors, arities)
        adtLexeme := getTagLexeme(getTag(typeConstructor))
        if globals.lookup(adtLexeme) is Just(Global(index, _, _))
            return Type(getTag(typeConstructor), -_ index)
        error showError("Type error: undefined type constructor", tag)
    error showError("Type error: undefined constructor", tag)


def getNaturalName(tag, globals)
    if globals.lookup("0") is Just(Global(_, _, term))
        if term is Numeral(_, type, _)
            return Just(Name(getTermTag(type)))
        error showSyntaxError("0 must be a numeral to use numerals", tag)
    #syntaxError("must define 0 before using numerals", tag)
    return Void  # allow using numerals before defining zero for now


def bind(getBuiltin, globals, index, parameters, node)
    bind' := bind(getBuiltin, globals, index, parameters)
    bind''(p) := bind(getBuiltin, globals, index, parameters.pushParameter(p))

    match node
        case Top(tag)
            return Type(tag, +_ 0)
        case Family(tag)
            return Type(tag, -_ index)
        case Reference(tag, debruijn)
            if abs(debruijn) > 0
                return Variable(tag, debruijn)
            bindName(getBuiltin, parameters, index, isNegative(debruijn), tag)
        case Arrow(_, arrowType, cases, parameter, annotation, body)
            tag := getTag(parameter)
            if arrowType is Double
                if annotation is Just(type)
                    try domain := bind'(type)
                    try bodyTerm := body.bind''(parameter)
                    return Implication(tag, domain, bodyTerm)
                error showAstSyntaxError("missing domain", node)

            if arrowType is Tail
                try domain := bind'(annotation ?? Top(tag))
                try bodyTerm := body.bind''(parameter)
                return Intersection(tag, domain, bodyTerm)

            try bodyTerm := body.bind''(parameter)
            if isNil(cases)
                if annotation is Just(type)
                    try domain := bind'(type)
                    return Abstraction(tag, domain, bodyTerm)
                return Abstraction(tag, Unknown(tag), bodyTerm)
            if not isVoid(annotation)
                error showAstSyntaxError(
                    "parameter annotation not permitted on case", node)
            try typeFamily := getConstructorFamily(tag, cases, globals)
            return Abstraction(tag, typeFamily, bodyTerm)
        case Juxtaposition(tag, left, right)
            try leftTerm := bind'(left)
            try rightTerm := bind'(right)
            return Application(tag, leftTerm, rightTerm)
        case Let(tag, isConstruct, annotation, name, value, scope)
            if not isName(name)
                error showInternalError("non-name in let", getTag(node))
            if isConstruct
                error showAstSyntaxError(
                    "type constructors must be at the top level", node)
            try domain := (
                if annotation is Just(type)
                    bind'(type)
                return Unknown(tag)
            )
            try bodyTerm := scope.bind''(name)
            abstraction := Abstraction(getTag(name), domain, bodyTerm)
            try rightTerm := bind'(value)
            return Application(tag, abstraction, rightTerm)
        case Number(tag, value)
            try naturalName := getNaturalName(tag, globals)
            try type := naturalName.tryMapJust(bind')
            # Numeral type is a hack to allow using naturals before definition
            return Numeral(tag, type ?? Numeral(tag, Type(tag, +_ 0), 0), value)
        case PreInference(tag)
            return Inference(tag, Void)
        case PreEquation(tag, left, right)
            try leftTerm := bind'(left)
            try rightTerm := bind'(right)
            return Equation(tag, leftTerm, rightTerm)
        case Definition(_, _, _, _)
            error showAstSyntaxError("missing scope for definition", node)
        case AsPattern(_, _, _)
            error showAstSyntaxError("as pattern not in valid location", node)
        case CommaPair(_, _, _)
            error showAstSyntaxError("comma not inside brackets", node)
        case ColonPair(_, _, _)
            error showAstSyntaxError("colon not in valid location", node)
        case SetBuilder(_, _)
            error showAstSyntaxError("bracket not in valid location", node)
        case ADT(tag, adtParameters, body)
            try arguments := adtParameters.tryMap(bind')
            type := Variable(tag, +_ 0)  # todo
            domainTerm := Singleton(tag, type, index)
            try bodyTerm := body.bind''(Name(tag))
            term := Intersection(tag, domainTerm, bodyTerm)
            return Construction(tag, index, arguments, term)
        case For(_, _, _)
            error showAstSyntaxError("not in valid location", node)
        case Constructor(tag, adtName, function, count, index, arity)
            if function is Number(_, value)
                try type := bind'(adtName)
                return Numeral(tag, type, value)
            bind'(function)


def bindDefinition(getBuiltin, state, (tag, node, annotation, isConstruct))
    (bindings, parameters, globals, environment) := state
    bindNode := bind(getBuiltin, globals, getSize(environment), parameters)
    try term := bindNode(node)
    # note: operations can only be defined at the top level
    definiens := bindOperation(getBuiltin, tag, term) ?? term
    closure := Closure(definiens, environment)
    try annotationTerm := annotation.tryMapJust(bindNode)
    annotation' := annotationTerm.mapJust(`Closure(environment))
    bindings' := Binding(tag, closure, annotation', isConstruct) :: bindings

    parameters' := parameters.pushParameter(Name(tag))
    (index, environment') := environment.append(closure)
    global := Global(index, node, definiens)
    globals' := globals.insert(getTagLexeme(tag), global)
    return (bindings', parameters', globals', environment')


def getDefinitions(node)
    if node is Let(tag, isConstruct, annotation, name, value, scope)
        (getTag(name), value, annotation, isConstruct) :: getDefinitions(scope)
    [(veil(getTag(node)), node, Void, False)]


def bindAST(getBuiltin, node)
    # TODO: make state a parameter so we can bind with an existing state
    parameters := (0, newDictionary([]))
    state := ([], parameters, newDictionary([]), newArray([]))
    bindDefinition' := bindDefinition(getBuiltin)
    try state' := getDefinitions(node).tryCascade(bindDefinition', state)
    (bindings, _parameters, _globals, _environment) := state'
    return bindings  # top level bindings in reverse order

#@
