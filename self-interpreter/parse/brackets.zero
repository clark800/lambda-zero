#* brackets.zero

def applyToCommaList(tag, base, arguments)
    with arguments as CommaPair(_, left, right)
        Juxtaposition(tag, applyToCommaList(tag, base, left), right)
    Juxtaposition(tag, base, arguments)


def getCommaListSize(commaList)
    with commaList as CommaPair(_, left, _)
        getCommaListSize(left) + 1
    1


def newTuple(tag, commaList)
    n := getCommaListSize(commaList)
    lexeme := repeat(',').take(n -- 1)
    constructor := FixedName(tag, lexeme)
    applyToCommaList(tag, constructor, commaList)


def getCommaListElements(commaList)
    with commaList as CommaPair(_, left, right)
        getCommaListElements(left) ++ [right]
    [commaList]


def reduceParentheses(tag, left, right)
    with right as Just(contents)
        if isDefinition(contents)
            syntaxError("missing scope for definition", contents)
        with left as Just(function)
            applyToCommaList(tag, function, contents)
        if isCommaPair(contents)
            newTuple(tag, contents)
        if isArrow(contents)
            lockArrow(contents)
        with contents as Juxtaposition(_, left, right)
            Juxtaposition(tag, left, right)
        contents
    unit := FixedName(tag, "()")
    with left as Just(function)
        Juxtaposition(tag, function, unit)
    unit


def isPlaceholder(node)
    isThisName(node, "*.") or isThisName(node, ".*")


def reduceOpenSection(tag, left, right)
    if not isVoid(left)
        parseError("invalid operand before section", tag)
    with right as Just(contents)
        with contents as Juxtaposition(_, left', right')
            # check for parenthesized adfix operator
            if isName(left') and isPlaceholder(right')
                left'
            # check for parenthesized infix operator
            with left' as Juxtaposition(_, left'', right'')
                if isThisName(right', "*.") and isThisName(right'', ".*") and
                    isName(left'') then left'' else pass
            LockedArrow(FixedName(tag, ".*"), contents)
        if isCommaPair(contents)
            parseError("comma invalid in section", tag)
        pass
    parseError("invalid section", tag)


def reduceCloseSection(tag, left, contents)
    # force evaluation of contents first in case it has an error
    if isTuple(contents)
        parseError("comma invalid in section", tag)
    if not isVoid(left)
        parseError("invalid operand before section", tag)
    # check for parenthesized operator
    if isName(contents)
        contents
    with contents as Juxtaposition(_, left', right')
        # check for parenthesized adfix operator
        if isName(left') and isPlaceholder(right')
            left'
        LockedArrow(FixedName(tag, "*."), contents)
    parseError("invalid section", tag)


def createList(tag, commaList, list)
    with commaList as CommaPair(_, left, right)
        createList(tag, left, prependList(tag, right, list))
    prependList(tag, commaList, list)


def reduceSquare(tag, left, right)
    with right as Just(contents)
        with left as Just(before)
            n := getCommaListSize(contents)
            constructor := FixedName(tag, repeat('[').take(n))
            base := Juxtaposition(tag, constructor, before)
            applyToCommaList(tag, base, contents)
        createList(tag, contents, newNil(tag))
    if isVoid(left)
        newNil(tag)
    parseError("missing argument to", tag)


def reduceCurly(tag, left, right)
    if not isVoid(left)
        parseError("invalid operand before", tag)
    with right as Just(patterns)
        SetBuilder(tag, getCommaListElements(patterns))
    SetBuilder(tag, [])


def reduceOpenFile(tag, left, right)
    if not isVoid(left)
        parseError("invalid operand before", tag)
    with right as Just(contents)
        contents
    parseError("no input", tag)

#*
