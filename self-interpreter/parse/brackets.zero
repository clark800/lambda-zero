#* brackets.zero

def applyToCommaList(tag, base, arguments)
    if arguments is CommaPair(_, left, right)
        Juxtaposition(tag, applyToCommaList(tag, base, left), right)
    Juxtaposition(tag, base, arguments)


def getCommaListSize(commaList)
    if commaList is CommaPair(_, left, _)
        getCommaListSize(left) + 1
    1


def newTuple(tag, commaList)
    n := getCommaListSize(commaList)
    lexeme := repeat(',').take(n -- 1)
    constructor := FixedName(tag, lexeme)
    applyToCommaList(tag, constructor, commaList)


def getCommaListElements(commaList)
    if commaList is CommaPair(_, left, right)
        getCommaListElements(left) ++ [right]
    [commaList]


def reduceParentheses(tag, left, right)
    if right is Just(contents)
        if isDefinition(contents)
            astSyntaxError("missing scope for definition", contents)
        if left is Just(function)
            applyToCommaList(tag, function, contents)
        if isCommaPair(contents)
            newTuple(tag, contents)
        if isArrow(contents)
            lockArrow(contents)
        if contents is Juxtaposition(_, left, right)
            Juxtaposition(tag, left, right)
        contents
    if left is Void
        FixedName(tag, "()")
    syntaxError("missing argument to", tag)


def isPlaceholder(node)
    isThisName(node, "*.") or isThisName(node, ".*")


def reduceOpenSection(tag, left, right)
    if not isVoid(left)
        syntaxError("invalid operand before section", tag)
    if right is Just(contents)
        if contents is Juxtaposition(_, left', right')
            # check for parenthesized adfix operator
            if isName(left') and isPlaceholder(right')
                left'
            # check for parenthesized infix operator
            if left' is Juxtaposition(_, left'', right'')
                if isThisName(right', "*.") and isThisName(right'', ".*") and
                    isName(left'') then left'' else pass
            LockedArrow(FixedName(tag, ".*"), contents)
        if isCommaPair(contents)
            syntaxError("comma invalid in section", tag)
        pass
    syntaxError("invalid section", tag)


def reduceCloseSection(tag, left, contents)
    # force evaluation of contents first in case it has an error
    if isTuple(contents)
        syntaxError("comma invalid in section", tag)
    if not isVoid(left)
        syntaxError("invalid operand before section", tag)
    # check for parenthesized operator
    if isName(contents)
        contents
    if contents is Juxtaposition(_, left', right')
        # check for parenthesized adfix operator
        if isName(left') and isPlaceholder(right')
            left'
        LockedArrow(FixedName(tag, "*."), contents)
    syntaxError("invalid section", tag)


def createList(tag, commaList, list)
    if commaList is CommaPair(_, left, right)
        createList(tag, left, prependList(tag, right, list))
    prependList(tag, commaList, list)


def reduceSquare(tag, left, right)
    if right is Just(contents)
        if left is Just(before)
            n := getCommaListSize(contents)
            constructor := FixedName(tag, repeat('[').take(n))
            base := Juxtaposition(tag, constructor, before)
            applyToCommaList(tag, base, contents)
        createList(tag, contents, newNil(tag))
    if left is Void
        newNil(tag)
    syntaxError("missing argument to", tag)


def reduceCurly(tag, left, right)
    if not isVoid(left)
        syntaxError("invalid operand before", tag)
    if right is Just(patterns)
        SetBuilder(tag, getCommaListElements(patterns))
    SetBuilder(tag, [])


def reduceOpenFile(tag, left, right)
    if not isVoid(left)
        syntaxError("invalid operand before", tag)
    if right is Just(contents)
        contents
    syntaxError("no input", tag)

#*
