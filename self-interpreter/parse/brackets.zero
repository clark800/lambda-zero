#* brackets.zero

def applyToCommaList(tag, base, arguments)
    with arguments as CommaPair(_, left, right)
        Juxtaposition(tag, applyToCommaList(tag, base, left), right)
    Juxtaposition(tag, base, arguments)

def getCommaListSize(commaList)
    with commaList as CommaPair(_, left, _)
        getCommaListSize(left) + 1
    1

def newTuple(tag, commaList)
    n := getCommaListSize(commaList)
    lexeme := repeat(',').take(n -- 1)
    constructor := FixedName(tag, lexeme)
    applyToCommaList(tag, constructor, commaList)

def getCommaListElements(commaList)
    if isNull(commaList) then []
    with commaList as CommaPair(_, left, right)
        getCommaListElements(left) ++ [right]
    [commaList]

def reduceUnmatched(open, _left, _right)
    syntaxError("missing close for", open)

def reduceParentheses(open, function, contents)
    if not isThisOperator(open, "(")
        syntaxError("missing close for", open)
    tag := getTag(open)
    if isNull(contents)
        unit := FixedName(tag, "()")
        if isNull(function)
            unit
        Juxtaposition(tag, function, unit)
    if isDefinition(contents)
        syntaxError("missing scope for definition", contents)
    if not isNull(function)
        applyToCommaList(tag, function, contents)
    if isCommaPair(contents)
        newTuple(tag, contents)
    if isArrow(contents)
        lockArrow(contents)
    with contents as Juxtaposition(_, left, right)
        Juxtaposition(tag, left, right)
    contents

def reduceOpenSection(open, before, contents)
    if not isNull(before)
        syntaxError("invalid operand before section", open)
    if isCommaPair(contents)
        syntaxError("comma invalid in section", open)
    if not isJuxtaposition(contents)
        syntaxError("invalid section", open)
    with contents as Juxtaposition(_, left, right)
        # check for parenthesized adfix operator
        if isName(left) and (isThisName(right, "*.") or isThisName(right, ".*"))
            left
        # check for parenthesized infix operator
        with left as Juxtaposition(_, left', right')
            if isThisName(right, "*.") and isThisName(right', ".*") and
                isName(left') then left' else pass
        pass
    LockedArrow(FixedName(getTag(open), ".*"), contents)

def reduceCloseSection(close, before, contents)
    if not isNull(before)
        syntaxError("invalid operand before section", close)
    if isTuple(contents)
        syntaxError("comma invalid in section", close)
    if not isJuxtaposition(contents) and not isName(contents)
        syntaxError("invalid section", close)
    # check for parenthesized adfix operator
    with contents as Juxtaposition(_, left, right)
        if isName(left) and (isThisName(right, "*.") or isThisName(right, ".*"))
            left
        pass
    # check for parenthesized operator
    if isName(contents)
        contents
    LockedArrow(FixedName(getTag(close), "*."), contents)

def createList(tag, commaList, list)
    with commaList as CommaPair(_, left, right)
        createList(tag, left, prependList(tag, right, list))
    prependList(tag, commaList, list)

def reduceSquare(open, left, contents)
    if not isThisOperator(open, "[")
        syntaxError("missing close for", open)
    tag := getTag(open)
    if isNull(contents)
        if isNull(left)
            newNil(tag)
        syntaxError("missing argument to", open)
    if not isNull(left)
        n := getCommaListSize(contents)
        constructor := FixedName(tag, repeat('[').take(n))
        applyToCommaList(tag, Juxtaposition(tag, constructor, left), contents)
    createList(tag, contents, newNil(tag))

def reduceCurly(open, left, patterns)
    if not isNull(left)
        syntaxError("missing space before", open)
    if not isThisOperator(open, "{")
        syntaxError("missing close for", open)
    SetBuilder(getTag(open), getCommaListElements(patterns))

def reduceOpenFile(open, left, contents)
    if not isNull(left)
        syntaxError("invalid operand before", open)
    contents

def shiftOpen(state, open)
    _ @ State(stack, operators, onReduce) := reduceLeft(state, open)
    State(open :: stack, operators, onReduce)

def isOpenOperator(operator)
    with operator as Operator(_, _, syntax')
        getFixity(syntax') = OPENFIX
    False

def pushBracket(stack, open, close, contents)
    with stack as left :: stack'
        if not isOperator(left)
            reduceBracket(open, close, left, contents) :: stack'
        reduceBracket(open, close, Null(getTag(open)), contents) :: stack
    [reduceBracket(open, close, Null(getTag(open)), contents)]

def shiftClose(state, close)
    _ @ State(stack, operators, onReduce) := reduceLeft(state, close)
    with stack as contents :: stack'
        if isOpenOperator(contents)
            open := contents
            stack'' := pushBracket(stack', open, close, Null(getTag(open)))
            onReduce(State(stack'', operators, onReduce))
        with stack' as open :: stack''
            if isOperator(contents)
                syntaxError("missing right operand for", contents)
            stack''' := pushBracket(stack'', open, close, contents)
            onReduce(State(stack''', operators, onReduce))
        syntaxError("missing open for", close)
    syntaxError("missing open for", close)

#*
