#* define.zero

def isTupleConstructor(node)
    isName(node) and getLexeme(node).startsWith(",")


def isTuple(node)
    if node is Juxtaposition(_, left, _)
        isTuple(left)
    isTupleConstructor(node)


def applyPlainDefinition(tag, name, value, scope)
    if isName(name)
        Let(tag, False, Void, name, value, scope)
    Juxtaposition(tag, newPatternArrow(name, scope), value)


def newConstructDefinition(tag, type, name, value, scope)
    Let(tag, True, type, name, value, scope)


def applyMaybeDefinition(tag, name, value, scope)
    Juxtaposition(tag, Juxtaposition(tag, FixedName(tag, "onJust"),
        newPatternArrow(name, scope)), value)


def applyTryDefinition(tag, name, value, scope)
    Juxtaposition(tag, Juxtaposition(tag, FixedName(tag, "onRight"),
        newPatternArrow(name, scope)), value)


def applyBindDefinition(tag, name, value, scope)
    # name <- value;; scope ==> value >> (name -> scope)
    Juxtaposition(tag, Juxtaposition(tag, FixedName(tag, ">>"), value),
        newPatternArrow(name, scope))


def applyFix(name, value)
    tag := getTag(name)
    Juxtaposition(tag, FixedName(tag, "fix"), LockedArrow(name, value))


def transformRecursion(name, value)
    if not isName(name) or not isArrow(value) or not containsName(name, value)
        value
    applyFix(name, value)


def isValidPattern(node)
    if isName(node)
        True
    if node is ColonPair(_, left, _)
        isValidPattern(left)
    if node is Juxtaposition(_, left, right)
        isValidPattern(left) and isValidPattern(right)
    if node is Arrow(_, arrowType, _, left, _, right)
        if arrowType is Double
            isValidPattern(left) and isValidPattern(right)
        False
    False


def isValidConstructorParameter(parameter)
    if parameter is ColonPair(_, left, right)
        isName(left) and isValidPattern(right)
    False


def removeAnnotation(node)
    if node is ColonPair(_, left, _)
        left
    node


def getParameterType(parameter)
    if parameter is ColonPair(_, _, type)
        type
    astSyntaxError("constructor parameter must be annotated", parameter)


def newReconstructorType(parameterTypeASTs, returnTypeAST)
    if parameterTypeASTs is parameterTypeAST :: parameterTypeASTs'
        bodyTypeAST := newReconstructorType(parameterTypeASTs', returnTypeAST)
        DoubleArrow(parameterTypeAST, bodyTypeAST)
    returnTypeAST


def isValidConstructorAnnotation(dataType, annotation)
    (adtName, parameters) := splitArguments(dataType)
    (name, arguments) := splitArguments(annotation)
    length(arguments) = length(parameters) and
        isThisName(name, getLexeme(adtName))


def getConstructorType'(adtType, form)
    if isArrow(form)    # only forall arrows can make it here
        form.mapArrowBody(getConstructorType'(adtType))
    # check for GADT annotation of constructor return type
    if form is ColonPair(_, form', dataType)
        if not isValidConstructorAnnotation(adtType, dataType)
            astSyntaxError("inconsistent annotation form", dataType)
        parameterTypes := getArguments(form').map(getParameterType)
        newReconstructorType(parameterTypes, dataType)
    parameterTypes := getArguments(form).map(getParameterType)
    newReconstructorType(parameterTypes, adtType)


def getConstructorType(adtType, form)
    type := getConstructorType'(adtType, form)
    getArguments(adtType).fold(TailArrow, type)


def getConstructorFunction(name, parameters, n, j)
    # n is the number of forms and j is the index of this form in 0..n
    tag := getTag(name)
    if name is Number(tag, value)
        if value =/= 0
            astSyntaxError("invalid constructor name", name)
        Number(tag, 0)
    if not isName(name)
        astSyntaxError("invalid constructor name", name)

    m := length(parameters)
    arguments := reverse(n + 1 .. n + m).map(Underscore(tag))
    base := arguments.cascade(Juxtaposition(tag), Underscore(tag, n -- j))
    # wrap with arrows for each constructor case
    construct := (UnderscoreArrow(tag)^<>(n))(base)
    # wrap with arrows for each parameter for this constructor
    parameters.fold(LockedArrow, construct)


def peelTailArrows(form)
    if form is Arrow(_, type, _, _, _, body)
        if type is Tail
            peelTailArrows(body)
        form
    form


def newConstructorDefinition(tag, adtType, n, (form, j), scope)
    (name, parameters) := splitArguments(removeAnnotation(peelTailArrows(form)))
    invalidParameters := parameters.filter((not) <> isValidConstructorParameter)
    if invalidParameters is parameter :: _
        astSyntaxError("invalid constructor parameter", parameter)

    # when defining a constructor term, the ADT parameters are not in scope,
    # since they are only defined as implicits in the annotation
    # at the type level, not the term level. we erase the annotations to avoid
    # undefined symbols errors during bind.
    parameters' := parameters.map(removeAnnotation)
    function := getConstructorFunction(name, parameters', n, j)
    if not isPreterm(function)
        astSyntaxError("invalid constructor", name)   # force errors
    type := getConstructorType(adtType, form)
    arity := length(parameters)
    constructor := Constructor(getTag(name), adtType, function, n, j + 1, arity)
    name' := Name(getTag(name))
    newConstructDefinition(tag, Just(type), name', constructor, scope)


def newFallbackCase(tag, m)
    fallback := Underscore(tag, m + 2)
    instance := Underscore(tag, m + 1)
    body := Juxtaposition(tag, fallback, instance)
    (1 .. m).cascade(b -> _ -> UnderscoreArrow(tag, b), body)


def newDeconstructorType(tag, parameterTypeASTs, adtTypeAST)
    # todo: change name from "r" so it can't clash with user's names
    returnType := FixedName(tag, "r")
    reconstructorType := newReconstructorType(parameterTypeASTs, returnType)
    syntax(=>>) := syntax(++)
    (=>>) := DoubleArrow
    fallbackType := adtTypeAST =>> returnType
    typeAST := reconstructorType =>> fallbackType =>> adtTypeAST =>> returnType
    parameters := getArguments(adtTypeAST)
    TailArrow(returnType, parameters.fold(TailArrow, typeAST))


def getDeconstructorType(tag, adtType, form)
    if isArrow(form)    # only forall arrows can make it here
        form.mapArrowBody(getDeconstructorType(tag, adtType))
    parameters := getArguments(removeAnnotation(form))
    parameterTypes := parameters.map(getParameterType)
    newDeconstructorType(tag, parameterTypes, adtType)


def newDeconstructorFunction(tag, n, ms, j)
    reconstructor := Underscore(tag, 3)
    arguments := (1 .. n).map(k -> if k -- 1 = j then reconstructor else
        newFallbackCase(tag, ms.at(k -- 1) ?? 0))
    body := arguments.cascade(Juxtaposition(tag), Underscore(tag, 1))
    UnderscoreArrow(tag, UnderscoreArrow(tag, UnderscoreArrow(tag, body)))


def newDeconstructorDefinition(tag, adtType, n, ms, (form, j), scope)
    constructorTag := getTag(getHead(removeAnnotation(peelTailArrows(form))))
    name := Name(addPrefix(constructorTag, '@'))
    deconstructor := newDeconstructorFunction(constructorTag, n, ms, j)
    type := getDeconstructorType(constructorTag, adtType, form)
    newConstructDefinition(tag, Just(type), name, deconstructor, scope)


def newConstructorDefinitions(tag, adtType, n, ms, formj, scope)
    # define deconstructor first in case the constructor name is the same
    # as the ADT name: this ensures that we always bind the ADT name
    scope' := newConstructorDefinition(tag, adtType, n, formj, scope)
    newDeconstructorDefinition(tag, adtType, n, ms, formj, scope')


def getCaseType(returnType, form)
    if isArrow(form)    # only forall arrows can make it here
        form.mapArrowBody(getCaseType(returnType))
    annotations := getArguments(removeAnnotation(form)).map(getParameterType)
    annotations.fold(DoubleArrow, returnType)


def getObjectType(tag, forms)
    # todo: change name from "r" so it can't clash with user's names
    returnType := FixedName(tag, "r")
    caseTypes := forms.map(getCaseType(returnType))
    TailArrow(returnType, caseTypes.fold(DoubleArrow, returnType))


def newADT(tag, parameters, forms)
    type := parameters.fold(DoubleArrow, Family(tag))
    body := getObjectType(tag, forms)
    ADT(tag, parameters, type, body)


def defineConstructorsAndDeconstructors(tag, adtType, forms, scope)
    n := length(forms)
    ms := forms.map(length <> getArguments)
    zip(forms, 0...).fold(newConstructorDefinitions(tag, adtType, n, ms), scope)


def applyADTDefinition(tag, left, right, scope)
    if right is SetBuilder(_, forms)
        (name, parameters) := splitArguments(left)
        scope' := defineConstructorsAndDeconstructors(tag, left, forms, scope)
        if not isName(name)
            astSyntaxError("expected name", name)
        # todo: use the same method for parameters as with normal functions
        if not parameters.all(isName)
            astSyntaxError("parameters to type constructor must be names", name)
        adt := newADT(getTag(name), parameters, forms)
        value := parameters.fold(LockedArrow, adt)
        newConstructDefinition(tag, Void, name, value, scope')
    astSyntaxError("internal error", left)


def applyDefinition(definition, scope)
    if definition is Definition(tag, type, name, value)
        match type
            PlainDefinition -> applyPlainDefinition(tag, name, value, scope)
            MaybeDefinition -> applyMaybeDefinition(tag, name, value, scope)
            TryDefinition -> applyTryDefinition(tag, name, value, scope)
            SyntaxDefinition -> scope
            ADTDefinition -> applyADTDefinition(tag, name, value, scope)
            BindDefinition -> applyBindDefinition(tag, name, value, scope)
    astSyntaxError("internal error", definition)


def reduceDefine'(tag, definitionType, left, right)
    if isTuple(left) or isAsPattern(left)
        Definition(tag, definitionType, left, right)
    (name, parameters) := splitArguments(left)
    value := parameters.fold(newPatternArrow, right)
    if not isName(name)
        syntaxError("invalid left hand side", tag)
    if isThisName(name, "main")
        applyPlainDefinition(tag, name, value, name)
    Definition(tag, definitionType, name, transformRecursion(name, value))


def reduceDefine(tag, left, right)
    if isDefinition(right)   # todo: remove after converting exceptions
        astSyntaxError("missing scope for definition", right)
    if left is Juxtaposition(_, left', right')
        if isThisName(left', "maybe")
            reduceDefine'(tag, MaybeDefinition, right', right)
        if isThisName(left', "try")
            reduceDefine'(tag, TryDefinition, right', right)
        if isThisName(left', "syntax")
            reduceDefine'(tag, SyntaxDefinition, right', right)
        reduceDefine'(tag, PlainDefinition, left, right)
    reduceDefine'(tag, PlainDefinition, left, right)


def reduceADTDefine(tag, left, right)
    if not isValidPattern(left)
        syntaxError("invalid left hand side", tag)
    if not isSetBuilder(right)
        syntaxError("ADT required to right of", tag)
    Definition(tag, ADTDefinition, left, right)

#*
