#@ define.zero

def isTupleConstructor(node)
    isName(node) and getLexeme(node).startsWith(",")


def isTuple(node)
    if node is Juxtaposition(_, left, _)
        isTuple(left)
    isTupleConstructor(node)


def applyPlainDefinition(tag, left, value, scope)
    if isName(left)
        Let(tag, False, [], left, value, scope)
    if left is ColonPair(_, name, annotation)
        if isName(name)
            Let(tag, False, [annotation], name, value, scope)
        pass
    Juxtaposition(tag, newArrow(left, scope), value)


def newConstructDefinition(tag, type, name, value, scope)
    Let(tag, True, type, name, value, scope)


def applyMaybeDefinition(tag, name, value, scope)
    Juxtaposition(tag, Juxtaposition(tag, FixedName(tag, "onJust"),
        newArrow(name, scope)), value)


def applyTryDefinition(tag, name, value, scope)
    Juxtaposition(tag, Juxtaposition(tag, FixedName(tag, "onRight"),
        newArrow(name, scope)), value)


def applyBindDefinition(tag, name, value, scope)
    # name <- value; scope ==> value >> (name -> scope)
    Juxtaposition(tag, Juxtaposition(tag, FixedName(tag, ">>"), value),
        newArrow(name, scope))


def applyTryBindDefinition(tag, name, value, scope)
    Juxtaposition(tag, Juxtaposition(tag, FixedName(tag, "onRightState"),
        newArrow(name, scope)), value)


def applyFix(name, value)
    tag := getTag(name)
    Juxtaposition(tag, FixedName(tag, "fix"), SingleArrow(name, value))


# only works on preterms
def containsFreeName(name)
    case Top(_) -> False
    case Family(_) -> False
    case Reference(tag, _) -> isThisLexeme(name, getTagLexeme(tag))
    case Arrow(_, _, _, parameter, _, body) ->
        not isSameLexeme(parameter, name) and body.containsFreeName(name)
    case Juxtaposition(_, left, right) ->
        left.containsFreeName(name) or right.containsFreeName(name)
    case Let(_, _, _, name', value, scope) ->
        not isSameLexeme(name', name) and
            (value.containsFreeName(name) or scope.containsFreeName(name))
    case Number(_, _) -> False
    case PreInference(_) -> False
    case PreEquation(_, left, right) ->
        left.containsFreeName(name) or right.containsFreeName(name)
    case Definition(_, _, _, _) -> False
    case AsPattern(_, _, _) -> False
    case CommaPair(_, left, right) ->
        left.containsFreeName(name) or right.containsFreeName(name)
    case ColonPair(_, _, right) -> right.containsFreeName(name)
    case SetBuilder(_, forms) -> False
    case ADT(_, _, body) -> body.containsFreeName(name)
    case For(_, left, right) -> False
    case Constructor(_, _, _, _, _, _) -> False


def transformRecursion(name, value)
    if not isName(name) or not isArrow(value) or
            not containsFreeName(name, value)
        value
    applyFix(name, value)


def isValidPattern(node)
    if isName(node)
        True
    if node is ColonPair(_, left, _)
        isValidPattern(left)
    if node is Juxtaposition(_, left, right)
        isValidPattern(left) and isValidPattern(right)
    if node is Arrow(_, arrowType, _, left, _, right)
        if arrowType is Double
            isValidPattern(left) and isValidPattern(right)
        False
    False


def isValidConstructorParameter(parameter)
    if parameter is ColonPair(_, left, right)
        isName(left) and isValidPattern(right)
    False


def removeAnnotation(node)
    if node is ColonPair(_, left, _)
        left
    node


def removeAnnotations(form)
    (name, parameters) := splitArguments(form)
    parameterNames := parameters.map(removeAnnotation)
    parameterNames.cascade(Juxtaposition(getTag(name)), name)


def getParameterType(parameter)
    if parameter is ColonPair(_, _, type)
        type
    astSyntaxError("invalid constructor parameter", parameter)


def isValidConstructorAnnotation(dataType, annotation)
    (adtName, parameters) := splitArguments(dataType)
    (name, arguments) := splitArguments(annotation)
    length(arguments) = length(parameters) and
        isThisName(name, getLexeme(adtName))


def newReconstructorType(returnType, constructorForm)
    form := removeAnnotation(constructorForm)
    parameterTypes := getArguments(form).map(getParameterType)
    parameterTypes.fold(DoubleArrow, returnType)


def addGADTEquationConstraint(adtType, constructorForm, body)
    if constructorForm is ColonPair(tag, _, annotation)
        if not isValidConstructorAnnotation(adtType, annotation)
            astSyntaxError("inconsistent annotation form", annotation)
        equation := PreEquation(tag, annotation, adtType)
        Arrow(veil(tag), Tail, [], Underscore(tag, 0), Just(equation), body)
    body


def getCaseType(adtType, returnType, form)
    if form is For(_, form', parameter)
        TailArrow(parameter, getCaseType(adtType, returnType, form'))
    addGADTEquationConstraint(adtType, form,
        newReconstructorType(returnType, form))


def getConstructorAnnotation(form)
    if form is For(_, form', parameter)
        getConstructorAnnotation(form')
    if form is ColonPair(tag, _, annotation)
        Just(annotation)
    Void


def getConstructorType(adtForm, form)
    adtType := removeAnnotations(adtForm)
    caseType := getCaseType(adtType, adtType, form)
    generalType := getArguments(adtForm).fold(TailArrow, caseType)
    if getConstructorAnnotation(form) is Just(annotation)
        caseType' := getCaseType(adtType, annotation, form)
        specifiedType := getArguments(adtForm).fold(TailArrow, caseType')
        [generalType, specifiedType]
    [generalType]


def newConstruction(tag, adtType, forms)
    # todo: change name from "r" so it can't clash with user's names
    returnType := FixedName(tag, "r")
    caseTypes := forms.map(getCaseType(adtType, returnType))
    TailArrow(returnType, caseTypes.fold(DoubleArrow, returnType))


def getConstructorFunction(name, parameters, n, j)
    # n is the number of forms and j is the index of this form in upto(n)
    tag := getTag(name)
    if name is Number(tag, value)
        if value =/= 0
            astSyntaxError("invalid constructor name", name)
        Number(tag, 0)
    if not isName(name)
        astSyntaxError("invalid constructor name", name)

    m := length(parameters)
    arguments := reverse(n + 1 .. n + m).map(Underscore(tag))
    base := arguments.cascade(Juxtaposition(tag), Underscore(tag, n -- j))
    # wrap with arrows for each constructor case
    construct := (UnderscoreArrow(tag)^^(n))(base)
    # wrap with arrows for each parameter for this constructor
    parameters.fold(SingleArrow, construct)


def removeFor(form)
    if form is For(tag, left, right)
        removeFor(left)
    form


def newConstructorDefinition(tag, adtForm, n, (j, form), scope)
    (name, parameters) := splitArguments(removeAnnotation(removeFor(form)))
    invalidParameters := parameters.filter((not) <> isValidConstructorParameter)
    if invalidParameters is parameter :: _
        astSyntaxError("invalid constructor parameter", parameter)

    # when defining a constructor term, the ADT parameters are not in scope,
    # since they are only defined as implicits in the annotation
    # at the type level, not the term level. we erase the annotations to avoid
    # undefined symbols errors during bind.
    parameters' := parameters.map(removeAnnotation)
    function := getConstructorFunction(name, parameters', n, j)
    if not isPreterm(function)
        astSyntaxError("invalid constructor", name)   # force errors
    type := getConstructorType(adtForm, form)
    arity := length(parameters)
    adtName := getHead(adtForm)
    constructor := Constructor(getTag(name), adtName, function, n, j + 1, arity)
    name' := Name(getTag(name))
    newConstructDefinition(tag, type, name', constructor, scope)


def newFallbackCase(tag, m)
    fallback := Underscore(tag, m + 2)
    instance := Underscore(tag, m + 1)
    body := Juxtaposition(tag, fallback, instance)
    (1 .. m).cascade(b -> _ -> UnderscoreArrow(tag, b), body)


def getDeconstructorType'(tag, adtForm, constructorForm, returnType)
    if constructorForm is For(_, left, right)
        TailArrow(right, getDeconstructorType'(tag, adtForm, left, returnType))
    adtType := removeAnnotations(adtForm)
    reconstructorType := newReconstructorType(returnType, constructorForm)
    syntax(=>>) := syntax(++)
    (=>>) := DoubleArrow
    fallbackType := adtType =>> returnType
    type := reconstructorType =>> fallbackType =>> adtType =>> returnType
    addGADTEquationConstraint(adtType, constructorForm, type)


def getDeconstructorType(tag, adtForm, constructorForm)
    # todo: change name from "r" so it can't clash with user's names
    returnType := FixedName(tag, "r")
    type := getDeconstructorType'(tag, adtForm, constructorForm, returnType)
    TailArrow(returnType, getArguments(adtForm).fold(TailArrow, type))


def newDeconstructorFunction(tag, n, ms, j)
    reconstructor := Underscore(tag, 3)
    arguments := upto(n).map(k -> if k = j then reconstructor else
        newFallbackCase(tag, ms.pick(k) ?? 0))
    body := arguments.cascade(Juxtaposition(tag), Underscore(tag, 1))
    UnderscoreArrow(tag, UnderscoreArrow(tag, UnderscoreArrow(tag, body)))


def newDeconstructorDefinition(tag, adtForm, n, ms, (j, form), scope)
    constructorTag := getTag(getHead(removeAnnotation(removeFor(form))))
    name := Name(addPrefix(constructorTag, '@'))
    deconstructor := newDeconstructorFunction(constructorTag, n, ms, j)
    type := getDeconstructorType(constructorTag, adtForm, form)
    newConstructDefinition(tag, [type], name, deconstructor, scope)


def newConstructorDefinitions(tag, adtForm, n, ms, formj, scope)
    # define deconstructor first in case the constructor name is the same
    # as the ADT name: this ensures that we always bind the ADT name
    scope' := newConstructorDefinition(tag, adtForm, n, formj, scope)
    newDeconstructorDefinition(tag, adtForm, n, ms, formj, scope')


def newADT(adtType, forms)
    (name, parameters) := splitArguments(adtType)
    if not isName(name)
        astSyntaxError("expected name", name)
    parameterNames := parameters.map(removeAnnotation)
    if not parameterNames.all(isName)
        astSyntaxError("parameters to type constructor must be names", name)
    tag := getTag(name)
    ADT(tag, parameterNames, newConstruction(tag, adtType, forms))


def defineConstructorsAndDeconstructors(tag, adtForm, forms, scope)
    n := length(forms)
    ms := forms.map(length <> getArguments)
    enumerate(forms).fold(newConstructorDefinitions(tag, adtForm, n, ms), scope)


def applyADTDefinition(tag, adtForm, setbuilder, scope)
    if setbuilder is SetBuilder(_, forms)
        scope' := defineConstructorsAndDeconstructors(
            tag, adtForm, forms, scope)
        adt := newADT(removeAnnotations(adtForm), forms)
        (name, parameters) := splitArguments(adtForm)
        value := parameters.fold(SingleArrowDefault(Top(tag)), adt)
        newConstructDefinition(tag, [], name, value, scope')
    internalError("expected set notation", getTag(setbuilder))


def applyDefinition(definition, scope)
    if definition is Definition(tag, type, name, value)
        match type
            case PlainDefinition
                applyPlainDefinition(tag, name, value, scope)
            case MaybeDefinition
                applyMaybeDefinition(tag, name, value, scope)
            case TryDefinition
                applyTryDefinition(tag, name, value, scope)
            case SyntaxDefinition
                scope
            case ADTDefinition
                applyADTDefinition(tag, name, value, scope)
            case BindDefinition
                applyBindDefinition(tag, name, value, scope)
            case TryBindDefinition
                applyTryBindDefinition(tag, name, value, scope)
    internalError("expected definition", getTag(definition))


def reduceDefine'(tag, definitionType, left, right)
    if isCommaPair(right)
        syntaxError("invalid right hand side", tag)
    if isTuple(left) or isAsPattern(left)
        Definition(tag, definitionType, left, right)
    if left is ColonPair(_, name, annotation)
        if isName(name)
            Definition(tag, definitionType, left, right)
        syntaxError("invalid left hand side", tag)
    (name, parameters) := splitArguments(left)
    value := parameters.fold(newArrow, right)
    if not isName(name)
        syntaxError("invalid left hand side", tag)
    if isThisName(name, "main")
        applyPlainDefinition(tag, name, value, name)
    Definition(tag, definitionType, name, transformRecursion(name, value))


def reduceDefine(tag, left, right)
    if isDefinition(right)   # todo: remove after converting exceptions
        astSyntaxError("missing scope for definition", right)
    if left is Juxtaposition(_, left', right')
        if isThisName(left', "maybe")
            reduceDefine'(tag, MaybeDefinition, right', right)
        if isThisName(left', "try")
            reduceDefine'(tag, TryDefinition, right', right)
        if isThisName(left', "syntax")
            reduceDefine'(tag, SyntaxDefinition, right', right)
        reduceDefine'(tag, PlainDefinition, left, right)
    reduceDefine'(tag, PlainDefinition, left, right)


def reduceADTDefine(tag, left, right)
    if not isValidPattern(left)
        syntaxError("invalid left hand side", tag)
    if not isSetBuilder(right)
        syntaxError("ADT required to right of", tag)
    Definition(tag, ADTDefinition, left, right)

#@
