#* operator.zero

Fixity(operator, operand) ::= {
    Prefix(reduce : operator => operand => operand),
    Infix(reduce : operator => operand => operand => operand),
    Postfix(reduce : operator => operand => operand),
    Openfix(reduce : operator => (operand)? => (operand)? => operand),
    Closefix(reduce : operator => (operand)? => operand => operand)
}

SyntaxT(operator, operand) ::= {Syntax(
    aliasName : List(ℕ),
    leftPrecedence : ℕ,
    rightPrecedence : ℕ,
    associativity : ℕ,
    special : 𝔹,
    bracketType : ℕ,
    prior : List(ℕ),
    fixity : Fixity(operator, operand)
)}

getAlias(Syntax(aliasName, _, _, _, _, _, _, _)) := aliasName
getLeftPrecedence(Syntax(_, leftP, _, _, _, _, _, _)) := leftP
getRightPrecedence(Syntax(_, _, rightP, _, _, _, _, _)) := rightP
getAssociativity(Syntax(_, _, _, assoc, _, _, _, _)) := assoc
isSpecial(Syntax(_, _, _, _, special, _, _, _)) := special
getBracketType(Syntax(_, _, _, _, _, bracketType, _, _)) := bracketType
getPrior(Syntax(_, _, _, _, _, _, prior, _)) := prior
getFixity(Syntax(_, _, _, _, _, _, _, fixity)) := fixity

OperatorT(operand) ::= {Operator(
    tag : TagT,
    subprecedence : ℕ,
    syntax' : SyntaxT(OperatorT(operand), operand)
)}

getOperatorTag(Operator(tag, _, _)) := tag
getSubprecedence(Operator(_, subprecedence, _)) := subprecedence
getSyntax(Operator(_, _, syntax')) := syntax'


def isThisOperator(Operator(tag, _, _), lexeme)
    getTagLexeme(tag) =*= lexeme


def throwError(message, tag)
    abort message ++ " " ++ showTagWithLocation(tag) ++ "\n"


def parseError(message, tag)
    throwError("Syntax error: " ++ message, tag)


def oppSyntaxError(message, Operator(tag, _, _))
    parseError(message, tag)


def getFixityCode(fixity)
    match fixity
        Prefix(_) -> PREFIX
        Infix(_) -> INFIX
        Postfix(_) -> POSTFIX
        Openfix(_) -> OPENFIX
        Closefix(_) -> CLOSEFIX


StackItem(operandT) ::= {
    OperatorItem(operator : OperatorT(operandT)),
    OperandItem(operand : operandT)
}


def isOperator(item)
    match item
        OperatorItem(_) -> True
        OperandItem(_) -> False


StateT(operand) ::= {State(
    stack : List(StackItem(operand)),
    operators : List(TableT(List(ℕ), SyntaxT(OperatorT(operand), operand))),
    onReduce : StateT(operand) => OperatorT(operand) =>
        (operand)? => (operand)? => operand => StateT(operand)
)}

getStack(State(stack, _, _)) := stack
getOperators(State(_, operators, _)) := operators

#*
