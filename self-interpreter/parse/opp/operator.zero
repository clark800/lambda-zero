#* operator.zero

Associativity ::= {LA, RA, NA}


def isSameAssociativity(left, right)
    getAssociativityCode := LA -> 0; RA -> 1; NA -> 2
    getAssociativityCode(left) = getAssociativityCode(right)


Fixity(operator, operand) ::= {
    Prefix(reduce : operator => operand => operand),
    Infix(reduce : operator => operand => operand => operand),
    Postfix(reduce : operator => operand => operand),
    Openfix(reduce : operator => (operand)? => (operand)? => operand),
    Closefix(reduce : operator => (operand)? => operand => operand)
}

SyntaxT(operator, operand) ::= {Syntax(
    aliasName : List(ℕ),
    leftPrecedence : ℕ,
    rightPrecedence : ℕ,
    associativity : Associativity,
    special : 𝔹,
    bracketType : ℕ,
    prior : List(ℕ),
    fixity : Fixity(operator, operand)
)}

getAlias(Syntax(aliasName, _, _, _, _, _, _, _)) := aliasName
getLeftPrecedence(Syntax(_, leftP, _, _, _, _, _, _)) := leftP
getRightPrecedence(Syntax(_, _, rightP, _, _, _, _, _)) := rightP
getAssociativity(Syntax(_, _, _, assoc, _, _, _, _)) := assoc
isSpecial(Syntax(_, _, _, _, special, _, _, _)) := special
getBracketType(Syntax(_, _, _, _, _, bracketType, _, _)) := bracketType
getPrior(Syntax(_, _, _, _, _, _, prior, _)) := prior
getFixity(Syntax(_, _, _, _, _, _, _, fixity)) := fixity

OperatorT(operand) ::= {Operator(
    tag : TagT,
    subprecedence : ℕ,
    syntax' : SyntaxT(OperatorT(operand), operand)
)}

getOperatorTag(Operator(tag, _, _)) := tag
getSubprecedence(Operator(_, subprecedence, _)) := subprecedence
getSyntax(Operator(_, _, syntax')) := syntax'


def throwError(message, tag)
    abort message ++ " " ++ showTagWithLocation(tag) ++ "\n"


def parseError(message, tag)
    throwError("Syntax error: " ++ message, tag)


def oppSyntaxError(message, Operator(tag, _, _))
    parseError(message, tag)


def isHigherPrecedence(left, right)
    leftSyntax := getSyntax(left)
    rightSyntax := getSyntax(right)

    if leftSyntax.getRightPrecedence = rightSyntax.getLeftPrecedence
        associativity := rightSyntax.getAssociativity
        if not isSameAssociativity(associativity, leftSyntax.getAssociativity)
            oppSyntaxError("incompatible associativity", right)

        match associativity
            LA -> getSubprecedence(left) >= getSubprecedence(right)
            RA -> getSubprecedence(left) > getSubprecedence(right)
            NA -> oppSyntaxError("operator is non-associative", right)

    leftSyntax.getRightPrecedence > rightSyntax.getLeftPrecedence

#*
