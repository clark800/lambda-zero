#* shift.zero

StackItem(operandT) ::= {
    OperatorItem(operator : OperatorT(operandT)),
    OperandItem(operand : operandT)
}


def isOperator(item)
    match item
        OperatorItem(_) -> True
        OperandItem(_) -> False


StateT(operand) ::= {State(
    stack : List(StackItem(operand)),
    operators : List(TableT(List(â„•), SyntaxT(OperatorT(operand), operand))),
    onReduce : StateT(operand) => OperatorT(operand) =>
        (operand)? => (operand)? => operand => StateT(operand)
)}

getStack(State(stack, _, _)) := stack
getOperators(State(_, operators, _)) := operators


def reduceTop'(state @ State(stack, operators, onReduce), operator, right)
    match getFixity(getSyntax(operator))
        case Prefix(reduce)
            reduction := reduce(operator, right)
            stack' := OperandItem(reduction) :: stack
            state' := State(stack', operators, onReduce)
            onReduce(state', operator, Void, Just(right), reduction)
        case Infix(reduce)
            with stack as leftItem :: stack'
                with leftItem as OperandItem(left)
                    reduction := reduce(operator, left, right)
                    stack'' := OperandItem(reduction) :: stack'
                    state' := State(stack'', operators, onReduce)
                    onReduce(state', operator,
                        Just(left), Just(right), reduction)
                pass
            oppSyntaxError("missing left operand", operator)
        case Postfix(reduce)
            oppSyntaxError("internal error: reduceTop'", operator)
        case Openfix(reduce)
            oppSyntaxError("internal error: reduceTop'", operator)
        case Closefix(reduce)
            oppSyntaxError("internal error: reduceTop'", operator)


def reduceTop(state @ State(stack, operators, onReduce))
    with stack as item :: stack'
        with item as OperandItem(operand)
            with stack' as item' :: stack''
                with item' as OperatorItem(operator)
                    state' := State(stack'', operators, onReduce)
                    reduceTop'(state', operator, operand)
                state
            state
        state
    state


def shouldReduceTop(operator, state)
    with getStack(state) as item :: stack'
        if isOperator(item)
            False
        with stack' as item' :: _
            with item' as OperatorItem(operator')
                isHigherPrecedence(operator', operator)
            False
        False
    False


def reduceLeft(state, operator)
    while(shouldReduceTop(operator), reduceTop, state)


def shiftPrefix(State(stack, operators, onReduce), operator)
    State(OperatorItem(operator) :: stack, operators, onReduce)


def shiftPostfix(reduce, State(stack, operators, onReduce), operator)
    with stack as item :: stack'
        with item as OperandItem(operand)
            reduction := reduce(operator, operand)
            stack'' := OperandItem(reduction) :: stack'
            state' := State(stack'', operators, onReduce)
            onReduce(state', operator, Just(operand), Void, reduction)
        pass
    oppSyntaxError("missing left operand for", operator)


def shiftInfix(State(stack, operators, onReduce), operator)
    with stack as top :: _
        if not isOperator(top)
            State(OperatorItem(operator) :: stack, operators, onReduce)
        oppSyntaxError("missing left operand for", operator)
    oppSyntaxError("missing left operand for", operator)


def shiftOpenfix(State(stack, operators, onReduce), open)
    State(OperatorItem(open) :: stack, operators, onReduce)


def reduceBracket(reduceOpen, reduceClose, open, close, before, contents)
    if getBracketType(getSyntax(open)) =/= getBracketType(getSyntax(close))
        if getBracketType(getSyntax(close)) = '\0'
            oppSyntaxError("missing close for", open)
        oppSyntaxError("missing open for", close)
    reduceClose(close, before, reduceOpen(open, before, contents))


def shiftBracket'(reduceOpen, reduceClose, state, open, close, left, right)
    _ @ State(stack, operators, onReduce) := state
    reduction := reduceBracket(
        reduceOpen, reduceClose, open, close, left, right)
    state' := State(OperandItem(reduction) :: stack, operators, onReduce)
    onReduce(state', open, left, right, reduction)


def shiftBracket(reduceOpen, reduceClose, state, open, close, right)
    _ @ State(stack, operators, onReduce) := state
    with stack as leftItem :: stack'
        with leftItem as OperandItem(left)
            state' := State(stack', operators, onReduce)
            shiftBracket'(reduceOpen, reduceClose, state', open, close,
                Just(left), right)
        pass
    shiftBracket'(reduceOpen, reduceClose, state, open, close, Void, right)


def shiftClosefix(reduceClose, State(stack, operators, onReduce), close)
    with stack as item :: stack'
        match item
            case OperatorItem(operator)
                with getFixity(getSyntax(operator)) as Openfix(reduceOpen)
                    state' := State(stack', operators, onReduce)
                    shiftBracket(reduceOpen, reduceClose, state',
                        operator, close, Void)
                oppSyntaxError("missing right operand for", operator)
            case OperandItem(operand)
                with stack' as item' :: stack''
                    with item' as OperatorItem(operator)
                        fixity := getFixity(getSyntax(operator))
                        with fixity as Openfix(reduceOpen)
                            state' := State(stack'', operators, onReduce)
                            shiftBracket(reduceOpen, reduceClose,
                                state', operator, close, Just(operand))
                        pass
                    pass
                oppSyntaxError("missing open for", close)
    oppSyntaxError("missing open for", close)


def getShifter(fixity)
    match fixity
        Prefix(reduce) -> shiftPrefix
        Infix(reduce) -> shiftInfix
        Postfix(reduce) -> shiftPostfix(reduce)
        Openfix(reduce) -> shiftOpenfix
        Closefix(reduce) -> shiftClosefix(reduce)


def shiftOperator(state, operator)
    state' := reduceLeft(state, operator)
    getShifter(getFixity(getSyntax(operator)))(state', operator)


def shiftOperand(state, tag, operand)
    _ @ State(stack, operators, onReduce) := state
    with stack as top :: _
        if not isOperator(top)
            parseError("missing operator before", tag)
        State(OperandItem(operand) :: stack, operators, onReduce)
    parseError("missing operator before", tag)


def shift(state, tag, item)
    match item
        OperatorItem(operator) -> shiftOperator(state, operator)
        OperandItem(operand) -> shiftOperand(state, tag, operand)

#*
