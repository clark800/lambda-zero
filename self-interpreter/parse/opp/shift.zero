#* shift.zero

StackItem(operandT) ::= {
    OperatorItem(operator : OperatorT(operandT)),
    OperandItem(operand : operandT)
}


def isOperator(item)
    match item
        OperatorItem(_) -> True
        OperandItem(_) -> False


StateT(operand) ::= {State(
    stack : List(StackItem(operand)),
    operators : List(TableT(List(â„•), SyntaxT(operand)))
)}

getStack(State(stack, _)) := stack


def isValidAdfixPrior(getTag, operator, node)
    prior := getPrior(getSyntax(operator))
    isNil(prior) or getTagLexeme(getTag(node)) =*= prior


def isValidInfixPrior(getTag, operator, left, right)
    prior := getPrior(getSyntax(operator))
    if isNil(prior)
        True
    match getAssociativity(getSyntax(operator))
        LA -> getTagLexeme(getTag(left)) =*= prior
        RA -> getTagLexeme(getTag(right)) =*= prior
        NA -> oppSyntaxError("invalid operator with prior", operator)


def reduceTop'(onReduce, getTag, state, operator, right)
    _ @ State(stack, operators) := state
    match getFixity(getSyntax(operator))
        case Prefix(reduce)
            if not isValidAdfixPrior(getTag, operator, right)
                oppSyntaxError("invalid prior for", operator)
            reduction := reduce(getOperatorTag(operator), right)
            stack' := OperandItem(reduction) :: stack
            state' := State(stack', operators)
            onReduce(state', operator, Void, Just(right), reduction)
        case Infix(reduce)
            with stack as leftItem :: stack'
                with leftItem as OperandItem(left)
                    if not isValidInfixPrior(getTag, operator, left, right)
                        oppSyntaxError("invalid prior for", operator)
                    reduction := reduce(getOperatorTag(operator), left, right)
                    stack'' := OperandItem(reduction) :: stack'
                    state' := State(stack'', operators)
                    onReduce(state', operator,
                        Just(left), Just(right), reduction)
                pass
            oppSyntaxError("missing left operand", operator)
        _ -> oppSyntaxError("internal error: reduceTop'", operator)


def reduceTop(onReduce, getTag, state @ State(stack, operators))
    with stack as item :: stack'
        with item as OperandItem(operand)
            with stack' as item' :: stack''
                with item' as OperatorItem(operator)
                    state' := State(stack'', operators)
                    reduceTop'(onReduce, getTag, state', operator, operand)
                state
            state
        state
    state


def shouldReduceTop(operator, state)
    with getStack(state) as item :: stack'
        if isOperator(item)
            False
        with stack' as item' :: _
            with item' as OperatorItem(operator')
                isHigherPrecedence(operator', operator)
            False
        False
    False


def reduceLeft(onReduce, getTag, state, operator)
    while(shouldReduceTop(operator), reduceTop(onReduce, getTag), state)


def shiftPrefix(State(stack, operators), operator)
    State(OperatorItem(operator) :: stack, operators)


def shiftPostfix(onReduce, getTag, reduce, State(stack, operators), operator)
    with stack as item :: stack'
        with item as OperandItem(operand)
            if not isValidAdfixPrior(getTag, operator, operand)
                oppSyntaxError("invalid prior for", operator)
            reduction := reduce(getOperatorTag(operator), operand)
            stack'' := OperandItem(reduction) :: stack'
            state' := State(stack'', operators)
            onReduce(state', operator, Just(operand), Void, reduction)
        pass
    oppSyntaxError("missing left operand for", operator)


def shiftInfix(State(stack, operators), operator)
    with stack as top :: _
        if not isOperator(top)
            State(OperatorItem(operator) :: stack, operators)
        oppSyntaxError("missing left operand for", operator)
    oppSyntaxError("missing left operand for", operator)


def shiftOpenfix(State(stack, operators), open)
    State(OperatorItem(open) :: stack, operators)


def reduceBracket(reduceOpen, reduceClose, open, close, before, contents)
    if getBracketType(getSyntax(open)) =/= getBracketType(getSyntax(close))
        if getBracketType(getSyntax(close)) = '\0'
            oppSyntaxError("missing close for", open)
        oppSyntaxError("missing open for", close)
    openTag := getOperatorTag(open)
    closeTag := getOperatorTag(close)
    reduceClose(closeTag, before, reduceOpen(openTag, before, contents))


def shiftBracket'(onReduce, reduceOpen, reduceClose, state,
        open, close, left, right)
    _ @ State(stack, operators) := state
    reduction := reduceBracket(
        reduceOpen, reduceClose, open, close, left, right)
    state' := State(OperandItem(reduction) :: stack, operators)
    onReduce(state', open, left, right, reduction)


def shiftBracket(onReduce, reduceOpen, reduceClose, state, open, close, right)
    _ @ State(stack, operators) := state
    with stack as leftItem :: stack'
        with leftItem as OperandItem(left)
            state' := State(stack', operators)
            shiftBracket'(onReduce, reduceOpen, reduceClose, state',
                open, close, Just(left), right)
        pass
    shiftBracket'(onReduce, reduceOpen, reduceClose, state,
        open, close, Void, right)


def shiftClosefix(onReduce, reduceClose, State(stack, operators), close)
    with stack as item :: stack'
        match item
            case OperatorItem(operator)
                with getFixity(getSyntax(operator)) as Openfix(reduceOpen)
                    state' := State(stack', operators)
                    shiftBracket(onReduce, reduceOpen, reduceClose,
                        state', operator, close, Void)
                oppSyntaxError("missing right operand for", operator)
            case OperandItem(operand)
                with stack' as item' :: stack''
                    with item' as OperatorItem(operator)
                        fixity := getFixity(getSyntax(operator))
                        with fixity as Openfix(reduceOpen)
                            state' := State(stack'', operators)
                            shiftBracket(onReduce, reduceOpen, reduceClose,
                                state', operator, close, Just(operand))
                        pass
                    pass
                oppSyntaxError("missing open for", close)
    oppSyntaxError("missing open for", close)


def getShifter(onReduce, getTag, fixity)
    match fixity
        Prefix(reduce) -> shiftPrefix
        Infix(reduce) -> shiftInfix
        Postfix(reduce) -> shiftPostfix(onReduce, getTag, reduce)
        Openfix(reduce) -> shiftOpenfix
        Closefix(reduce) -> shiftClosefix(onReduce, reduce)


def shiftOperator(onReduce, getTag, state, operator)
    state' := reduceLeft(onReduce, getTag, state, operator)
    fixity := getFixity(getSyntax(operator))
    getShifter(onReduce, getTag, fixity)(state', operator)


def shiftOperand(state, tag, operand)
    _ @ State(stack, operators) := state
    with stack as top :: _
        if isOperator(top)
            State(OperandItem(operand) :: stack, operators)
        pass
    parseError("missing operator before", tag)


def shift(onReduce, getTag, state, item)
    match item
        case OperatorItem(operator)
            shiftOperator(onReduce, getTag, state, operator)
        case OperandItem(operand)
            shiftOperand(state, getTag(operand), operand)


def unshift(state @ State(stack, operators))
    with stack as item :: stack'
        (Just(item), State(stack', operators))
    (Void, state)


def isThisOperator(operator, lexeme)
    getTagLexeme(getOperatorTag(operator)) =*= lexeme


def isThisOperatorItem(item, lexeme)
    with item as OperatorItem(operator)
        isThisOperator(operator, lexeme)
    False


def erase(lexeme, state @ State(stack, operators))
    State(stack.dropIf(`isThisOperatorItem(lexeme)), operators)


def pushOperator(lexeme, syntax', operators)
    with operators as top :: _
        top.insert(lexeme, syntax') :: operators
    [newDictionary([(lexeme, syntax')])]


def pushSyntax(lexeme, syntax', state @ State(stack, operators))
    State(stack, pushOperator(lexeme, syntax', operators))


def popSyntax(state @ State(stack, operators))
    State(stack, operators.drop(1))


def lookupSyntax(lexeme, State(_, operators))
    with operators as top :: _
        top.lookup(lexeme)
    Void

#*
