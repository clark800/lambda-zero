#* patterns.zero

def splitArguments(node)
    if node is Juxtaposition(_, left, right)
        (head, arguments) := splitArguments(left)
        (head, arguments ++ [right])
    (node, [])


def getHead(node)
    first(splitArguments(node))


def getArguments(node)
    second(splitArguments(node))


def newProjector(tag, arity, index)
    (UnderscoreArrow(tag)^<>(arity))(Underscore(tag, arity -- index))


def newArrow(pattern, body)
    if pattern is ColonPair(tag, left, right)
        newArrow(left, body).setAnnotation(right)
    if isName(pattern)
        SingleArrow(pattern, body)
    if pattern is AsPattern(tag, left, right)
        newArrow(left, Juxtaposition(tag,
            newArrow(right, body), Underscore(tag, 1)))
    if isJuxtaposition(pattern)
        (constructor, arguments) := splitArguments(pattern)
        tag := getTag(constructor)
        arity := length(arguments)
        underscore := NegativeUnderscore(tag)
        function := arguments.fold(newArrow, body)
        projectors := upto(arity).map(newProjector(tag, arity))
        projections := projectors.map(Juxtaposition(tag, underscore))
        lockArrow(ExplicitCaseArrow(tag,
            [(constructor, arity)], Underscore(tag, 0),
            projections.cascade(Juxtaposition(tag), function)))
    astSyntaxError("invalid parameter", pattern)


def newCase(left, right)
    if isUnderscore(left)
        DefaultCaseArrow(FixedName(getTag(left), "this"), right)
    (name, parameters) := splitArguments(left)
    if not (isName(name) or isNumber(name))
        astSyntaxError("invalid case", left)
    arity := length(parameters)
    reconstructor := parameters.fold(newArrow, right)
    tag := getTag(name)
    constructor := Name(tag)  # name could be a number
    thisName := This(tag)
    body := Juxtaposition(tag, thisName, reconstructor)
    ExplicitCaseArrow(tag, [(constructor, arity)], thisName, body)


def combineCaseBodies'(tag, base, extension)
    if extension is Juxtaposition(_, left, right)
        Juxtaposition(tag, combineCaseBodies'(tag, base, left), right)
    base


def combineCaseBodies(tag, thisName, left, right)
    if left is Arrow(_, _, _, _, _, body)
        if right is Arrow(_, _, _, _, _, body')
            combineCaseBodies'(tag, body, body')
        astSyntaxError("internal error: expected arrow", right)
    astSyntaxError("internal error: expected arrow", left)


def getCases(arrow)
    if arrow is Arrow(_, type, cases, parameter, _, _)
        cases
    []


def getReconstructor(caseArrow)
    if caseArrow is Arrow(_, type, _, _, _, body)
        if body is Juxtaposition(_, _, right)
            right
        pass
    astSyntaxError("Internal error: expected case arrow", caseArrow)


def getConstructorTag(caseArrow)
    if caseArrow is Arrow(_, type, cases, parameter, _, _)
        if cases is (constructor, _) :: cases'
            if isNil(cases')
                getTag(constructor)
            astSyntaxError("Internal error: multiple cases", caseArrow)
        astSyntaxError("Internal error: missing case", caseArrow)
    astSyntaxError("Internal error: expected case arrow", caseArrow)


def attachDefaultCase(tag, caseArrow, fallback)
    constructorTag := getConstructorTag(caseArrow)
    deconstructor := Name(addPrefix(constructorTag, '@'))
    reconstructor := getReconstructor(caseArrow)
    # note: "this" is a positive variable here because we aren't using it
    # as a function as we are in the strict case
    thisName := FixedName(tag, "this")
    body := Juxtaposition(tag, Juxtaposition(tag, Juxtaposition(tag,
        deconstructor, reconstructor), fallback), thisName)
    DefaultCaseArrow(thisName, body)


def combineCases(tag, left, right)
    if isDefaultCase(left)
        astSyntaxError("invalid default case position", left)
    if length(getCases(left)) > 1
        astSyntaxError("invalid case indentation", left)
    if isDefaultCase(right)
        attachDefaultCase(tag, left, right)
    thisName := This(tag)
    cases := getCases(left) ++ getCases(right)
    body := combineCaseBodies(tag, thisName, left, right)
    ExplicitCaseArrow(tag, cases, thisName, body)

#*
