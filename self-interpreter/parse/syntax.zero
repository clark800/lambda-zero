#* syntax.zero

def isValidPrior(operator, node)
    with operator as Operator(_, _, syntax')
        prior := getPrior(syntax')
        isNil(prior) or (isJuxtaposition(node) and getLexeme(node) =*= prior)
    False


def reduceApply(operator, left, right)
    Juxtaposition(getOperatorTag(operator), left, right)


def reduceAdfix(operator, operand)
    if not isValidPrior(operator, operand)
        oppSyntaxError("operator syntax error", operator)
    reduceApply(operator, Name(getOperatorTag(operator)), operand)


def reduceInfix(operator, left, right)
    reduceApply(operator, reduceApply(operator,
        Name(getOperatorTag(operator)), left), right)


def reduceInfixL(operator, left, right)
    if not isValidPrior(operator, left)
        oppSyntaxError("operator syntax error", operator)
    reduceInfix(operator, left, right)


def reduceInfixR(operator, left, right)
    if not isValidPrior(operator, right)
        oppSyntaxError("operator syntax error", operator)
    reduceInfix(operator, left, right)


def reduceArrow(operator, left, right)
    if isName(left)
        SimpleArrow(left, right)  # might be a case or might not be a case
    if isColonPair(left)
        newPatternArrow(left, right)
    newCaseArrow(left, right)


def reduceDoubleArrow(operator, left, right)
    Arrow(getOperatorTag(operator), Double, [], left, Null(noTag), right)


def reducePipeline(operator, left, right)
    reduceApply(operator, right, left)


def reduceCommaPair(operator, left, right)
    CommaPair(getOperatorTag(operator), left, right)


def reduceColonPair(operator, left, right)
    if isColonPair(left) or not isValidPattern(left)
        oppSyntaxError("invalid left side of colon", operator)
    if isColonPair(right) or not isValidPattern(right)
        oppSyntaxError("invalid right side of colon", operator)
    ColonPair(getOperatorTag(operator), left, right)


def reduceAsPattern(operator, left, right)
    AsPattern(getOperatorTag(operator), left, right)


def reduceWhere(operator, left, right)
    if not isDefinition(right)
        oppSyntaxError("expected definition to right of", operator)
    applyDefinition(right, left)


def reduceWith(operator, asPattern, withBlock)
    with asPattern as AsPattern(_, expression, pattern)
        tag := getOperatorTag(operator)
        elseBlock := Underscore(tag, 3)
        caseArrow := newCaseArrow(pattern, withBlock)
        fallback := SimpleArrow(Underscore(tag, 0), elseBlock)
        function := combineCases(tag, caseArrow, fallback)
        LockedArrow(FixedName(tag, "pass"),
            Juxtaposition(tag, function, expression))
    oppSyntaxError("expected as pattern to right of", operator)


def reduceNewline(operator, left, right)
    with left as Juxtaposition(_, left', right')
        if isThisName(left', "def")
            reduceDefine(operator, right', right)
        if isThisName(left', "case")
            newCaseArrow(right', right)
        if isThisName(left', "with")
            reduceWith(operator, right', right)
        reduceApply(operator, left, right)
    if isDefinition(left)
        applyDefinition(left, right)
    if isCase(left) and isCase(right)
        combineCases(getOperatorTag(operator), left, right)
    reduceApply(operator, left, right)


def reduceInterfix(operator, left, right)
    if not isValidPrior(operator, left)
        oppSyntaxError("operator syntax error", operator)
    reduceNewline(operator, left, right)


def reduceReserved(operator, _left, _right)
    oppSyntaxError("reserved operator", operator)


def reduceReservedAdfix(operator, _operand)
    oppSyntaxError("reserved operator", operator)


def reduceClose(_operator, _left, right)
    right


def newOperator'(tag, prior, precedence, associativity, fixity)
    special := not isNil(prior)
    if special and associativity = NEITHER
        parseError("expected numeric precedence", tag)
    Operator(tag, 0, Syntax(getTagLexeme(tag), precedence, precedence,
        associativity, special, '_', prior, fixity))


def newSyntaxOperator(tag, precedence, fixity, prior)
    p := precedence
    if getLexeme(fixity) =*= "infix"
        newOperator'(tag, prior, p, NEITHER, Infix(reduceInfix))
    if getLexeme(fixity) =*= "infixL"
        newOperator'(tag, prior, p, LEFT, Infix(reduceInfixL))
    if getLexeme(fixity) =*= "infixR"
        newOperator'(tag, prior, p, RIGHT, Infix(reduceInfixR))
    if getLexeme(fixity) =*= "interfix"
        newOperator'(tag, prior, p, LEFT, Infix(reduceInterfix))
    if getLexeme(fixity) =*= "prefix"
        newOperator'(tag, prior, p, LEFT, Prefix(reduceAdfix))
    if getLexeme(fixity) =*= "postfix"
        newOperator'(tag, prior, p, LEFT, Postfix(reduceAdfix))
    syntaxError("invalid fixity", fixity)


def getAliasSyntax(operators, name)
    if not isName(name)
        syntaxError("expected operator name", name)
    operators.lookupSyntax(getLexeme(name)) ??
        syntaxError("syntax not defined", name)


def newAlias(operators, tag, name)
    Operator(tag, 0, getAliasSyntax(operators, name))


def copySyntax(operators, tag, name)
    lexeme := getTagLexeme(tag)
    match getAliasSyntax(operators, name)
        Syntax(_, l, r, a, s, b, p, f) ->
            Operator(tag, 0, Syntax(lexeme, l, r, a, s, b, p, f))


def findPrecedence(operators, node)
    syntax' := operators.lookupSyntax(getLexeme(node)) ??
        syntaxError("syntax not defined", node)
    if getLeftPrecedence(syntax') =/= getRightPrecedence(syntax')
        syntaxError("operator not supported", node)
    getLeftPrecedence(syntax')


def parsePrecedence(operators, node)
    with node as Number(_, precedence)
        if precedence > 99
            syntaxError("invalid precedence", node)
        precedence
    findPrecedence(operators, node)


def defineSyntax(operators, definition, name, right)
    tag := getTag(definition)
    if not isName(name)
        syntaxError("expected name operand to", definition)
    with right as Juxtaposition(_, fixity, argument)
        if isThisName(fixity, "alias")
            newAlias(operators, getTag(name), argument)
        if isThisName(fixity, "syntax")
            copySyntax(operators, getTag(name), argument)
        precedence := parsePrecedence(operators, argument)
        prior := if isNumber(argument) then "" else getLexeme(argument)
        newSyntaxOperator(getTag(name), precedence, fixity, prior)
    syntaxError("invalid syntax definition", definition)


def addSyntax(operators, operator)
    lexeme := getTagLexeme(getOperatorTag(operator))
    if not isVoid(operators.lookupSyntax(lexeme))
        oppSyntaxError("syntax already defined", operator)
    operators.pushSyntax(lexeme, getSyntax(operator))


def coreAlias(lexeme, aliasName, leftPrecedence, rightPrecedence,
        associativity, fixity)
    (lexeme, Syntax(aliasName, leftPrecedence, rightPrecedence,
        associativity, True, '_', "", fixity))


def coreSyntax(lexeme, leftPrecedence, rightPrecedence, associativity, fixity)
    coreAlias(lexeme, lexeme, leftPrecedence, rightPrecedence,
        associativity, fixity)


def bracketSyntax(lexeme, bracketType, outerPrecedence, fixity)
    fixityCode := getFixityCode(fixity)
    leftPrecedence := if fixityCode = OPENFIX then outerPrecedence else 0
    rightPrecedence := if fixityCode = OPENFIX then 0 else outerPrecedence
    (lexeme, Syntax(lexeme, leftPrecedence, rightPrecedence,
        RIGHT, True, bracketType, "", fixity))


OPERATORS := [newDictionary([
    bracketSyntax("", '\0', 0, Openfix(reduceOpenFile)),
    bracketSyntax("\0", '\0', 0, Closefix(reduceClose)),
    bracketSyntax("(", '(', 95, Openfix(reduceParentheses)),
    bracketSyntax(")", '(', 95, Closefix(reduceClose)),
    bracketSyntax("( ", '(', 95, Openfix(reduceOpenSection)),
    bracketSyntax(" )", '(', 95, Closefix(reduceCloseSection)),
    bracketSyntax("[", '[', 95, Openfix(reduceSquare)),
    bracketSyntax("]", '[', 95, Closefix(reduceClose)),
    bracketSyntax("{", '{', 95, Openfix(reduceCurly)),
    bracketSyntax("}", '{', 95, Closefix(reduceClose)),
    coreSyntax("|", 1, 1, NEITHER, Infix(reduceReserved)),
    coreSyntax(",", 2, 2, LEFT, Infix(reduceCommaPair)),
    coreSyntax("\n", 3, 3, RIGHT, Infix(reduceNewline)),
    coreSyntax(";;", 4, 4, RIGHT, Infix(reduceNewline)),
    coreSyntax("def", 5, 5, LEFT, Prefix(reduceAdfix)),
    coreSyntax(":=", 5, 5, RIGHT, Infix(reduceDefine)),
    coreAlias("≔", ":=", 5, 5, RIGHT, Infix(reduceDefine)),
    coreSyntax("::=", 5, 5, RIGHT, Infix(reduceADTDefine)),
    coreAlias("⩴", "::=", 5, 5, RIGHT, Infix(reduceADTDefine)),
    coreSyntax("where", 5, 5, RIGHT, Infix(reduceWhere)),
    coreSyntax("|>", 6, 6, LEFT, Infix(reducePipeline)),
    coreAlias("⦊", "|>", 6, 6, LEFT, Infix(reducePipeline)),
    coreSyntax("<|", 6, 6, RIGHT, Infix(reduceApply)),
    coreAlias("⦉","<|", 6, 6, RIGHT, Infix(reduceApply)),
    coreSyntax(";", 8, 8, RIGHT, Infix(reduceNewline)),
    coreSyntax(":", 9, 9, NEITHER, Infix(reduceColonPair)),
    coreSyntax("->", 10, 10, RIGHT, Infix(reduceArrow)),
    coreAlias("↦", "->", 10, 10, RIGHT, Infix(reduceArrow)),
    coreSyntax("=>", 10, 10, RIGHT, Infix(reduceDoubleArrow)),
    coreAlias("⇒", "=>", 10, 10, RIGHT, Infix(reduceDoubleArrow)),
    coreSyntax("case", 11, 11, NEITHER, Prefix(reduceAdfix)),
    coreSyntax("with", 11, 11, NEITHER, Prefix(reduceAdfix)),
    coreSyntax("@", 12, 12, NEITHER, Infix(reduceAsPattern)),
    coreSyntax("as", 12, 12, NEITHER, Infix(reduceAsPattern)),
    coreSyntax("abort", 15, 15, LEFT, Prefix(reduceAdfix)),
    coreSyntax(".", 92, 92, LEFT, Infix(reducePipeline)),
    coreSyntax("$", 99, 99, LEFT, Prefix(reduceReservedAdfix)),
    coreSyntax("syntax", 99, 99, LEFT, Prefix(reduceAdfix)),
    coreSyntax("alias", 99, 99, LEFT, Prefix(reduceAdfix))
])]

#*
