#* syntax.zero

def reduceApply(tag, left, right)
    Juxtaposition(tag, left, right)


def reduceAdfix(tag, operand)
    reduceApply(tag, Name(tag), operand)


def reduceInfix(tag, left, right)
    reduceApply(tag, reduceApply(tag, Name(tag), left), right)


def reduceArrow(_tag, left, right)
    if left is Juxtaposition(_, left', right')
        if isThisName(left', "case")
            newCase(right', right)
        pass
    newArrow(left, right)


def reduceDoubleArrow(tag, left, right)
    DoubleArrow(left, right)


def reduceForAll(tag, left, right)
    if left is Juxtaposition(_, left', right')
        if isThisName(left', "forall")
            TailArrow(right', right)
        pass
    TailArrow(left, right)


def reduceReverseArrow(tag, left, right)
    if left is Juxtaposition(_, left', right')
        if isThisName(left', "try")
            Definition(tag, TryBindDefinition, right', right)
        pass
    Definition(tag, BindDefinition, left, right)


def reducePipeline(tag, left, right)
    reduceApply(tag, right, left)


def reduceCommaPair(tag, left, right)
    CommaPair(tag, left, right)


def reduceColonPair(tag, left, right)
    if isColonPair(left) or not isValidPattern(left)
        syntaxError("invalid left side of colon", tag)
    if isColonPair(right)
        syntaxError("invalid right side of colon", tag)
    ColonPair(tag, left, right)


def reduceAsPattern(tag, left, right)
    AsPattern(tag, left, right)


def reduceWhere(tag, left, right)
    if not isDefinition(right)
        syntaxError("expected definition to right of", tag)
    if isSyntaxDefinition(right)
        syntaxError("invalid definition to right of", tag)
    applyDefinition(right, left)


def reduceIs(tag, left, right)
    if left is Juxtaposition(_, left', right')
        if not isThisName(left', "if")
            pass
        if not isValidPattern(right)
            syntaxError("expected pattern after", tag)
        asPattern := AsPattern(tag, right', right)
        Juxtaposition(tag, FixedName(tag, "if is"), asPattern)
    syntaxError("expected 'if' before", tag)


def reduceIfIs(tag, asPattern, thenBlock)
    if asPattern is AsPattern(_, expression, pattern)
        elseBlock := Underscore(tag, 3)
        fallback := DefaultCaseArrow(Underscore(tag, 0), elseBlock)
        function := combineCases(tag, newCase(pattern, thenBlock), fallback)
        SingleArrow(FixedName(tag, "pass"),
            Juxtaposition(tag, function, expression))
    syntaxError("expected as pattern to right of", tag)


def addSignature(tag, signature, let)
    if let is Let(tag, isConstruct, annotation, name, value, scope)
        if isVoid(annotation) and not isConstruct
            Let(tag, isConstruct, Just(signature), name, value, scope)
        syntaxError("duplicate signature", tag)
    syntaxError("expected definition after", tag)


def reduceNewline(tag, left, right)
    if left is Juxtaposition(_, left', right')
        if isThisName(left', "def")
            reduceDefine(tag, right', right)
        if isThisName(left', "sig")
            addSignature(getTag(left'), right', right)
        if isThisName(left', "case")
            newCase(right', right)
        if isThisName(left', "if is")
            reduceIfIs(tag, right', right)
        reduceApply(tag, left, right)
    if isDefinition(left)
        applyDefinition(left, right)
    if isCase(left) and isCase(right)
        combineCases(tag, left, right)
    if isArrow(left) and isArrow(right)
        syntaxError("consecutive functions must be cases", tag)
    reduceApply(tag, left, right)


def reduceReserved(tag, _left, _right)
    syntaxError("reserved operator", tag)


def reduceReservedAdfix(tag, _operand)
    syntaxError("reserved operator", tag)


def reduceClose(_tag, _left, right)
    right


def reduceInfer(tag)
    PreInference(tag)


def reduceEquation(tag, left, right)
    PreEquation(tag, left, right)


def newSyntax'(tag, prior, precedence, associativity, fixity)
    special := not isNil(prior)
    Syntax(getTagLexeme(tag), precedence, precedence,
        associativity, special, '_', prior, fixity)


def newSyntax(tag, precedence, fixity, prior)
    if getLexeme(fixity) =*= "infix"
        newSyntax'(tag, prior, precedence, NA, Infix(reduceInfix))
    if getLexeme(fixity) =*= "infixL"
        newSyntax'(tag, prior, precedence, LA, Infix(reduceInfix))
    if getLexeme(fixity) =*= "infixR"
        newSyntax'(tag, prior, precedence, RA, Infix(reduceInfix))
    if getLexeme(fixity) =*= "interfix"
        newSyntax'(tag, prior, precedence, LA, Infix(reduceApply))
    if getLexeme(fixity) =*= "prefix"
        newSyntax'(tag, prior, precedence, LA, Prefix(reduceAdfix))
    if getLexeme(fixity) =*= "postfix"
        newSyntax'(tag, prior, precedence, LA, Postfix(reduceAdfix))
    astSyntaxError("invalid fixity", fixity)


def getAliasSyntax(state, name)
    if not isName(name)
        astSyntaxError("expected operator name", name)
    state.lookupSyntax(getLexeme(name)) ??
        astSyntaxError("syntax not defined", name)


def copySyntax(state, tag, name)
    lexeme := getTagLexeme(tag)
    match getAliasSyntax(state, name)
        case Syntax(_, l, r, a, s, b, p, f) ->
            Syntax(lexeme, l, r, a, s, b, p, f)


def findPrecedence(state, node)
    syntax' := state.lookupSyntax(getLexeme(node)) ??
        astSyntaxError("syntax not defined", node)
    match getAssociativity(syntax')
        case LA -> getRightPrecedence(syntax')
        case RA -> getLeftPrecedence(syntax')
        case NA -> astSyntaxError("invalid associativity for prior", node)


def parsePrecedence(state, node)
    if node is Number(_, precedence)
        if precedence > 99
            astSyntaxError("invalid precedence", node)
        precedence
    findPrecedence(state, node)


def defineSyntax(state, definition, name, right)
    tag := getTag(definition)
    if not isName(name)
        astSyntaxError("expected name operand to", definition)
    if right is Juxtaposition(_, fixity, argument)
        if isThisName(fixity, "alias")
            getAliasSyntax(state, argument)
        if isThisName(fixity, "syntax")
            copySyntax(state, getTag(name), argument)
        precedence := parsePrecedence(state, argument)
        prior := if isNumber(argument) then "" else getLexeme(argument)
        newSyntax(getTag(name), precedence, fixity, prior)
    astSyntaxError("invalid syntax definition", definition)


def coreAlias(lexeme, aliasName, leftPrecedence, rightPrecedence,
        associativity, fixity)
    (lexeme, Syntax(aliasName, leftPrecedence, rightPrecedence,
        associativity, True, '_', "", fixity))


def coreSyntax(lexeme, leftPrecedence, rightPrecedence, associativity, fixity)
    coreAlias(lexeme, lexeme, leftPrecedence, rightPrecedence,
        associativity, fixity)


def bracketSyntax(lexeme, bracketType, outerPrecedence, fixity)
    fixityCode := getFixityCode(fixity)
    leftPrecedence := if fixityCode = OPENFIX then outerPrecedence else 0
    rightPrecedence := if fixityCode = OPENFIX then 0 else outerPrecedence
    (lexeme, Syntax(lexeme, leftPrecedence, rightPrecedence,
        RA, True, bracketType, "", fixity))


OPERATORS := [newDictionary([
    bracketSyntax("", '\0', 0, Openfix(reduceOpenFile)),
    bracketSyntax("\0", '\0', 0, Closefix(reduceClose)),
    bracketSyntax("(", '(', 95, Openfix(reduceParentheses)),
    bracketSyntax(")", '(', 95, Closefix(reduceClose)),
    bracketSyntax("( ", '(', 95, Openfix(reduceOpenSection)),
    bracketSyntax(" )", '(', 95, Closefix(reduceCloseSection)),
    bracketSyntax("[", '[', 95, Openfix(reduceSquare)),
    bracketSyntax("]", '[', 95, Closefix(reduceClose)),
    bracketSyntax("{", '{', 95, Openfix(reduceCurly)),
    bracketSyntax("}", '{', 95, Closefix(reduceClose)),
    coreSyntax("\n", 1, 1, RA, Infix(reduceNewline)),
    coreSyntax(";;", 2, 2, RA, Infix(reduceNewline)),
    coreSyntax("def", 3, 3, NA, Prefix(reduceAdfix)),
    coreSyntax("sig", 3, 3, NA, Prefix(reduceAdfix)),
    coreSyntax(":=", 3, 3, RA, Infix(reduceDefine)),
    coreAlias("≔", ":=", 3, 3, RA, Infix(reduceDefine)),
    coreSyntax("::=", 3, 3, NA, Infix(reduceADTDefine)),
    coreAlias("⩴", "::=", 3, 3, NA, Infix(reduceADTDefine)),
    coreSyntax("where", 3, 3, RA, Infix(reduceWhere)),
    coreSyntax("|", 4, 4, NA, Infix(reduceReserved)),
    coreSyntax(",", 5, 5, LA, Infix(reduceCommaPair)),
    coreSyntax("|>", 6, 6, LA, Infix(reducePipeline)),
    coreAlias("⦊", "|>", 6, 6, LA, Infix(reducePipeline)),
    coreSyntax("<|", 6, 6, RA, Infix(reduceApply)),
    coreAlias("⦉","<|", 6, 6, RA, Infix(reduceApply)),
    coreSyntax("for", 7, 7, LA, Infix(For)),
    coreSyntax(";", 8, 8, RA, Infix(reduceNewline)),
    coreSyntax(":", 9, 9, NA, Infix(reduceColonPair)),
    coreSyntax("->", 10, 10, RA, Infix(reduceArrow)),
    coreAlias("↦", "->", 10, 10, RA, Infix(reduceArrow)),
    coreSyntax("<-", 10, 10, RA, Infix(reduceReverseArrow)),
    coreAlias("↤", "<-", 10, 10, RA, Infix(reduceReverseArrow)),
    coreSyntax("=>", 10, 10, RA, Infix(reduceDoubleArrow)),
    coreAlias("⇒", "=>", 10, 10, RA, Infix(reduceDoubleArrow)),
    coreSyntax(">->", 10, 10, RA, Infix(reduceForAll)),
    coreAlias("↣", ">->", 10, 10, RA, Infix(reduceForAll)),
    coreSyntax("case", 11, 11, NA, Prefix(reduceAdfix)),
    coreSyntax("forall", 11, 11, NA, Prefix(reduceAdfix)),
    coreAlias("∀", "forall", 11, 11, NA, Prefix(reduceAdfix)),
    coreSyntax("@", 12, 12, NA, Infix(reduceAsPattern)),
    coreSyntax("is", 13, 13, LA, Infix(reduceIs)),
    coreSyntax("abort", 14, 14, LA, Prefix(reduceAdfix)),
    coreSyntax("infer", 14, 14, NA, Nofix(reduceInfer)),
    coreSyntax("==", 20, 20, NA, Infix(reduceEquation)),
    coreAlias("≡", "==", 20, 20, NA, Infix(reduceEquation)),
    coreSyntax(".", 92, 92, LA, Infix(reducePipeline)),
    coreSyntax("$", 99, 99, LA, Prefix(reduceReservedAdfix)),
    coreSyntax("syntax", 99, 99, LA, Prefix(reduceAdfix)),
    coreSyntax("alias", 99, 99, LA, Prefix(reduceAdfix))
])]

#*
