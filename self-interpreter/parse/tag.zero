NOFIX := 0
PREFIX := 1
INFIX := 2
POSTFIX := 3
OPENFIX := 4
CLOSEFIX := 5

TagT ::= {Tag(lexeme : List(‚Ñï), fixity : ‚Ñï, location : LocationT, global : ùîπ)}

getTagLexeme(Tag(lexeme, _, _, _)) := lexeme
getTagFixity(Tag(_, fixity, _, _)) := fixity
getTagLocation(Tag(_, _, location, _)) := location
isGlobal(Tag(_, _, _, global)) := global

renameTag(Tag(_, _, location, global), lexeme, fixity) :=
    Tag(lexeme, fixity, location, global)
veil(tag) := renameTag(tag, "_", NOFIX)
setGlobal(Tag(lexeme, fixity, location, _)) :=
    Tag(lexeme, fixity, location, True)
setTagLocation(location, Tag(lexeme, fixity, _, global)) :=
    Tag(lexeme, fixity, location, global)
addPrefix(Tag(lexeme, fixity, location, global), prefix) :=
    Tag(prefix :: lexeme, fixity, location, global)
isSameTag(tag1, tag2) :=
    isSameLocation(getTagLocation(tag1), getTagLocation(tag2))


def showTag(Tag(lexeme, fixity, _, _))
    if lexeme is c :: _
        if c = 0 then "\\0"
        if c = '\n' then "\\n"
        if fixity = NOFIX then lexeme
        "(" ++ lexeme ++ ")"
    "\\0"


def showTagWithLocation(Tag(lexeme, _, location, _))
    showQuotedLexeme(lexeme) ++ " at " ++ showLocation(location)


def throwError(message, tag)
    abort message ++ " " ++ showTagWithLocation(tag) ++ "\n"


def syntaxError(message, tag)
    throwError("Syntax error: " ++ message, tag)


def internalError(message, tag)
    throwError("Internal error: " ++ message, tag)


def noTag
    Tag("", NOFIX, Location("", 0, 0), False)


# todo: delete getTokenTag
def getTokenTag(Token(lexeme, location, code))
    Tag(lexeme, NOFIX, location, False)

