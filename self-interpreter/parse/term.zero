#* term.zero

ClosureT(term) ::= {Closure(
    term : term,
    environment : ArrayT(ClosureT(term))
)}

getTerm(Closure(term, _)) := term
getEnvironment(Closure(_, environment)) := environment

enclose(term) := Closure(term, newArray([]))

OptimizationT(term) ::= {Optimization(
    arity : ℕ,
    operator : ((ClosureT(term) => ClosureT(term)) =>
        List(ClosureT(term)) => ClosureT(term)?)
)}

Term ::= {
    Unknown(tag : TagT),
    MetaVariable(tag : TagT, index : ℤ),
    Type(tag : TagT, index : ℤ),
    Variable(tag : TagT, index : ℤ),
    Singleton(tag : TagT, type : Term, index : ℤ),
    Function(tag : TagT, domain : Term, body : Term),
    Implication(tag : TagT, domain : Term, body : Term),
    Intersection(tag : TagT, domain : Term, body : Term),
    Application(tag : TagT, applicand : Term, argument : Term),
    Numeral(tag : TagT, type : Term, value : ℕ),
    Operation(tag : TagT, term : Term, optimization : OptimizationT(Term))
}


def getTermTag
    Unknown(tag) -> tag
    MetaVariable(tag, _) -> tag
    Type(tag, _) -> tag
    Variable(tag, _) -> tag
    Singleton(tag, _, _) -> tag
    Function(tag, _, _) -> tag
    Implication(tag, _, _) -> tag
    Intersection(tag, _, _) -> tag
    Application(tag, _, _) -> tag
    Numeral(tag, _, _) -> tag
    Operation(tag, _, _) -> tag


isUnknown := Unknown(_) -> True; _ -> False
isMetaVariable := MetaVariable(_, _) -> True; _ -> False
isType := Type(_, _) -> True; _ -> False
isVariable := Variable(_, _) -> True; _ -> False
isSingleton := Singleton(_, _, _) -> True; _ -> False
isFunction := Function(_, _, _) -> True; _ -> False
isImplication := Implication(_, _, _) -> True; _ -> False
isIntersection := Intersection(_, _, _) -> True; _ -> False
isApplication := Application(_, _, _) -> True; _ -> False
isNumeral := Numeral(_, _, _) -> True; _ -> False
isOperation := Operation(_, _, _) -> True; _ -> False


def FreeFunction(tag, body)
    Function(tag, Unknown(tag), body)


def splitSpine(term)
    if term is Application(_, left, right)
        (applicand, arguments) := splitSpine(left)
        (applicand, arguments ++ [right])
    (term, [])


def setTag(tag)
    Unknown(_) -> Unknown(tag)
    MetaVariable(_, index) -> MetaVariable(tag, index)
    Type(_, index) -> Type(tag, index)
    Variable(_, index) -> Variable(tag, index)
    Singleton(_, type, index) -> Singleton(tag, type, index)
    Function(_, domain, body) -> Function(tag, domain, body)
    Implication(_, domain, body) -> Implication(tag, domain, body)
    Intersection(_, domain, body) -> Intersection(tag, domain, body)
    Application(_, left, right) -> Application(tag, left, right)
    Numeral(_, type, value) -> Numeral(tag, type, value)
    Operation(_, term, op) -> Operation(tag, term, op)


def setLocation(Tag(_, _, location), term)
    term.setTag(getTermTag(term).setTagLocation(location))


def showConstruction(showTerm, headTag, arguments)
    argumentStrings := arguments.map(showTerm)
    if argumentStrings is argumentString :: argumentStrings'
        fixity := getTagFixity(headTag)
        lexeme := getTagLexeme(headTag)
        if fixity = INFIX and length(arguments) = 2
            items := argumentString :: lexeme :: argumentStrings'
            "(" ++ items.joinWith(" ") ++ ")"
        if fixity = PREFIX and length(arguments) = 1
            lexeme ++ "(" ++ argumentString ++ ")"
        if fixity = POSTFIX and length(arguments) = 1
            "(" ++ argumentString ++ ")" ++ lexeme
        showTag(headTag) ++ "(" ++ argumentStrings.joinWith(", ") ++ ")"
    showTag(headTag)


def showApplication(showTerm, applicand, argument)
    (headTerm, applicandArguments) := splitSpine(applicand)
    arguments := applicandArguments ++ [argument]
    if isVariable(headTerm)
        showConstruction(showTerm, getTermTag(headTerm), arguments)
    showTerm(headTerm) ++ "(" ++ arguments.map(showTerm).joinWith(", ") ++ ")"


def showPositiveMetaVariable(n)
    characters := ['a', 'b', 'c', 'd']
    if n < 4
        [characters.at(n) ?? '#']
    showPositiveMetaVariable((n // 4) -- 1) ++ [characters.at(n % 4) ?? '#']


def showMetaVariable(index)
    match index
        +_ n -> showPositiveMetaVariable(n)
        -_ n -> "■" ++ showSubscript(n)


def showDomain(showTerm, term)
    if isUnknown(term) then "" else " : " ++ showTerm(term)


def getSingletonParameters(type)
    if type is Implication(_, domain, body)
        domain :: getSingletonParameters(body)
    []


def showTerm
    Unknown(_) -> "■"
    MetaVariable(tag, index) -> showMetaVariable(index)
    Type(_, index) -> "⊤" ++ showIntegerSubscript(index)
    Variable(tag, index) -> showTag(tag) # ++ "#" ++ showInteger(index)
    Singleton(tag, type, index) ->
        "(" ++ showTerm(type) ++ ")" ++ showIntegerSubscript(index)
    Function(tag, domain, body) ->
        "(" ++ showTag(tag) ++ domain.showDomain(showTerm) ++
            " ↦ " ++ showTerm(body) ++ ")"
    Implication(tag, domain, body) ->
        if isImplication(domain) then
            "(" ++ showTerm(domain) ++ ")" ++ " ⇒ " ++ showTerm(body) else
                showTerm(domain) ++ " ⇒ " ++ showTerm(body)
    Intersection(tag, domain, body) -> (
        if domain is Singleton(_, type, _)
            showConstruction(showTerm, tag, getSingletonParameters(type))
        showTag(tag) ++ " ↣ " ++ showTerm(body)
    )
    Application(_, applicand, argument) ->
        showApplication(showTerm, applicand, argument)
    Numeral(_, _, n) -> showNatural(n)
    Operation(tag, _, _) -> showTag(tag)


def showTermLocation(term)
    showLocation(getTagLocation(getTermTag(term)))


def showTermAndLocation(term)
    showTerm(term) ++ " at " ++ showTermLocation(term)

#*
