#* term.zero

ClosureT(term) ::= {Closure(
    term : term,
    environment : ArrayT(ClosureT(term))
)}

getTerm(Closure(term, _)) := term
getEnvironment(Closure(_, environment)) := environment

enclose(term) := Closure(term, newArray([]))

OptimizationT(term) ::= {Optimization(
    arity : ℕ,
    operator : ((ClosureT(term) => ClosureT(term)) =>
        List(ClosureT(term)) => ClosureT(term)?)
)}

Term ::= {
    Metavariable(tag : TagT, index : ℤ),
    Type(tag : TagT, index : ℤ),
    Variable(tag : TagT, index : ℤ),
    Inference(tag : TagT, domain : (Term)?),
    Singleton(tag : TagT, type : Term, index : ℕ),
    Function(tag : TagT, domain : Term, body : Term),
    Implication(tag : TagT, domain : Term, body : Term),
    Intersection(tag : TagT, domain : Term, body : Term),
    Application(tag : TagT, applicand : Term, argument : Term),
    Equation(tag : TagT, left : Term, right : Term),
    Construction(tag : TagT, index : ℕ, arguments : List(Term), term : Term),
    Numeral(tag : TagT, type : Term, value : ℕ),
    Operation(tag : TagT, term : Term, optimization : OptimizationT(Term))
}

Unknown(tag) := Variable(tag, +_ 0)

def getTermTag
    case Metavariable(tag, _) -> tag
    case Type(tag, _) -> tag
    case Variable(tag, _) -> tag
    case Inference(tag, _) -> tag
    case Singleton(tag, _, _) -> tag
    case Function(tag, _, _) -> tag
    case Implication(tag, _, _) -> tag
    case Intersection(tag, _, _) -> tag
    case Application(tag, _, _) -> tag
    case Equation(tag, _, _) -> tag
    case Construction(tag, _, _, _) -> tag
    case Numeral(tag, _, _) -> tag
    case Operation(tag, _, _) -> tag


isMetavariable := case Metavariable(_, _) -> True; case _ -> False
isType := case Type(_, _) -> True; case _ -> False
isVariable := case Variable(_, _) -> True; case _ -> False
isInference := case Inference(_, _) -> True; case _ -> False
isSingleton := case Singleton(_, _, _) -> True; case _ -> False
isFunction := case Function(_, _, _) -> True; case _ -> False
isImplication := case Implication(_, _, _) -> True; case _ -> False
isIntersection := case Intersection(_, _, _) -> True; case _ -> False
isApplication := case Application(_, _, _) -> True; case _ -> False
isEquation := case Equation(_, _, _) -> True; case _ -> False
isConstruction := case Construction(_, _, _, _) -> True; case _ -> False
isNumeral := case Numeral(_, _, _) -> True; case _ -> False
isOperation := case Operation(_, _, _) -> True; case _ -> False

def isUnknown(term)
    if term is Variable(_, index)
        abs(index) = 0
    False


def FreeFunction(tag, body)
    Function(tag, Unknown(tag), body)


def splitSpine(term)
    if term is Application(_, left, right)
        (applicand, arguments) := splitSpine(left)
        (applicand, arguments ++ [right])
    (term, [])


def setTag(tag)
    case Metavariable(_, index) -> Metavariable(tag, index)
    case Type(_, index) -> Type(tag, index)
    case Variable(_, index) -> Variable(tag, index)
    case Inference(_, domain) -> Inference(tag, domain)
    case Singleton(_, type, index) -> Singleton(tag, type, index)
    case Function(_, domain, body) -> Function(tag, domain, body)
    case Implication(_, domain, body) -> Implication(tag, domain, body)
    case Intersection(_, domain, body) -> Intersection(tag, domain, body)
    case Application(_, left, right) -> Application(tag, left, right)
    case Equation(_, left, right) -> Equation(tag, left, right)
    case Construction(_, index, arguments, term) ->
        Construction(tag, index, arguments, term)
    case Numeral(_, type, value) -> Numeral(tag, type, value)
    case Operation(_, term, op) -> Operation(tag, term, op)


def setLocation(tag, term)
    term.setTag(getTermTag(term).setTagLocation(getTagLocation(tag)))


def showConstruction(showTerm, headTag, arguments)
    argumentStrings := arguments.map(showTerm)
    if argumentStrings is argumentString :: argumentStrings'
        fixity := getTagFixity(headTag)
        lexeme := getTagLexeme(headTag)
        if fixity = INFIX and length(arguments) = 2
            items := argumentString :: lexeme :: argumentStrings'
            "(" ++ items.joinWith(" ") ++ ")"
        if fixity = PREFIX and length(arguments) = 1
            lexeme ++ "(" ++ argumentString ++ ")"
        if fixity = POSTFIX and length(arguments) = 1
            "(" ++ argumentString ++ ")" ++ lexeme
        showTag(headTag) ++ "(" ++ argumentStrings.joinWith(", ") ++ ")"
    showTag(headTag)


def showPositiveMetavariable(n)
    characters := ['a', 'b', 'c', 'd']
    if n < 4
        [characters.pick(n) ?? '#']
    showPositiveMetavariable((n // 4) -- 1) ++ [characters.pick(n % 4) ?? '#']


def showMetavariable(index)
    match index
        case +_ n -> showPositiveMetavariable(n)
        case -_ n -> "■" ++ showSubscript(n)


def needsParentheses
    case Function(_, _, _) -> True
    case Implication(_, _, _) -> True
    case Intersection(_, domain, _) -> True
    case _ -> False


def showTagBracket(tag)
    "⸨" ++ showTag(tag) ++ "@" ++
        showShortLocation(getTagLocation(tag)) ++ "⸩"


def showMetavariableWithTag(tag, index)
    showMetavariable(index) ++ showTagBracket(tag)


def isTypeZero(term)
    if term is Type(_, index)
        index =:= +_ 0
    False


def isTypeFamily(term)
    if term is Type(_, index)
        isNegative(index)
    False


def showTerm
    case Metavariable(tag, index) -> showMetavariableWithTag(tag, index)
    case Type(tag, index) -> if isPositive(index) then
        "⊤" ++ showIntegerSubscript(index) else
        "⊤{" ++ showTag(tag) ++ "}"
    case Variable(tag, index) ->
        if abs(index) = 0 then "■" else
            showTag(tag) # ++ showIntegerSubscript(index)
    case Inference(tag, domain) -> "infer"
    case Singleton(tag, type, index) -> "{" ++ showTag(tag) ++ "}"
    case Function(tag, domain, body) ->
        if isUnknown(domain) or isTypeFamily(domain) then
            showTag(tag) ++ " ↦ " ++ showTerm(body) else
            "(" ++ showTag(tag) ++ " : " ++ showTerm(domain) ++ ") ↦ " ++
            showTerm(body)
    case Implication(tag, domain, body) ->
        if needsParentheses(domain) then
            "(" ++ showTerm(domain) ++ ") ⇒ " ++ showTerm(body) else
                showTerm(domain) ++ " ⇒ " ++ showTerm(body)
    case Intersection(tag, domain, body) -> (
        if isTypeZero(domain)
            "∀(" ++ showTag(tag) ++ ") " ++ showTerm(body)
        "∀(" ++ showTag(tag) ++ " : " ++ showTerm(domain) ++ ") " ++
            showTerm(body)
    )
    case Application(_, applicand, argument) ->
        if needsParentheses(applicand) then
            "(" ++ showTerm(applicand) ++ ")(" ++ showTerm(argument) ++ ")" else
            showTerm(applicand) ++ "(" ++ showTerm(argument) ++ ")"
    case Equation(_, left, right) ->
        "((" ++ showTerm(left) ++ ") ≡ (" ++ showTerm(right) ++ "))"
    case Construction(tag, index, arguments, term) ->
        showConstruction(showTerm, tag, arguments)
    case Numeral(_, _, n) -> showNatural(n)
    case Operation(tag, _, _) -> showTag(tag)


def showTermLocation(term)
    showLocation(getTagLocation(getTermTag(term)))


def showTermAndLocation(term)
    showTerm(term) ++ " at " ++ showTermLocation(term)

#*
