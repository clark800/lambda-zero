#* term.zero

ClosureT(term) ::= {Closure(
    term : term,
    environment : ArrayT(ClosureT(term))
)}

getTerm(Closure(term, _)) := term
getEnvironment(Closure(_, environment)) := environment

enclose(term) := Closure(term, newArray([]))

OptimizationT(term) ::= {Optimization(
    arity : ℕ,
    operator : ((ClosureT(term) => ClosureT(term)) =>
        List(ClosureT(term)) => ClosureT(term)?)
)}

# Wildcard is a MetaVariable that is only referred to once, so it will only be
# unified once, and thus can never cause a type error and does not need to be
# stored in the metacontext
Term ::= {
    Unknown(tag : TagT),
    Wildcard(tag : TagT),
    MetaVariable(tag : TagT, id : ℕ),
    Universe(tag : TagT, level : ℕ),
    Constant(tag : TagT, index : ℕ),
    Variable(tag : TagT, index : ℕ),
    Function(tag : TagT, isCase : 𝔹,
        domain : Term, codomain : Term, body : Term),
    Implication(tag : TagT, type : Term, body : Term),
    Application(tag : TagT, applicand : Term, argument : Term),
    Construction(tag : TagT, parameters : List(Term), type : Term,
        signatures : List(Term)),
    Element(tag : TagT, type : Term, term : Term),
    Numeral(tag : TagT, type : Term, value : ℕ),
    Operation(tag : TagT, type : Term, term : Term, op : OptimizationT(Term))
}

MetaClosureT ::= {MetaClosure(
    # first is value, second is annotated type
    #metacontext : ArrayT((ClosureT(Term))? && (ClosureT(Term))?),
    metacontext : ArrayT((ClosureT(Term))?),
    closure : ClosureT(Term)
)}

def getTermTag
    Unknown(tag) -> tag
    Wildcard(tag) -> tag
    MetaVariable(tag, _) -> tag
    Universe(tag, _) -> tag
    Constant(tag, _) -> tag
    Variable(tag, _) -> tag
    Function(tag, _, _, _, _) -> tag
    Implication(tag, _, _) -> tag
    Application(tag, _, _) -> tag
    Construction(tag, _, _, _) -> tag
    Element(tag, _, _) -> tag
    Numeral(tag, _, _) -> tag
    Operation(tag, _, _, _) -> tag


isUnknown := Unknown(_) -> True; _ -> False
isWildcard := Wildcard(_) -> True; _ -> False
isMetaVariable := MetaVariable(_, _) -> True; _ -> False
isUniverse := Universe(_, _) -> True; _ -> False
isConstant := Constant(_, _) -> True; _ -> False
isVariable := Variable(_, _) -> True; _ -> False
isFunction := Function(_, _, _, _, _) -> True; _ -> False
isImplication := Implication(_, _, _) -> True; _ -> False
isApplication := Application(_, _, _) -> True; _ -> False
isConstruction := Construction(_, _, _, _) -> True; _ -> False
isElement := Element(_, _, _) -> True; _ -> False
isNumeral := Numeral(_, _, _) -> True; _ -> False
isOperation := Operation(_, _, _, _) -> True; _ -> False


def CaseFunction(tag, domain, codomain, body)
    Function(tag, True, domain, codomain, body)


def FreeFunction(tag, body)
    wildcard := Wildcard(veil(tag))
    Function(tag, False, wildcard, wildcard, body)


def splitSpine(term)
    if term is Application(_, left, right)
        (applicand, arguments) := splitSpine(left)
        (applicand, arguments ++ [right])
    (term, [])


def setTag(tag)
    Unknown(_) -> Unknown(tag)
    Wildcard(_) -> Wildcard(tag)
    MetaVariable(_, index) -> MetaVariable(tag, index)
    Universe(_, level) -> Universe(tag, level)
    Constant(_, index) -> Constant(tag, index)
    Variable(_, index) -> Variable(tag, index)
    Function(_, isCase, domain, codomain, body) ->
        Function(tag, isCase, domain, codomain, body)
    Implication(_, type, body) -> Implication(tag, type, body)
    Application(_, left, right) -> Application(tag, left, right)
    Construction(_, parameters, type, signatures) ->
        Construction(tag, parameters, type, signatures)
    Element(_, type, term) -> Element(tag, type, term)
    Numeral(_, type, value) -> Numeral(tag, type, value)
    Operation(_, type, term, op) -> Operation(tag, type, term, op)


def setLocation(Tag(_, _, location), term)
    term.setTag(getTermTag(term).setTagLocation(location))


def isSameHead(term)
    case Unknown(_)
        False
    case Wildcard(_)
        False
    case MetaVariable(_, address)
        if term is MetaVariable(_, address')
            address = address'
        False
    case Universe(_, level)
        if term is Universe(_, level')
            level = level'
        False
    case Constant(_, index)
        if term is Constant(_, index')
            index = index'
        False
    case Variable(tag, _)
        False
    case Function(_, _, _, _, _)
        isFunction(term)
    case Implication(_, _, _)
        isImplication(term)
    case Application(_, _, _)
        isApplication(term)
    case Construction(tag, _, _, _)
        isConstruction(term) and
            getTagLexeme(tag) =*= getTagLexeme(getTermTag(term))
    case Element(_, _, _)
        isElement(term)
    case Numeral(_, _, value)
        if term is Numeral(_, _, value')
            value = value'
        False
    case Operation(tag, _, _, _)
        if term is Operation(tag', _, _, _)
            getTagLexeme(tag) =*= getTagLexeme(tag')
        False


def getComponents
    Unknown(_) -> []
    Wildcard(_) -> []
    MetaVariable(_, _) -> []
    Universe(_, _) -> []
    Constant(_, _) -> []
    Variable(_, _) -> []
    Function(_, _, domain, codomain, body) -> [domain, codomain, body]
    Implication(_, type, body) -> [type, body]
    Application(_, left, right) -> [left, right]
    Construction(_, parameters, _, _) -> parameters
    Element(_, type, term) -> [type, term]
    Numeral(_, _, _) -> []
    Operation(_, _, _, _) -> []


def mapComponents(f, term)
    match term
        Unknown(_) -> term
        Wildcard(_) -> term
        MetaVariable(_, _) -> term
        Universe(_, _) -> term
        Constant(_, _) -> term
        Variable(_, _) -> term
        Function(tag, isCase, domain, codomain, body) ->
            Function(tag, isCase, f(domain), f(codomain), f(body))
        Implication(tag, type, body) -> Implication(tag, f(type), f(body))
        Application(tag, left, right) -> Application(tag, f(left), f(right))
        Construction(tag, parameters, type, signatures) ->
            Construction(tag, parameters.map(f), type, signatures)
        Element(tag, type, term) -> Element(tag, f(type), f(term))
        Numeral(_, _, _) -> term
        Operation(_, _, _, _) -> term


def showConstruction(showTerm, headTag, arguments)
    argumentStrings := arguments.map(showTerm)
    if argumentStrings is argumentString :: argumentStrings'
        fixity := getTagFixity(headTag)
        lexeme := getTagLexeme(headTag)
        if fixity = INFIX and length(arguments) = 2
            items := argumentString :: lexeme :: argumentStrings'
            "(" ++ items.joinWith(" ") ++ ")"
        if fixity = PREFIX and length(arguments) = 1
            lexeme ++ "(" ++ argumentString ++ ")"
        if fixity = POSTFIX and length(arguments) = 1
            "(" ++ argumentString ++ ")" ++ lexeme
        showTag(headTag) ++ "(" ++ argumentStrings.joinWith(", ") ++ ")"
    showTag(headTag)


def showApplication(showTerm, applicand, argument)
    (headTerm, applicandArguments) := splitSpine(applicand)
    arguments := applicandArguments ++ [argument]
    if isConstant(headTerm)
        showConstruction(showTerm, getTermTag(headTerm), arguments)
    showTerm(headTerm) ++ "(" ++ arguments.map(showTerm).joinWith(", ") ++ ")"


def showMetaVariable(n)
    characters := ['a', 'b', 'c', 'd']
    if n < 4
        [characters.at(n) ?? '#']
    showMetaVariable((n // 4) -- 1) ++ [characters.at(n % 4) ?? '#']


def showTerm
    Unknown(_) -> "■"
    Wildcard(_) -> "☆"
    MetaVariable(tag, n) -> showMetaVariable(n)
    Universe(_, level) -> "⊤" ++ showSubscript(level)
    Constant(tag, n) -> showTag(tag) # ++ "$" ++ showNatural(n)
    Variable(tag, n) -> showTag(tag) # ++ "#" ++ showNatural(n)
    Function(tag, _, domain, _, body) ->
        "(" ++ showTag(tag) ++ " : " ++
            showTerm(domain) ++ " ↦ " ++ showTerm(body) ++ ")"
    Implication(tag, type, body) ->
        if isImplication(type) then
            "(" ++ showTerm(type) ++ ")" ++ " ⇒ " ++ showTerm(body) else
                showTerm(type) ++ " ⇒ " ++ showTerm(body)
    Application(_, applicand, argument) ->
        showApplication(showTerm, applicand, argument)
    Construction(tag, parameters, _, _) ->
        showConstruction(showTerm, tag, parameters)
    Element(tag, _, term) -> showTerm(term)
    Numeral(_, _, n) -> showNatural(n)
    Operation(tag, _, _, _) -> showTag(tag)


def showTermLocation(term)
    showLocation(getTagLocation(getTermTag(term)))


def showTermAndLocation(term)
    showTerm(term) ++ " at " ++ showTermLocation(term)

#*
