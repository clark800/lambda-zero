#@ tokens.zero

def parseEscapeCode(code, tag)
    if code = '0' then return '\0'
    if code = 'n' then return '\n'
    if code = 't' then return '\t'
    if code = 'r' then return '\r'
    if code = '\\' then return '\\'
    if code = '\"' then return '\"'
    if code = '\'' then return '\''
    error showSyntaxError("invalid escape sequence in", tag)


def parseQuotedCharacter(tag, string)
    if string is c :: cs
        if c =/= '\\'
            return c
        if cs is c' :: _
            parseEscapeCode(c', tag)
        error showSyntaxError("missing end quote for", tag)
    error showSyntaxError("missing end quote for", tag)


def splitStringLiteral(string)
    if string is c :: cs
        n := if c = '\\' and not isNil(cs) then 2 else 1
        string.take(n) :: splitStringLiteral(string.drop(n))
    []


def getQuoteContents(tag)
    lexeme := getTagLexeme(tag)
    if lexeme.length > 1 and lexeme.reverse.take(1) =*= lexeme.take(1)
        return dropLast(lexeme.drop(1))
    error showSyntaxError("missing end quote for", tag)


def getQuotedCharacters(tag)
    try contents := getQuoteContents(tag)
    splitStringLiteral(contents).tryMap(parseQuotedCharacter(tag))


def parseStringLiteral(tag)
    try characters := getQuotedCharacters(tag)
    return buildList(tag, characters.map(Number(tag)))


def parseCharacterLiteral(tag)
    try characters := getQuotedCharacters(tag)
    if isNil(characters) or length(characters) > 4
        error showSyntaxError("invalid character literal", tag)
    return Number(tag, characters.cascade(n -> c -> 256 * n + c, 0))


def parseNumericLiteral(tag)
    lexeme := getTagLexeme(tag)
    if lexeme.any((not) <> isDigit)
        error showSyntaxError("invalid token", tag)
    maxNatural := "9223372036854775807"
    natural := lexeme.dropWhile((= '0'))
    if natural.length > maxNatural.length
        error showSyntaxError("magnitude of numeral is too large", tag)
    if natural.length = maxNatural.length and
            zipWith((>), natural, maxNatural).any(id)
        error showSyntaxError("magnitude of numeral is too large", tag)
    parsed := parseNatural(lexeme)
    if isVoid(parsed)
        error showSyntaxError("invalid numeral", tag)
    return Number(tag, parsed ?? 0)


def parseOperator(tag, value, syntax')
    tag' := renameTag(tag, getAlias(syntax'), getFixityCode(getFixity(syntax')))
    Operator(tag', value, syntax')


def parseSymbol(tag, value, state)
    lexeme := getTagLexeme(tag)
    state.lookupSyntax(lexeme).mapJust(
        OperatorItem <> parseOperator(tag, value)) ??
        OperandItem(Name(tag))


def parseToken(state, token)
    tag := getTokenTag(token)
    match getTokenCode(token)
        case Space -> error showInternalError("Space reached parseToken", tag)
        case VSpace -> error showInternalError("VSpace reached parseToken", tag)
        case Newline -> return state.parseSymbol(renameTag(tag, "\n", INFIX),
            length(getTagLexeme(tag)) -- 1)
        case Symbolic -> return state.parseSymbol(tag, 0)
        case Numeric -> parseNumericLiteral(tag).mapRight(OperandItem)
        case Character -> parseCharacterLiteral(tag).mapRight(OperandItem)
        case String -> parseStringLiteral(tag).mapRight(OperandItem)
        case Comment ->
            error showInternalError("Comment reached parseToken", tag)
        case Invalid -> error showSyntaxError("invalid character", tag)

#@
