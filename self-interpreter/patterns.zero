#* patterns.zero

def getHead(node)
    with node as Juxtaposition(_, left, _)
        getHead(left)
    node


def getArguments(pattern)
    with pattern as Juxtaposition(_, left, right)
        getArguments(left) ++ [right]
    []


def newProjector(tag, size, index)
    (UnderscoreArrow(tag)^<>(size))(Underscore(tag, size -- index))


def newPatternArrow(pattern, body)
    with pattern as ColonPair(tag, left, right)
        newPatternArrow(left, body).setAnnotation(right)
    if isName(pattern)
        LockedArrow(pattern, body)
    with pattern as AsPattern(tag, left, right)
        newPatternArrow(left, Juxtaposition(tag,
            newPatternArrow(right, body), Underscore(tag, 1)))
    if isJuxtaposition(pattern)
        constructor := getHead(pattern)
        tag := getTag(constructor)
        arguments := getArguments(pattern)
        size := length(arguments)
        underscore := Underscore(tag, 1)
        function := arguments.fold(newPatternArrow, body)
        projectors := (0 .. size -- 1).map(newProjector(tag, size))
        projections := projectors.map(Juxtaposition(tag, underscore))
        lockArrow(StrictArrow(tag, [constructor],
            projections.cascade(Juxtaposition(tag), function)))
    syntaxError("invalid parameter", pattern)


def getNameAndValue(f, left, right)
    if isNull(right)
        abort("NULL")                    # force syntax errors
    with left as Juxtaposition(_, left', right')
        getNameAndValue(f, left', f(right', right))
    (left, right)


def newCaseArrow(left, right)
    pattern := with left as AsPattern(_, _, pattern'); pattern' <| left
    (name, reconstructor) :=
        getNameAndValue(newPatternArrow, pattern, right)
    constructor := Name(getTag(name))  # name could be a number
    tag := getTag(constructor)
    underscore := Underscore(tag, 1)
    with left as AsPattern(tag, asLeft, _)
        wrapper := newPatternArrow(asLeft, reconstructor)
        argument := Juxtaposition(tag, wrapper, underscore)
        StrictArrow(tag, [constructor],
            Juxtaposition(tag, underscore, argument))
    StrictArrow(tag, [constructor],
        Juxtaposition(tag, underscore, reconstructor))


def addCases(tag, base, extension)
    with extension as Juxtaposition(_, left, right)
        Juxtaposition(tag, addCases(tag, base, left), right)
    base


def newCaseBody(tag, left, right)
    with left as Arrow(_, type, _, _, _, body)
        base := with type as Simple;
            Juxtaposition(tag, Underscore(tag, 1), body) <| body
        with right as Arrow(_, type', _, _, _, body')
            with type' as Simple
                Juxtaposition(tag, base, body')
            addCases(tag, base, body')
        syntaxError("internal error", left)
    syntaxError("internal error", left)


def getCaseConstructors(arrow)
    with arrow as Arrow(_, type, constructors, parameter, _, _)
        with type as Simple
            [parameter]
        constructors
    []


def isDefaultCase(arrow)
    with arrow as Arrow(_, type, _, parameter, _, _)
        with type as Simple
            isUnderscore(getTag(parameter))
        False
    False


def getReconstructor(arrow)
    with arrow as Arrow(_, type, _, _, _, body)
        with type as Simple
            body
        with body as Juxtaposition(_, _, right)
            right
        syntaxError("internal error", arrow)
    syntaxError("internal error", arrow)


def chainCases(tag, arrow, fallback)
    deconstructor := Name(addPrefix(getTag(arrow), '@'))
    reconstructor := getReconstructor(arrow)
    body := Juxtaposition(tag, Juxtaposition(tag, Juxtaposition(tag,
        deconstructor, reconstructor), fallback), Underscore(tag, 1))
    SimpleArrow(Name(veil(tag)), body)


def combineCases(tag, left, right)
    if isDefaultCase(right)
        chainCases(tag, left, right)
    constructors := getCaseConstructors(left) ++ getCaseConstructors(right)
    StrictArrow(tag, constructors, newCaseBody(tag, left, right))

#*
