#* patterns.zero

define getArguments(pattern)
    if not isJuxtaposition(pattern)
        []
    getArguments(getLeft(pattern)) ++ [getRight(pattern)]


define newProjector(tag, size, index)
    (UnderscoreArrow(tag)^<>(size))(newUnderscore(tag, size - index))


define newPatternArrow(tag, pattern, body)
    if isName(pattern)
        Arrow(tag, pattern, body)
    if isAsPattern(pattern)
        Arrow(tag, getName(pattern), Juxtaposition(tag,
            newPatternArrow(tag, getPattern(pattern), body),
            Reference(getTag(getName(pattern)), 1)))
    if isJuxtaposition(pattern)
        arguments := getArguments(pattern)
        size := length(arguments)
        underscore := newUnderscore(tag, 1)
        function := arguments.fold(newPatternArrow(tag), body)
        projectors := (0 .. size - 1).map(newProjector(tag, size))
        projections := projectors.map(Juxtaposition(tag, underscore))
        UnderscoreArrow(tag, projections.cascade(Juxtaposition(tag), function))
    syntaxError("invalid parameter", pattern)


define getNameAndValue(f, left, right)
    if isNull(right)
        undefined                   # force syntax errors
    if not isJuxtaposition(left)
        (left, right)
    getNameAndValue(f, getLeft(left), f(getRight(left), right))


define newCaseArrow(tag, left, right)
    if isThisName(left, "()")
        UnderscoreArrow(tag, right)  # TODO: add type annotation here
    newPatternArrow(tag, left, right)


define newCase(tag, left, right)
    pattern := if isAsPattern(left) then getPattern(left) else left
    (constructor, reconstructor) :=
        getNameAndValue(newCaseArrow(tag), pattern, right)
    underscore := newUnderscore(tag, 1)
    if not isAsPattern(left)
        Case(tag, [constructor], Juxtaposition(tag, underscore, reconstructor))
    wrapper := newPatternArrow(tag, getName(left), reconstructor)
    argument := Juxtaposition(tag, wrapper, underscore)
    Case(tag, [constructor], Juxtaposition(tag, underscore, argument))


define mergeCaseBodies(tag, left, right)
    if not isJuxtaposition(right)
        left
    merged := mergeCaseBodies(tag, left, getLeft(right))
    Juxtaposition(tag, merged, getRight(right))


define combineCases(left, right)
    tag := renameTag(getTag(left), "_")
    body := mergeCaseBodies(tag, getCaseBody(left), getCaseBody(right))
    Case(tag, getConstructors(left) ++ getConstructors(right), body)

#*
