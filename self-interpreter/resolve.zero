#* resolve.zero


def resolveError(metavariable, metacontext)
    abort("Type error: recursion in " ++
        showTermAndLocation(metavariable) ++ ":\n\n" ++
        showMetacontext(metacontext))


# for any variable in term that has a value in the environment, replace
# the variable with the value from the environment recursively
def resolve'(keepGlobals, metacontext, metaindices, depth, closure)
    _ @ Closure(term, environment) := closure
    resolveBase := resolve'(keepGlobals, metacontext)
    resolveClosure(c) := resolveBase(metaindices, 0, c)
    resolve''(t) := resolveBase(metaindices, depth, Closure(t, environment))
    resolve'''(t) := resolveBase(metaindices, up depth, Closure(t, environment))

    match term
        case Metavariable(tag, index)
            if index is +_ index'
                if metacontext.getMetaValue(index') is Just(closure')
                    if metaindices.contains((= index'))
                        resolveError(term, metacontext)
                    # todo: setLocation of term in closure' to tag
                    resolveBase(index' :: metaindices, 0, closure')
                term
            term
        case Type(tag, index) -> term
        case Variable(tag, index)
            if keepGlobals and isGlobal(tag)
                term
            index' := abs(index)
            if index' <= depth
                term
            if environment.peek(index' -- depth -- 1) is Just(closure')
                resolveClosure(closure')
            term
        case Inference(tag, domain)
            Inference(tag, domain.mapJust(resolve''))
        case Singleton(tag, type, index)
            Singleton(tag, resolve''(type), index)
        case Abstraction(tag, domain, body)
            Abstraction(tag, resolve''(domain), resolve'''(body))
        case Implication(tag, domain, body)
            Implication(tag, resolve''(domain), resolve'''(body))
        case Intersection(tag, domain, body)
            Intersection(tag, resolve''(domain), resolve'''(body))
        case Application(tag, left, right)
            Application(tag, resolve''(left), resolve''(right))
        case Equation(tag, left, right)
            Equation(tag, resolve''(left), resolve''(right))
        case Construction(tag, index, arguments, term)
            Construction(tag, index, arguments.map(resolve''), resolve''(term))
        case Numeral(_, _, _) -> term
        case Operation(_, _, _) -> term


def resolve(metacontext, closure)
    resolve'(False, metacontext, [], 0, closure)


def resolveClosure(closure)
    closure.resolve(emptyMetacontext)


def resolveLocals(metacontext, closure)
    resolve'(True, metacontext, [], 0, closure)


def showClosure(closure)
    showTerm(closure.resolveLocals(emptyMetacontext))


#*
