#* serialize.zero

define serialize(closure)
    define serialize'(Closure(term, environment), depth)
        match term
            case Variable(tag, debruijn)
                if debruijn <= depth then showTag(tag) else
                    serialize'(environment.seek(debruijn -- depth -- 1), 0)
            case Abstraction(tag, _, body)
                "(" ++ showTag(tag) ++ " -> " ++
                    serialize'(Closure(body, environment), depth + 1) ++ ")"
            case Application(_, _, applicand, argument)
                "(" ++
                serialize'(Closure(applicand, environment), depth) ++ " " ++
                serialize'(Closure(argument, environment), depth) ++ ")"
            case Numeral(_, n)
                showNatural(n)
            case Operation(tag, _, _)
                showTag(tag)

    result := serialize'(closure, 0)
    # ensure that full serialization succeeds before returning anything
    # or else lazy output will show part of the serailization even if
    # an error occurs during parsing
    if result.length = 0 then "" else result


define serializeString(evaluateClosure, closure)
    closure' := evaluateClosure(closure)
    term := getTerm(closure')
    maybe nil := maybeIsNil(term)
    if nil
        Just([])

    dummy := Closure(Numeral(noTag, 0), newRandomAccessList([]))
    environment' := getEnvironment(closure').push(dummy).push(dummy)
    enclose := `Closure(environment')

    maybe headTerm := maybeHead(term)
    maybe character := maybeNatural(getTerm(evaluateClosure(enclose(headTerm))))

    maybe tailTerm := maybeTail(term)
    maybe remaining := serializeString(evaluateClosure, enclose(tailTerm))

    Just(character :: remaining)


#*
