#* serialize.zero


def maybeDebruijnIndex(term)
    if term is Variable(_, index)
        Just(abs(index))
    Void


def maybeBody(term)
    if term is Abstraction(_, _, body)
        Just(body)
    Void


def maybeApplicand(term)
    if term is Application(_, applicand, _)
        Just(applicand)
    Void


def maybeArgument(term)
    if term is Application(_, _, argument)
        Just(argument)
    Void


def maybeNatural(term)
    if term is Numeral(_, _, value)
        Just(value)
    Void


def maybeHead(term)
    maybe body := maybeBody(term)
    maybe body' := maybeBody(body)
    maybe applicand := maybeApplicand(body')
    maybeArgument(applicand)


def maybeTail(term)
    maybe body := maybeBody(term)
    maybe body' := maybeBody(body)
    maybeArgument(body')


def maybeIsNil(term)
    # returns True for [], False for non-nil list, Void for non-list
    # term should be (n -> p -> n) or (n -> p -> ((p c) cs))

    def ifNil(result)
        maybe body := maybeBody(term)
        maybe body' := maybeBody(body)
        maybe debruijn := maybeDebruijnIndex(body')
        if debruijn = 2 then Just(result) else Void

    def ifPush(result)
        maybe body := maybeBody(term)
        maybe body' := maybeBody(body)
        maybe applicand := maybeApplicand(body')
        maybe applicand' := maybeApplicand(applicand)
        maybe debruijn := maybeDebruijnIndex(applicand')
        if debruijn = 1 then Just(result) else Void

    ifNil(Just(True)) ?? ifPush(Just(False)) ?? Void


def serializeString(evaluateClosure, closure)
    _ @ Closure(term, environment) := evaluateClosure(closure)
    maybe nil := maybeIsNil(term)
    if nil
        Just([])

    unknown := enclose(Unknown(getTermTag(term)))
    environment' := environment.push(unknown).push(unknown)

    maybe headTerm := maybeHead(term)
    closure' := Closure(headTerm, environment')
    maybe character := maybeNatural(getTerm(evaluateClosure(closure')))

    maybe tailTerm := maybeTail(term)
    closure'' := Closure(tailTerm, environment')
    maybe remaining := serializeString(evaluateClosure, closure'')

    Just(character :: remaining)

#*
