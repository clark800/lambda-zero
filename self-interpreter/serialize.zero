showAST(node) := (
    node.isReference?
        showToken(node) ++ "{" ++ showInteger(getData(node)) ++ "}"
    node.isLambda?
        "(" ++ showToken(getParameter(node)) ++ " -> " ++
               showAST(getBody(node)) ++ ")"
    node.isApplication?
        "(" ++ showAST(getLeft(node)) ++ " " ++
               showAST(getRight(node)) ++ ")"
    node.isInteger?
        "#" ++ showInteger(getData(node))
    node.isBuiltin?
        "$" ++ showToken(node)
    showToken(node)
)

serialize(closure) := (
    serialize'(closure', depth) := (
        (term, environment) := closure'
        term.isApplication ?
            "(" ++ serialize'((getLeft(term), environment), depth) ++
            " " ++ serialize'((getRight(term), environment), depth) ++ ")"
        term.isLambda ?
            "(" ++ showToken(getParameter(term)) ++ " -> " ++
            serialize'((getBody(term), environment), depth + 1) ++ ")"
        term.isReference ? (
            debruijn := getData(term)
            debruijn >= depth ? serialize'(environment[debruijn - depth], 0)
            showToken(term)
        )
        term.isInteger ? showInteger(getData(term))
        showToken(term)
    )
    result := serialize'(closure, 0)
    // ensure that full serialization succeeds before returning anything
    // or else lazy output will show part of the serailization even if
    // an error occurs during parsing
    result.length = 0 ? "" || result
)
