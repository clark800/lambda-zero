--* serialize.zero

showAST(node) := getNodeType(node).match(
    SYMBOL -> showLexeme(node);
    LAMBDA -> "(" ++ showLexeme(getParameter(node)) ++ " -> " ++
               showAST(getBody(node)) ++ ")";
    APPLICATION -> "(" ++ showAST(getLeft(node)) ++ " " ++
               showAST(getRight(node)) ++ ")";
    DEFINITION -> "(" ++ showAST(getLeft(node)) ++ " := " ++
               showAST(getRight(node)) ++ ")";
    NATURAL -> showNatural(getValue(node));
    BUILTIN -> "[" ++ showLexeme(node) ++ "]";
)

serialize(closure) := (
    serialize'(closure', depth) := (
        term := getTerm(closure')
        environment := getEnvironment(closure')
        getNodeType(term).match(
            SYMBOL -> (
                debruijn := getDebruijnIndex(term)
                if debruijn > depth
                    serialize'(environment[debruijn - depth - 1], 0)
                showLexeme(term)
            );
            LAMBDA -> "(" ++ showLexeme(getParameter(term)) ++ " -> " ++
                serialize'(Closure(getBody(term), environment), depth + 1) ++
                ")";
            APPLICATION -> "(" ++
                serialize'(Closure(getLeft(term), environment), depth) ++ " " ++
                serialize'(Closure(getRight(term), environment), depth) ++ ")";
            DEFINITION -> "(" ++
                serialize'(Closure(getLeft(term), environment), depth) ++
                " := " ++
                serialize'(Closure(getRight(term), environment), depth) ++ ")";
            NATURAL -> showNatural(getValue(term));
            BUILTIN -> showLexeme(term)
        )
    )
    result := serialize'(closure, 0)
    -- ensure that full serialization succeeds before returning anything
    -- or else lazy output will show part of the serailization even if
    -- an error occurs during parsing
    result.length = 0 ? "" || result
)

--*
