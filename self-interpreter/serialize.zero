#* serialize.zero

define serialize(closure)
    define serialize'(Closure(term, environment), depth)
        match term
            case Reference(Tag(lexeme, _), debruijn)
                if debruijn <= depth then lexeme else
                    serialize'(environment[debruijn - depth - 1], 0)
            case Function(Tag(lexeme, _), body)
                "(" ++ lexeme ++ " -> " ++
                    serialize'(Closure(body, environment), depth + 1) ++ ")"
            case Application(left, right) -> "(" ++
                serialize'(Closure(left, environment), depth) ++ " " ++
                serialize'(Closure(right, environment), depth) ++ ")"
            case Natural(_, n)
                showNatural(n)
            case Optimization(Tag(lexeme, _), _, _)
                lexeme

    result := serialize'(closure, 0)
    # ensure that full serialization succeeds before returning anything
    # or else lazy output will show part of the serailization even if
    # an error occurs during parsing
    if result.length = 0 then "" else result


define serializeString(evaluateClosure, closure)
    closure' := evaluateClosure(closure)
    term := getTerm(closure')
    try nil := maybeIsNil(term)
    if nil
        return []

    dummy := Closure(Natural(noTag, 0), [])
    enclose := `Closure(dummy :: dummy :: getEnvironment(closure'))

    try headTerm := maybeHead(term)
    try character := maybeNatural(getTerm(evaluateClosure(enclose(headTerm))))

    try tailTerm := maybeTail(term)
    try remaining := serializeString(evaluateClosure, enclose(tailTerm))

    return character :: remaining


#*
