--* syntax.zero

reduceApply(operator, left, right) :=
    newApplication(getTag(operator), left, right)

reduceInfix(operator, left, right) :=
    reduceApply(operator, reduceApply(operator,
        convertOperator(getTag(operator)), left), right)

reducePrefix(operator, _left, right) :=
    reduceApply(operator, convertOperator(getTag(operator)), right)

reducePostfix(operator, left, _right) :=
    reduceApply(operator, convertOperator(getTag(operator)), left)

shiftPrefix(state, operator) := (
    state' := reduceLeft(state, operator)
    State(operator :: getStack(state'), getOperators(state'))
)

shiftPostfix(state, operator) := syntaxError("not implemented")

shiftInfix(state, operator) := (
    stack := eraseWhitespace(getStack(state))
    state' := reduceLeft(State(stack, getOperators(state)), operator)
    stack' := getStack(state')
    operators := getOperators(state')
    top := head(stack')
    tag := getTag(operator)
    isOperator(top) ? (
        isThisSymbol(operator, "+") ? (
            operator' := operators.parseSymbol(renameTag(tag, "(+)"))
            State(operator' :: stack', operators)
        )
        isThisSymbol(operator, "-") ? (
            operator' := operators.parseSymbol(renameTag(tag, "(-)"))
            State(operator' :: stack', operators)
        )
        ! isSpecial(operator) /\ isOpenOperator(top) ?
            State(operator :: renameNode(operator, ".*") :: stack', operators)
        syntaxError("missing left operand for", operator)
    )
    (getLexeme(operator) =*= ":=" \/ getLexeme(operator) =*= "≔") /\
            getLexeme(top) =*= "syntax" ? (
        operator' := operators.parseSymbol(renameTag(tag, "(:=)"))
        State(operator' :: stack', operators)
    )
    State(operator :: stack', operators)
)

shiftSpace(state, operator) := (
    state' := reduceLeft(state, operator)
    isOperator(head(getStack(state'))) ? state'
    State(operator :: getStack(state'), getOperators(state'))
)

addSyntax(operators, operator) := (
    operators.map(first).any(=*= getLexeme(operator)) ?
        syntaxError("syntax already defined", operator)
    (getLexeme(operator), getSyntax(operator)) :: operators
)

updateOperators(operators, top) := (
    ! isIdentity(top) \/ ! isOperator(getParameter(top)) ? operators
    declared := getParameter(top)
    operators' := operators.addSyntax(declared)
    p := getLeftPrecedence(getSyntax(declared))
    isThisSymbol(declared, "+") ? (
        s := Syntax(p, p, PREFIX, LEFT, false, shiftPrefix, reducePrefix)
        ("(+)", s) :: operators'
    )
    isThisSymbol(declared, "-") ? (
        s := Syntax(p, p, PREFIX, LEFT, false, shiftPrefix, reducePrefix)
        ("(-)", s) :: operators'
    )
    operators'
)

shiftNewline(state, operator) := (
    stack := erase(getStack(state), " ")
    state' := reduceLeft(State(stack, getOperators(state)), operator)
    top := head(getStack(state'))
    operators := updateOperators(getOperators(state'), top)
    isOperator(top) ? State(getStack(state'), operators)
    State(operator :: getStack(state'), operators)
)

reduceReserved(operator, _left, _right) :=
    syntaxError("reserved operator", operator)

reduceInvalid(operator, _left, _right) :=
    syntaxError("operator syntax undeclared", operator)

reduceError(operator, _left, right) := (
    tag := getTag(operator)
    isThisSymbol(right, "[]") ? newBuiltin(renameTag(tag, "(undefined)"))
    newApplication(tag, convertOperator(tag), right)
)

newOperator'(tag, precedence, fixity, associativity, shifter, reducer) :=
    newOperator(tag, Syntax(precedence, precedence, fixity, associativity,
        false, shifter, reducer))

newSyntaxOperator(tag, precedence, fixity) := (
    getTagLexeme(tag) =*= "()" ? (
        !(getLexeme(fixity) =*= "infixL") ?
            syntaxError("syntax must be infixL", fixity)
        tag' := renameTag(tag, " ")
        newOperator'(tag', precedence, INFIX, LEFT, shiftSpace, reduceInfix)
    )
    getLexeme(fixity) =*= "infix" ?
        newOperator'(tag, precedence, INFIX, NEITHER, shiftInfix, reduceInfix)
    getLexeme(fixity) =*= "infixL" ?
        newOperator'(tag, precedence, INFIX, LEFT, shiftInfix, reduceInfix)
    getLexeme(fixity) =*= "infixR" ?
        newOperator'(tag, precedence, INFIX, RIGHT, shiftInfix, reduceInfix)
    getLexeme(fixity) =*= "prefix" ?
        newOperator'(tag, precedence, PREFIX, LEFT, shiftPrefix, reducePrefix)
    getLexeme(fixity) =*= "postfix" ?
        newOperator'(tag, precedence, POSTFIX, LEFT,
            shiftPostfix, reducePostfix)
    syntaxError("invalid fixity", fixity)
)

reduceSyntax(node, left, right) := (
    ! isApplication(left) ? syntaxError("invalid left operand", left)
    name := getRight(left)
    ! isSymbol(name) ? syntaxError("expected symbol operand to", getLeft(left))
    getLexeme(name).any(= '_') ?
        syntaxError("invalid underscore in operator name", name)
    ! isApplication(right) /\ ! isNatural(getRight(right)) ?
        syntaxError("invalid syntax definition", node)
    precedence := getValue(getRight(right))
    precedence < 0 \/ precedence > 99 ?
        syntaxError("invalid precedence", getRight(right))
    fixity := getLeft(right)
    operator := newSyntaxOperator(getTag(name), precedence, fixity)
    newLambda(getTag(node), operator, operator)
)

OPERATORS := [
    ("\0", Syntax(0, 0, CLOSEFIX, RIGHT, true, shiftClose, reduceEOF)),
    ("(", Syntax(90, 0, OPENFIX, RIGHT, true, shiftOpen, reduceUnmatched)),
    (")", Syntax(0, 90, CLOSEFIX, RIGHT, true, shiftClose, reduceParentheses)),
    ("[", Syntax(90, 0, OPENFIX, RIGHT, true, shiftOpen, reduceUnmatched)),
    ("]", Syntax(0, 90, CLOSEFIX, RIGHT, true, shiftClose, reduceSquare)),
    ("{", Syntax(90, 0, OPENFIX, RIGHT, true, shiftOpenCurly, reduceUnmatched)),
    ("}", Syntax(0, 90, CLOSEFIX, RIGHT, true, shiftClose, reduceCurly)),
    ("|", Syntax(1, 1, INFIX, NEITHER, true, shiftInfix, reduceReserved)),
    (",", Syntax(2, 2, INFIX, LEFT, true, shiftInfix, reduceApply)),
    ("\n", Syntax(3, 3, INFIX, RIGHT, true, shiftNewline, reduceApply)),
    (":=", Syntax(3, 3, INFIX, RIGHT, true, shiftInfix, reduceDefine)),
    ("≔", Syntax(3, 3, INFIX, RIGHT, true, shiftInfix, reduceDefine)),
    ("::=", Syntax(3, 3, INFIX, RIGHT, true, shiftInfix, reduceADT)),
    ("⩴", Syntax(3, 3, INFIX, RIGHT, true, shiftInfix, reduceADT)),
    ("(:=)", Syntax(4, 4, INFIX, NEITHER, true, shiftInfix, reduceSyntax)),
    (";", Syntax(4, 4, INFIX, LEFT, true, shiftInfix, reducePatternLambda)),
    ("->", Syntax(5, 5, INFIX, RIGHT, true, shiftInfix, reduceLambda)),
    ("↦", Syntax(5, 5, INFIX, RIGHT, true, shiftInfix, reduceLambda)),
    ("@", Syntax(6, 6, INFIX, LEFT, true, shiftInfix, reduceApply)),
    ("syntax", Syntax(90, 90, PREFIX, LEFT, true, shiftPrefix, reducePrefix)),
    ("error", Syntax(90, 90, PREFIX, LEFT, true, shiftPrefix, reduceError)),
    ("( )", Syntax(99, 99, INFIX, LEFT, true, shiftSpace, reduceInvalid)),
    ("$", Syntax(99, 99, PREFIX, LEFT, true, shiftPrefix, reduceReserved)),
    MARKER
]

--*
