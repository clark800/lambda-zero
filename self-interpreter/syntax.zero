--* syntax.zero

define reduceApply(operator, left, right)
    newApplication(getTag(operator), left, right)

define reduceInfix(operator, left, right)
    reduceApply(operator, reduceApply(operator,
        convertOperator(getTag(operator)), left), right)

define reducePrefix(operator, _left, right)
    reduceApply(operator, convertOperator(getTag(operator)), right)

define reducePostfix(operator, left, _right)
    reduceApply(operator, convertOperator(getTag(operator)), left)

define reduceNewline(operator, left, right)
    tag := getTag(left)
    if isDefinition(left) and isThisLexeme(left, ":=")
        applyDefinition(tag, getLeft(left), getRight(left), right)
    if isDefinition(left) and isThisLexeme(left, "::=")
        applyADTDefinition(tag, getLeft(left), getRight(left), right)
    if isApplication(left) and isThisLexeme(left, "define")
        reduceDefine(getLeft(left), getRight(left), right)
    reduceApply(operator, left, right)

define shiftPrefix(state, operator)
    state' := reduceLeft(state, operator)
    State(operator :: getStack(state'), getOperators(state'))

define shiftPostfix(state, operator)
    stack := eraseWhitespace(getStack(state))
    state' := reduceLeft(State(stack, getOperators(state)), operator)
    stack' := getStack(state')
    stack'' := not isSpecial(operator) and isOpenOperator(stack'[0]) ?
        newName(renameTag(getTag(operator), ".*")) :: stack' || stack'
    operand := stack''[0]
    if isOperator(operand)
        syntaxError("missing left operand for", operator)
    State(reduceOperator(operator, operand, NULL) :: tail(stack''),
        getOperators(state))

define shiftInfix(state, operator)
    stack := eraseWhitespace(getStack(state))
    state' := reduceLeft(State(stack, getOperators(state)), operator)
    stack' := getStack(state')
    operators := getOperators(state')
    top := head(stack')
    tag := getTag(operator)
    if isOperator(top)
        if isThisSymbol(operator, "+")
            operator' := operators.parseSymbol(renameTag(tag, "(+)"))
            State(operator' :: stack', operators)
        if isThisSymbol(operator, "-")
            operator' := operators.parseSymbol(renameTag(tag, "(-)"))
            State(operator' :: stack', operators)
        if not isSpecial(operator) and isOpenOperator(top)
            State(operator :: renameNode(operator, ".*") :: stack', operators)
        syntaxError("missing left operand for", operator)
    if (getLexeme(operator) =*= ":=" or getLexeme(operator) =*= "≔") and
            getLexeme(top) =*= "syntax"
        operator' := operators.parseSymbol(renameTag(tag, "(:=)"))
        State(operator' :: stack', operators)
    State(operator :: stack', operators)

define shiftSpace(state, operator)
    state' := reduceLeft(state, operator)
    if isOperator(head(getStack(state')))
        state'
    State(operator :: getStack(state'), getOperators(state'))

define addSyntax(operators, operator)
    if operators.map(first).any(=*= getLexeme(operator))
        syntaxError("syntax already defined", operator)
    (getLexeme(operator), getSyntax(operator)) :: operators

define updateOperators(operators, top)
    if not isIdentity(top) or not isOperator(getParameter(top))
        operators
    declared := getParameter(top)
    operators' := operators.addSyntax(declared)
    p := getLeftPrecedence(getSyntax(declared))
    if isThisSymbol(declared, "+")
        s := Syntax(p, p, PREFIX, LEFT, false, shiftPrefix, reducePrefix)
        ("(+)", s) :: operators'
    if isThisSymbol(declared, "-")
        s := Syntax(p, p, PREFIX, LEFT, false, shiftPrefix, reducePrefix)
        ("(-)", s) :: operators'
    operators'

define shiftNewline(state, operator)
    stack := erase(getStack(state), " ")
    state' := reduceLeft(State(stack, getOperators(state)), operator)
    top := head(getStack(state'))
    operators := updateOperators(getOperators(state'), top)
    if isOperator(top)
        State(getStack(state'), operators)
    State(operator :: getStack(state'), operators)

define reduceReserved(operator, _left, _right)
    syntaxError("reserved operator", operator)

define reduceInvalid(operator, _left, _right)
    syntaxError("operator syntax undeclared", operator)

define reduceError(operator, _left, right)
    tag := getTag(operator)
    if isThisSymbol(right, "[]")
        newBuiltin(renameTag(tag, "(undefined)"))
    newApplication(tag, convertOperator(tag), right)

define newOperator'(tag, precedence, fixity, associativity, shifter, reducer)
    newOperator(tag, Syntax(precedence, precedence, fixity, associativity,
        false, shifter, reducer))

define newSyntaxOperator(tag, precedence, fixity)
    if getTagLexeme(tag) =*= "()"
        if not(getLexeme(fixity) =*= "infixL")
            syntaxError("syntax must be infixL", fixity)
        tag' := renameTag(tag, " ")
        newOperator'(tag', precedence, INFIX, LEFT, shiftSpace, reduceInfix)
    if getLexeme(fixity) =*= "infix"
        newOperator'(tag, precedence, INFIX, NEITHER, shiftInfix, reduceInfix)
    if getLexeme(fixity) =*= "infixL"
        newOperator'(tag, precedence, INFIX, LEFT, shiftInfix, reduceInfix)
    if getLexeme(fixity) =*= "infixR"
        newOperator'(tag, precedence, INFIX, RIGHT, shiftInfix, reduceInfix)
    if getLexeme(fixity) =*= "prefix"
        newOperator'(tag, precedence, PREFIX, LEFT, shiftPrefix, reducePrefix)
    if getLexeme(fixity) =*= "postfix"
        newOperator'(tag, precedence, POSTFIX, LEFT,
            shiftPostfix, reducePostfix)
    syntaxError("invalid fixity", fixity)

define reduceSyntax(node, left, right)
    if not isApplication(left)
        syntaxError("invalid left operand", left)
    name := getRight(left)
    if not isSymbol(name)
        syntaxError("expected symbol operand to", getLeft(left))
    if getLexeme(name).any(= '_')
        syntaxError("invalid underscore in operator name", name)
    if not isApplication(right) and not isNatural(getRight(right))
        syntaxError("invalid syntax definition", node)
    precedence := getValue(getRight(right))
    if precedence < 0 or precedence > 99
        syntaxError("invalid precedence", getRight(right))
    fixity := getLeft(right)
    operator := newSyntaxOperator(getTag(name), precedence, fixity)
    newLambda(getTag(node), operator, operator)

OPERATORS := [
    ("\0", Syntax(0, 0, CLOSEFIX, RIGHT, true, shiftClose, reduceEOF)),
    ("(", Syntax(90, 0, OPENFIX, RIGHT, true, shiftOpen, reduceUnmatched)),
    (")", Syntax(0, 90, CLOSEFIX, RIGHT, true, shiftClose, reduceParentheses)),
    ("[", Syntax(90, 0, OPENFIX, RIGHT, true, shiftOpen, reduceUnmatched)),
    ("]", Syntax(0, 90, CLOSEFIX, RIGHT, true, shiftClose, reduceSquare)),
    ("{", Syntax(90, 0, OPENFIX, RIGHT, true, shiftOpenCurly, reduceUnmatched)),
    ("}", Syntax(0, 90, CLOSEFIX, RIGHT, true, shiftClose, reduceCurly)),
    ("|", Syntax(1, 1, INFIX, NEITHER, true, shiftInfix, reduceReserved)),
    (",", Syntax(2, 2, INFIX, LEFT, true, shiftInfix, reduceApply)),
    ("\n", Syntax(3, 3, INFIX, RIGHT, true, shiftNewline, reduceNewline)),
    (";", Syntax(4, 4, INFIX, LEFT, true, shiftInfix, reducePatternLambda)),
    ("define", Syntax(5, 5, PREFIX, NEITHER, true, shiftPrefix, reducePrefix)),
    (":=", Syntax(5, 5, INFIX, NEITHER, true, shiftInfix, reduceDefine)),
    ("≔", Syntax(5, 5, INFIX, NEITHER, true, shiftInfix, reduceDefine)),
    ("::=", Syntax(5, 5, INFIX, NEITHER, true, shiftInfix, reduceADT)),
    ("⩴", Syntax(5, 5, INFIX, NEITHER, true, shiftInfix, reduceADT)),
    ("(:=)", Syntax(5, 5, INFIX, NEITHER, true, shiftInfix, reduceSyntax)),
    ("->", Syntax(6, 6, INFIX, RIGHT, true, shiftInfix, reduceLambda)),
    ("↦", Syntax(6, 6, INFIX, RIGHT, true, shiftInfix, reduceLambda)),
    ("@", Syntax(7, 7, INFIX, LEFT, true, shiftInfix, reduceApply)),
    ("syntax", Syntax(90, 90, PREFIX, LEFT, true, shiftPrefix, reducePrefix)),
    ("error", Syntax(90, 90, PREFIX, LEFT, true, shiftPrefix, reduceError)),
    ("( )", Syntax(99, 99, INFIX, LEFT, true, shiftSpace, reduceInvalid)),
    ("$", Syntax(99, 99, PREFIX, LEFT, true, shiftPrefix, reduceReserved)),
    MARKER
]

--*
