#* term.zero

MetadataType ::= {Metadata(
    getAnnotation : Scheme,
    getAscription : Scheme,
    getConstructorDebruijnIndices : List(Natural)
)}

Term ::= {
    Variable(_ : Tag, getDebruijnIndex : Natural),
    Abstraction(_ : Tag, getMetadata : Metadata, getBody : Term),
    Application(_ : Tag, getApplicand : Term, getArgument : Term),
    Numeral(_ :  Tag, getNatural : Natural),
    Operation(_ : Tag, getArity : Natural, getOperator : _)
}

define getTermTag
    case Variable(tag, _) -> tag
    case Abstraction(tag, _, _) -> tag
    case Application(tag, _, _) -> tag
    case Numeral(tag, _) -> tag
    case Operation(tag, _, _) -> tag


define indexTerm
    case Variable(_, _) -> 0
    case Abstraction(_, _, _) -> 1
    case Application(_, _, _) -> 2
    case Numeral(_, _) -> 3
    case Operation(_, _, _) -> 4


isVariable(term) := indexTerm(term) = 0
isAbstraction(term) := indexTerm(term) = 1
isApplication(term) := indexTerm(term) = 2
isNumeral(term) := indexTerm(term) = 3
isOperation(term) := indexTerm(term) = 4


define maybeDebruijnIndex(term)
    if isVariable(term) then just getDebruijnIndex(term) else void


define maybeBody(term)
    if isAbstraction(term) then just getBody(term) else void


define maybeApplicand(term)
    if isApplication(term) then just getApplicand(term) else void


define maybeArgument(term)
    if isApplication(term) then just getArgument(term) else void


define maybeNatural(term)
    if isNumeral(term) then just getNatural(term) else void


define maybeHead(term)
    try body := maybeBody(term)
    try body' := maybeBody(body)
    try applicand := maybeApplicand(body')
    maybeArgument(applicand)


define maybeTail(term)
    try body := maybeBody(term)
    try body' := maybeBody(body)
    maybeArgument(body')


define maybeIsNil(term)
    # returns true for [], false for non-nil list, void for non-list
    # term should be (n -> p -> n) or (n -> p -> ((p c) cs))

    define ifNil(result)
        try body := maybeBody(term)
        try body' := maybeBody(body)
        try debruijn := maybeDebruijnIndex(body')
        if debruijn = 2 then just result else void

    define ifPush(result)
        try body := maybeBody(term)
        try body' := maybeBody(body)
        try applicand := maybeApplicand(body')
        try applicand' := maybeApplicand(applicand)
        try debruijn := maybeDebruijnIndex(applicand')
        if debruijn = 1 then just result else void

    ifNil(just true) ? ifPush(just false) ? void


define showTerm
    case Variable(tag, n) -> showTag(tag) ++ "#" ++ showNatural(n)
    case Abstraction(tag, _, body)
        "(" ++ showTag(tag) ++ " -> " ++ showTerm(body) ++ ")"
    case Application(_, applicand, argument)
        "(" ++ showTerm(applicand) ++ " " ++ showTerm(argument) ++ ")"
    case Numeral(_, n) -> showNatural(n)
    case Operation(tag, _, _) -> showTag(tag)

noTerm := Variable(noTag, 0)
isNoTerm(term) := isVariable(term) and getDebruijnIndex(term) = 0

#*
