#* term.zero

Metadata ::= {Metadata(
    getAnnotation : Scheme,
    getAscription : Scheme,
    getConstructorDebruijnIndices : List(ℕ)
)}

Closure(term) ::= {Closure(
    getTerm : term,
    getEnvironment : List(ℕ && FullBinaryTree(Closure(term)))
)}

Term ::= {
    Variable(_ : Tag, getDebruijnIndex : ℕ),
    Abstraction(_ : Tag, getMetadata : Metadata, getBody : Term),
    Application(_ : Tag, isLet : 𝔹,
        getApplicand : Term, getArgument : Term),
    Numeral(_ :  Tag, getNatural : ℕ),
    Operation(_ : Tag, getArity : ℕ,
        getOperator : ((Closure(Term) => Closure(Term)) =>
            List(Closure(Term)) => Closure(Term)))
}

define getTermTag
    Variable(tag, _) -> tag
    Abstraction(tag, _, _) -> tag
    Application(tag, _, _, _) -> tag
    Numeral(tag, _) -> tag
    Operation(tag, _, _) -> tag


isVariable := Variable(_, _) -> True; _ -> False
isAbstraction := Abstraction(_, _, _) -> True; _ -> False
isApplication := Application(_, _, _, _) -> True; _ -> False
isNumeral := Numeral(_, _) -> True; _ -> False
isOperation := Operation(_, _, _) -> True; _ -> False


define maybeDebruijnIndex(term)
    if isVariable(term) then Just(getDebruijnIndex(term)) else Void


define maybeBody(term)
    if isAbstraction(term) then Just(getBody(term)) else Void


define maybeApplicand(term)
    if isApplication(term) then Just(getApplicand(term)) else Void


define maybeArgument(term)
    if isApplication(term) then Just(getArgument(term)) else Void


define maybeNatural(term)
    if isNumeral(term) then Just(getNatural(term)) else Void


define maybeHead(term)
    maybe body := maybeBody(term)
    maybe body' := maybeBody(body)
    maybe applicand := maybeApplicand(body')
    maybeArgument(applicand)


define maybeTail(term)
    maybe body := maybeBody(term)
    maybe body' := maybeBody(body)
    maybeArgument(body')


define maybeIsNil(term)
    # returns True for [], False for non-nil list, Void for non-list
    # term should be (n -> p -> n) or (n -> p -> ((p c) cs))

    define ifNil(result)
        maybe body := maybeBody(term)
        maybe body' := maybeBody(body)
        maybe debruijn := maybeDebruijnIndex(body')
        if debruijn = 2 then Just(result) else Void

    define ifPush(result)
        maybe body := maybeBody(term)
        maybe body' := maybeBody(body)
        maybe applicand := maybeApplicand(body')
        maybe applicand' := maybeApplicand(applicand)
        maybe debruijn := maybeDebruijnIndex(applicand')
        if debruijn = 1 then Just(result) else Void

    ifNil(Just(True)) ?? ifPush(Just(False)) ?? Void


define showTerm
    Variable(tag, n) -> showTag(tag) ++ "#" ++ showNatural(n)
    Abstraction(tag, _, body) ->
        "(" ++ showTag(tag) ++ " -> " ++ showTerm(body) ++ ")"
    Application(_, _, applicand, argument) ->
        "(" ++ showTerm(applicand) ++ " " ++ showTerm(argument) ++ ")"
    Numeral(_, n) -> showNatural(n)
    Operation(tag, _, _) -> showTag(tag)

noTerm := Variable(noTag, 0)
isNoTerm(term) := isVariable(term) and getDebruijnIndex(term) = 0

#*
