#* type.zero

# note: types contain source terms so that we have the ability to serialize the
# whole source term if there is a type error
Type ::= {
    FreeType,
    BottomType(_source : Term),
    TypeVariable(_source : Term, getAddress : ℕ),
    FunctionType(_source : Term, getParameterType : Type, getBodyType : Type),
    ADT(_source : Term, getName : List(ℕ), getNameFixity : ℕ,
        getParameters : List(Type), getMatchType : Type,
        getCount : ℕ, getIndex : ℕ)
        # when getMatchType=FreeType, it can't be applied as a function;
        # ADT instances can only be applied as functions in the desugared
        # form of case expressions
}

Scheme ::= {Scheme(getUniversals : List(Type), getType : Type)}

Free := Scheme([], FreeType)

#*
