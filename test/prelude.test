===============================================================================
first (((1, 2)))
1
===============================================================================
first(((1, 2)))
1
===============================================================================
iterate(+ 1)(0)[2]
2
===============================================================================
if false (x -> x) (y -> y)
(y -> y)
===============================================================================
--((x -> x) :: (y -> y))
(y -> y)
===============================================================================
head(((x -> x) :: (y -> y)) :: (z -> z))
(, -> ((, (x -> x)) (y -> y)))
===============================================================================
head(sort(5 :: 60 :: 7 :: 14 :: 2 :: 5 :: 33 :: []))
2
===============================================================================
head(5 :: (10 :: (15 :: (20 :: []))) | (> 10))
15
===============================================================================
head(replicate(10, 7))
10
===============================================================================
main(input) := "abcdef".interleave(',')
a,b,c,d,e,f
===============================================================================
"abcd" =*= 'a'..'d'
(t -> (f -> t))
===============================================================================
"aceswild".find(even) ?|| -1
108
===============================================================================
"aces".find(even) ?|| -1
-1
===============================================================================
main(input) := "abbc" | x -> "bbcd".any((= x))
bbc
===============================================================================
fromJust(just(10))
10
===============================================================================
fromJust(nothing)
fromJust: not a just
===============================================================================
isJust(just(1))
(t -> (f -> t))
===============================================================================
isJust(nothing)
(t -> (f -> f))
===============================================================================
isNothing(nothing)
(t -> (f -> t))
===============================================================================
isNothing(just(10))
(t -> (f -> f))
===============================================================================
just(2) >>= just <> (2 *) ?|| 0
4
===============================================================================
length("")
0
===============================================================================
first((1 , (* 2) ^^ 2))
1
===============================================================================
head --[1, 2, 3]
2
===============================================================================
head (--[1, 2, 3])
2
===============================================================================
(head) --[1, 2, 3]
2
===============================================================================
length [1, 2, 3, 4, 5, 6]
6
===============================================================================
[1, 2, 3, 4, 5, 6][4]
5
===============================================================================
!isEmpty([])
(t -> (f -> f))
===============================================================================
![].isEmpty
(t -> (f -> f))
===============================================================================
length(3..9)
7
===============================================================================
(1..10)[5]
6
===============================================================================
"!@#$%^".any((= '#'))
(t -> (f -> t))
===============================================================================
!`divides(2, 10)
(t -> (f -> t))
===============================================================================
first(swap((1, 2)))
2
===============================================================================
"//123".startsWith("//")
(t -> (f -> t))
===============================================================================
parseInteger("1234567890", 10)
1234567890
===============================================================================
parseInteger("-1234567890", 10)
-1234567890
===============================================================================
"abc" <*= "abcd"
(t -> (f -> t))
===============================================================================
"abc" <*= "ab"
(t -> (f -> f))
===============================================================================
"acb" <*= "abc"
(t -> (f -> f))
===============================================================================
