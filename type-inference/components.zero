#* components.zero

def getComponents
    case Metavariable(_, _) -> []
    case Type(_, _) -> []
    case Variable(_, _) -> []
    case Inference(_, domain) -> domain.mapJust((:: [])) ?? []
    case Singleton(_, type, index) -> [type]
    case Function(_, domain, body) -> [domain, body]
    case Implication(_, domain, body) -> [domain, body]
    case Intersection(tag, domain, body) -> [domain, body]
    case Application(_, left, right) -> [left, right]
    case Equation(_, left, right) -> [left, right]
    case Construction(_, _, arguments, _) -> arguments
    case Numeral(_, _, _) -> []
    case Operation(_, _, _) -> []


def mapComponentsWithDepth(f, depth, term)
    match term
        case Metavariable(_, _) -> term
        case Type(_, _) -> term
        case Variable(_, _) -> term
        case Inference(tag, domain) ->
            Inference(tag, domain.mapJust(f(depth)))
        case Singleton(tag, type, index) ->
            Singleton(tag, type.f(depth), index)
        case Function(tag, domain, body) ->
            Function(tag, domain.f(depth), body.f(up depth))
        case Implication(tag, domain, body) ->
            Implication(tag, domain.f(depth), body.f(up depth))
        case Intersection(tag, domain, body) ->
            Intersection(tag, domain.f(depth), body.f(up depth))
        case Application(tag, left, right) ->
            Application(tag, left.f(depth), right.f(depth))
        case Equation(tag, left, right) ->
            Equation(tag, left.f(depth), right.f(depth))
        case Construction(tag, index, arguments, term) ->
            Construction(tag, index, arguments.map(f(depth)), term.f(depth))
        case Numeral(_, _, _) -> term
        case Operation(_, _, _) -> term


def mapComponents(f, term)
    mapComponentsWithDepth(_ -> f, 0, term)

#*
