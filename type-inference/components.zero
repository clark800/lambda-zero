#* components.zero

def getComponents
    Metavariable(_, _) -> []
    Type(_, _) -> []
    Variable(_, _) -> []
    Singleton(_, type, index) -> [type]
    Function(_, domain, body) -> [domain, body]
    Implication(_, domain, body) -> [domain, body]
    Intersection(tag, domain, body) ->
        if isConstruction(Intersection(tag, domain, body)) then
            [domain] else [domain, body]
    Application(_, left, right) -> [left, right]
    Construction(tag, index, arguments, term) -> arguments
    Numeral(_, _, _) -> []
    Operation(_, _, _) -> []


def mapComponentsWithDepth(f, depth, term)
    match term
        Metavariable(_, _) -> term
        Type(_, _) -> term
        Variable(_, _) -> term
        Singleton(tag, type, index) ->
            Singleton(tag, type.f(depth), index)
        Function(tag, domain, body) ->
            Function(tag, domain.f(depth), body.f(up depth))
        Implication(tag, domain, body) ->
            Implication(tag, domain.f(depth), body.f(up depth))
        Intersection(tag, domain, body) ->
            Intersection(tag, domain.f(depth), body.f(up depth))
        Application(tag, left, right) ->
            Application(tag, left.f(depth), right.f(depth))
        Construction(tag, index, arguments, term) ->
            Construction(tag, index, arguments.map(f(depth)), term.f(depth))
        Numeral(_, _, _) -> term
        Operation(_, _, _) -> term


def mapComponents(f, term)
    mapComponentsWithDepth(_ -> f, 0, term)

#*
