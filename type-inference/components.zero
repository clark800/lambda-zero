#* components.zero

def getAnnotationComponents
    Inferred -> []
    Domain(term) -> [term]
    PatternMatch(term) -> []
    Opaque(term) -> []


def getComponents
    Unknown(_) -> []
    MetaVariable(_, _) -> []
    Type(_, _) -> []
    Variable(_, _) -> []
    Function(_, type, body) -> getAnnotationComponents(type) ++ [body]
    Implication(_, domain, body) -> [domain, body]
    Intersection(_, domain, body) -> [domain, body]
    Application(_, left, right) -> [left, right]
    Construction(_, domain, parameters, body) -> domain :: parameters
    Numeral(_, _, _) -> []
    Operation(_, _, _) -> []


# PatternMatch and Opaque will never contain metavariables or unbound
# Variables, so we can skip them here
def mapDomain(f)
    Inferred -> Inferred
    Domain(domain) -> Domain(f(domain))
    PatternMatch(domain) -> PatternMatch(domain)
    Opaque(type) -> Opaque(type)


def mapComponentsWithDepth(f, depth, term)
    match term
        Unknown(_) -> term
        MetaVariable(_, _) -> term
        Type(_, _) -> term
        Variable(_, _) -> term
        Function(tag, type, body) ->
            Function(tag, type.mapDomain(f(depth)), body.f(up depth))
        Implication(tag, domain, body) ->
            Implication(tag, domain.f(depth), body.f(up depth))
        Intersection(tag, domain, body) ->
            Intersection(tag, domain.f(depth), body.f(up depth))
        Application(tag, left, right) ->
            Application(tag, left.f(depth), right.f(depth))
        Construction(tag, domain, parameters, body) ->
            Construction(tag, domain.f(depth), parameters.map(f(depth)),
                body.f(up depth))
        Numeral(_, _, _) -> term
        Operation(_, _, _) -> term


def mapComponents(f, term)
    mapComponentsWithDepth(_ -> f, 0, term)

#*
