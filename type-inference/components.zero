#* components.zero

def isSameHead(term)
    case Unknown(_)
        False
    case Wildcard(_)
        False
    case MetaVariable(_, address)
        if term is MetaVariable(_, address')
            address = address'
        False
    case Universe(_, level)
        if term is Universe(_, level')
            level = level'
        False
    case Constant(_, index)
        if term is Constant(_, index')
            index = index'
        False
    case Variable(tag, _)
        False
    case Function(_, _, _, _, _)
        isFunction(term)
    case MetaFunction(_, _, _)
        isMetaFunction(term)
    case Implication(_, _, _)
        isImplication(term)
    case Application(_, _, _)
        isApplication(term)
    case Construction(tag, _, _, _)
        isConstruction(term) and
            getTagLexeme(tag) =*= getTagLexeme(getTermTag(term))
    case Element(_, _, _)
        isElement(term)
    case Numeral(_, _, value)
        if term is Numeral(_, _, value')
            value = value'
        False
    case Operation(tag, _, _, _)
        if term is Operation(tag', _, _, _)
            getTagLexeme(tag) =*= getTagLexeme(tag')
        False


def getComponents
    Unknown(_) -> []
    Wildcard(_) -> []
    MetaVariable(_, _) -> []
    Universe(_, _) -> []
    Constant(_, _) -> []
    Variable(_, _) -> []
    Function(_, _, domain, codomain, body) -> [domain, codomain, body]
    MetaFunction(_, type, body) -> [type, body]
    Implication(_, type, body) -> [type, body]
    Application(_, left, right) -> [left, right]
    Construction(_, parameters, _, _) -> parameters
    Element(_, type, term) -> [type, term]
    Numeral(_, _, _) -> []
    Operation(_, _, _, _) -> []


def mapComponents(f, term)
    match term
        Unknown(_) -> term
        Wildcard(_) -> term
        MetaVariable(_, _) -> term
        Universe(_, _) -> term
        Constant(_, _) -> term
        Variable(_, _) -> term
        Function(tag, isCase, domain, codomain, body) ->
            Function(tag, isCase, f(domain), f(codomain), f(body))
        MetaFunction(tag, type, body) -> MetaFunction(tag, f(type), f(body))
        Implication(tag, type, body) -> Implication(tag, f(type), f(body))
        Application(tag, left, right) -> Application(tag, f(left), f(right))
        Construction(tag, parameters, type, signatures) ->
            Construction(tag, parameters.map(f), type, signatures)
        Element(tag, type, term) -> Element(tag, f(type), f(term))
        Numeral(_, _, _) -> term
        Operation(_, _, _, _) -> term

#*
