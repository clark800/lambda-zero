#* declarations.zero

define getFixScheme(tag)
    syntax(>->) := syntax(++)
    (>->) := FunctionType(tag)
    a := TypeVariable(veil(tag), 0)
    Scheme([a], (a >-> a) >-> a)


define builtinTypes
    syntax(>->) := syntax(++)
    (>->) := FunctionType(noTag)
    bottom := BottomType(noTag)
    boolean := ADT(renameTag(noTag, "𝔹", NOFIX), [], 2, 0)
    natural := ADT(renameTag(noTag, "ℕ", NOFIX), [], 2, 0)
    natural' := ADT(renameTag(noTag, "ℕ", NOFIX), [], 2, 2)
    string := ADT(renameTag(noTag, "List", NOFIX), [natural], 2, 0)
    arithmetic := natural >-> natural >-> natural
    comparison := natural >-> natural >-> boolean
    newDictionary([
        ("+", arithmetic),
        ("--", arithmetic),
        ("*", arithmetic),
        ("//", arithmetic),
        ("%", arithmetic),
        ("=", comparison),
        ("=/=", comparison),
        ("<", comparison),
        (">", comparison),
        ("<=", comparison),
        (">=", comparison),
        ("abort", string >-> bottom),
        ("(increment)", natural >-> natural'),
        ("(undefined)", bottom)
    ])

define getBuiltinType(tag)
    with builtinTypes.lookup(getTagLexeme(tag)) as Just(type)
        type.setLocation(tag)
    FreeType

#*
