#* definitions.zero

define isIdentity(term)
    if not isFunction(term) then false
    body := getFunctionBody(term)
    if not isReference(body) then false
    getDebruijnIndex(body) = 1


define getDefinitions
    case Reference(_, _) -> []
    case Function(_, _) -> []
    case Application(left, right)
        if isIdentity(left) then getDefinitions(right)
        if not isFunction(left) then []
        (getTermTag(left), right) :: getDefinitions(getFunctionBody(left))
    case Natural(_, _) -> []
    case Optimization(_, _, _) -> []


define showDefinition((tag, value))
    showTag(tag) ++ " := " ++ showTerm(value)


define showDefinitions(definitions)
    definitions.map(showDefinition.joinWith("\n"))

#*
