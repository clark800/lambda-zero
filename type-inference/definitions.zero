--* definitions.zero

getDefinitionName(definition) := getParameter(getLeft(definition))
getDefinitionValue(definition) := getRight(definition)
getDefinitionScope(definition) := getBody(getLeft(definition))

isDefinition(node) := isApplication(node) /\ isLambda(getLeft(node)) /\
    (isThisLexeme(node, ":=") \/ isThisLexeme(node, "≔") \/
     isThisLexeme(node, "::=") \/ isThisLexeme(node, "⩴"))

getDefinitions(node) := (
    isApplication(node) /\ isIdentity(getLeft(node)) ?
        getDefinitions(getRight(node))
    not isDefinition(node) ? []
    (getDefinitionName(node), getDefinitionValue(node)) ::
        getDefinitions(getDefinitionScope(node))
)

--*
