#* flatten.zero

def pushUnknown(tag, environment)
    environment.push(enclose(Unknown(tag)))


# for any variable in term that has a value in the environment, substitute
# the variable with the value from the environment recursively
# todo: can remove this when we use closures instead of schemes for types
def flattenClosure(Closure(term, environment))
    match term
        case Unknown(_)
            term
        case Wildcard(_)
            term
        case MetaVariable(_, _)
            term
        case Universe(_, _)
            term
        case Constant(_, _)
            term
        case Variable(tag, index)
            if environment.peek(index -- 1) is Just(closure)
                if isUnknown(getTerm(closure))
                    term
                flattenClosure(evaluateClosure(closure))
            term
        case Function(tag, isCase, domain, codomain, body)
            domain' := flattenClosure(Closure(domain, environment))
            codomain' := flattenClosure(Closure(codomain, environment))
            body' := flattenClosure(
                Closure(body, pushUnknown(tag, environment)))
            Function(tag, isCase, domain', codomain', body')
        case Implication(tag, type, body)
            type' := flattenClosure(Closure(type, environment))
            body' := flattenClosure(
                Closure(body, pushUnknown(tag, environment)))
            Implication(tag, type', body')
        case Application(tag, left, right)
            left' := flattenClosure(Closure(left, environment))
            right' := flattenClosure(Closure(right, environment))
            Application(tag, left', right')
        case Construction(tag, parameters, objectType, signatures)
            parameters' := parameters.map(x ->
                flattenClosure(Closure(x, environment)))
            objectType' := flattenClosure(Closure(objectType, environment))
            signatures' := signatures.map(x ->
                flattenClosure(Closure(x, environment)))
            Construction(tag, parameters', objectType', signatures')
        case Element(tag, type, term)
            type' := flattenClosure(Closure(type, environment))
            term' := flattenClosure(Closure(term, environment))
            Element(tag, type', term')
        case Numeral(_, _, _)
            term
        case Operation(_, _, _, _)
            term

#*
