#* inference.zero

define getFreeVariables(type, variables)
    if isTypeVariable(type)
        if type.isFree(variables)
            [type]
        getFreeVariables(variables.get(type), variables)
    join(getComponentTypes(type).map(`getFreeVariables(variables))).
        deduplicateBy((=~=))

define getAllFreeVariables(variables, variables')
    join(variables.getKeys.map(`getFreeVariables(variables'))).
        deduplicateBy((=~=))

define substitute(type, variables)
    if isTypeVariable(type)
        if type.isFree(variables)
            type
        type' := variables.get(type).setSource(getSource(type))
        if type'.getFreeVariables(empty).any((=~= type))
            recursionError(type, type, variables)
        type'.substitute(variables)

    type.mapComponents(`substitute(variables))

# Robinson's Unification Algorithm
# see Comparing Unification Algorithms in First-Order Theorem Proving
# by Krystof Hoder and Andrei Voronkov
define unify'(originals, variables, (left, right))
    if isTypeVariable(left) and not left.isFree(variables)
        unify'(originals, variables, (left.substitute(variables), right))
    if isTypeVariable(right) and not right.isFree(variables)
        unify'(originals, variables, (left, right.substitute(variables)))
    if isBottomType(left) or isBottomType(right)
        variables
    if left =~= right
        variables
    if isTypeVariable(left)
        variables.insert(left, right)
    if isTypeVariable(right)
        variables.insert(right, left)
    if indexType(left) = indexType(right)
        zip(getComponentTypes(left), getComponentTypes(right)).
            cascade(unify'(originals), variables)
    unificationError(originals.mapPair(`substitute(variables)),
        left.substitute(variables), right.substitute(variables))

define unify(variables, types)
    unify'(types, variables, types)

define unifyAll(variables, types)
    if isNil(types)
        variables
    zip(repeat(head(types)), tail(types)).cascade(unify, variables)

define generalize(type, variables, oldVariables)
    syntax(\\) := syntax(\)
    vs \\ vs' := vs |: (v -> not vs'.any((=~= v)))
    type' := type.substitute(variables)
    universals := type'.getFreeVariables(variables) \\
        oldVariables.getAllFreeVariables(variables)
    Scheme(universals, type')

define instantiate(Scheme(universals, type), variables, term)
    (freshVariables, variables') := newTypeVariables(universals, variables)
    renaming := newVariableMap(zip(universals, freshVariables))
    (type.rename(renaming).setSource(term), variables')


# stack is a list of type schemes for all the lambda-bound symbols in scope
# variables is a table that maps type variables to types (either type
#   variables or concrete types); every type variable appears in variables
define infer(stack, variables)
    case term @ Variable(_, debruijn)
        stack[debruijn - 1].instantiate(variables, term)
    case term @ Abstraction(_, metadata, body)
        if not isFreeType(getType(getAscription(metadata)))
            getAscription(metadata).instantiate(empty, term)
        (parameterType, variables') := variables.newTypeVariable(term)
        stack' := Scheme([], parameterType) :: stack
        (bodyType, variables'') := infer(stack', variables', body)
        (FunctionType(term, parameterType, bodyType), variables'')
    case term @ Application(_, applicand, argument)
        if isAbstraction(applicand)     # treat this as a let
            (valueType, variables') := infer(stack, variables, argument)
            stack' := valueType.generalize(variables', variables) :: stack
            infer(stack', variables', getBody(applicand))
        (argumentType, variables') := infer(stack, variables, argument)
        (applicandType, variables'') := infer(stack, variables', applicand)
        (returnType, variables''') := variables''.newTypeVariable(term)
        functionType := FunctionType(noTerm, argumentType, returnType)
        (returnType, variables'''.unify((applicandType, functionType)))
    case term @ Numeral(_, value)
        index := if value = 0 then 1 else 2
        (ADT(term, "â„•", [], 2, index), variables)
    case term @ Operation(_, _, _)
        (getBuiltinType(term), variables)


define inferType(stack, definition)
    if getTagLexeme(first(definition)) =*= "fix"
        getFixScheme(getSource(second(definition))) :: stack
    (type, variables') := infer(stack, empty, second(definition))
    type.generalize(variables', empty) :: stack


define getDefinitions
    Variable(_, _) -> []
    Abstraction(_, _, _) -> []
    Application(_, applicand, argument) ->
        if not isAbstraction(applicand) then [] else
        (getTermTag(applicand), argument) :: getDefinitions(getBody(applicand))
    Numeral(_, _) -> []
    Operation(_, _, _) -> []


define main(input)
    term := parse(input)
    definitions := getDefinitions(term)
    schemes := reverse(definitions.cascade(inferType, []))
    (names, _) := unzip(definitions)
    showTypings(zip(names, schemes))

#*
