
getDefinitionName(definition) := getParameter(getLeft(definition))
getDefinitionValue(definition) := getRight(definition)
getDefinitionScope(definition) := getBody(getLeft(definition))

newType(tag, code, components) := ((tag, code), components)
newFreeType(tag) := newType(tag, -1, [])
newBooleanType(tag) := newType(tag, -2, [])
newIntegerType(tag) := newType(tag, -3, [])
newFunctionType(tag, left, right) := newType(tag, -4, [left, right])
newTupleType(tag, types) := newType(tag, -5, types)
newListType(tag, type) := newType(tag, -6, [type])
newMaybeType(tag, type) := newType(tag, -7, [type])
newBottomType(tag) := newType(tag, -8, [])
newTypeVariable(variables, tag) := (
    type := newType(tag, #variables, [])
    (type, variables.insert(type, newFreeType(tag)))
)
newProjectionType(tag, elementTypes, returnType) :=
    newFunctionType(tag, newTupleType(tag, elementTypes), returnType)
newScheme(universals, type) := (universals, type)

getTypeCode := second <> first
getComponentTypes := second
isCompositeType(type) := length(getComponentTypes(type)) > 0
isTypeVariable(type) := getTypeCode(type) >= 0
isFreeType(type) := getTypeCode(type) = -1
isBooleanType(type) := getTypeCode(type) = -2
isIntegerType(type) := getTypeCode(type) = -3
isFunctionType(type) := getTypeCode(type) = -4
isTupleType(type) := getTypeCode(type) = -5
isListType(type) := getTypeCode(type) = -6
isMaybeType(type) := getTypeCode(type) = -7
isBottomType(type) := getTypeCode(type) = -8
isFree(type, variables) := !variables.hasKey(type) \/
    isFreeType(variables.get(type, undefined))
isSameType(a, b) := getTypeCode(a) = getTypeCode(b) /\
    zip(getComponentTypes(a), getComponentTypes(b)).all(uncurry(isSameType))
mapComponents(type, f) := newType(getTag(type), getTypeCode(type),
    getComponentTypes(type).map(f))

newVariableMap(mappings) := newTable((<=).on(getTypeCode), mappings)

// todo: make this work for arbitrarily high index
getVariableName(index) := ['a' + index]

showType(type) := (
    isBottomType(type) ? "Bottom"
    isIntegerType(type) ? "Integer"
    isBooleanType(type) ? "Boolean"
    isTypeVariable(type) ? getVariableName(getTypeCode(type))
    isFunctionType(type) ?
        "(" ++ getComponentTypes(type).map(showType).joinWith(" --> ") ++ ")"
    isTupleType(type) ?
        "(" ++ getComponentTypes(type).map(showType).joinWith("; ") ++ ")"
    isListType(type) ?
        "(" ++ showType(getComponentTypes(type)[0]) ++ ")[]"
    isMaybeType(type) ?
        "Maybe(" ++ showType(getComponentTypes(type)[0]) ++ ")"
    undefined
)

showVariableMap(variables) := (
    variables.getElements.map((key, value) ->
        showType(key) ++ " := " ++ showType(value)).joinWith("\n")
)

newBinaryOperatorType(tag) := newFunctionType(tag, newIntegerType(tag),
    newFunctionType(tag, newIntegerType(tag), newIntegerType(tag)))

newComparisonOperatorType(tag) := newFunctionType(tag, newIntegerType(tag),
    newFunctionType(tag, newIntegerType(tag), newBooleanType(tag)))

newErrorBuiltinType(tag) := newFunctionType(tag,
    newListType(tag, newIntegerType(tag)), newBottomType(tag))

builtinTypeConstructors := newDictionary([
    ("+", newBinaryOperatorType),
    ("-", newBinaryOperatorType),
    ("*", newBinaryOperatorType),
    ("/", newBinaryOperatorType),
    ("%", newBinaryOperatorType),
    ("=", newComparisonOperatorType),
    ("!=", newComparisonOperatorType),
    ("<", newComparisonOperatorType),
    (">", newComparisonOperatorType),
    ("<=", newComparisonOperatorType),
    (">=", newComparisonOperatorType),
    ("error", newErrorBuiltinType)
])

getBuiltinType(node) := (
    constructor := builtinTypeConstructors.get(getLexeme(node), undefined)
    constructor(getTag(node))
)

getKnownTypeScheme(name) := (
    tag := getTag(name)
    lexeme := getLexeme(name)
    (-->) := newFunctionType(tag)
    boolean := newBooleanType(tag)
    variables := newVariableMap([])
    (a, variables') := variables.newTypeVariable(tag)
    (b, variables'') := variables'.newTypeVariable(tag)
    aList := newListType(tag, a)
    lexeme =*= "true" ? (newScheme([], boolean), variables)
    lexeme =*= "false" ? (newScheme([], boolean), variables)
    lexeme =*= "if" ?
        (newScheme([a], boolean --> (a --> (a --> a))), variables')
    lexeme =*= "::" ? (newScheme([a], a --> (aList --> aList)), variables')
    lexeme =*= "head" ? (newScheme([a], aList --> a), variables')
    lexeme =*= "--" ? (newScheme([a], aList --> aList), variables')
    lexeme =*= "isEmpty" ? (newScheme([a], aList --> boolean), variables')
    lexeme =*= "nothing" ? (newScheme([a], newMaybeType(tag, a)), variables')
    lexeme =*= "just" ? (newScheme([a], a --> newMaybeType(tag, a)), variables')
    lexeme =*= "maybe" ? (newScheme([a, b],
        newMaybeType(tag, a) --> ((a --> b) --> (b --> b))), variables'')
    (newScheme([], newFreeType(tag)), variables)
)

getFreeVariables(type, variables) := (
    isTypeVariable(type) /\ type.isFree(variables) ?
        [type]
    join(getComponentTypes(type).map(`getFreeVariables(variables))).
        deduplicateBy(isSameType)
)

rename(type, variables) := (
    isTypeVariable(type) ? variables.get(type, type)
    type.mapComponents(`rename(variables))
)

substitute(type, variables) := (
    isTypeVariable(type) /\ !type.isFree(variables) ? (
        type' := variables.get(type, undefined)
        type'.getFreeVariables(newVariableMap([])).any(isSameType(type)) ?
            error("occurs check failed: " ++ showType(type) ++ " = " ++
                showType(type') ++ "\n" ++ showVariableMap(variables))
        type'.substitute(variables)
    )
    type.mapComponents(`substitute(variables))
)

// Robinson's Unification Algorithm
// see Comparing Unification Algorithms in First-Order Theorem Proving
// by Krystof Hoder and Andrei Voronkov
unify(variables, (left, right)) := (
    isTypeVariable(left) /\ !left.isFree(variables) ?
        variables.unify((left.substitute(variables), right))
    isTypeVariable(right) /\ !right.isFree(variables) ?
        variables.unify((left, right.substitute(variables)))
    isBottomType(left) \/ isBottomType(right) ? variables
    isSameType(left, right) ? variables
    isTypeVariable(left) ? variables.insert(left, right)
    isTypeVariable(right) ? variables.insert(right, left)
    (getTypeCode(left) = getTypeCode(right) /\
        length(getComponentTypes(left)) = length(getComponentTypes(right))) ?
        zip(getComponentTypes(left), getComponentTypes(right)).
            foldl(unify, variables)
    error("unification error")
)

unifyAll(variables, types) := (
    isEmpty(types) ? variables
    zip(repeat(types[0]), --types).foldl(unify, variables)
)

generalize(type, variables) := newScheme(type.getFreeVariables(variables), type)

newTypeVariables(originals, variables) := originals.map(getTag).
    foldMap(`newTypeVariable, variables)

instantiate(scheme, variables) := (
    (universals, type) := scheme
    (freshVariables, variables') := newTypeVariables(universals, variables)
    renaming := newVariableMap(zip(universals, freshVariables))
    (type.rename(renaming), variables')
)

inferProjection'(node, variables, stack) := (
    tag := getTag(node)
    isReference(node) ?
        (newProjectionType(tag, reverse(stack), stack[getDebruijnIndex(node)]),
        variables)
    isLambda(node) ? (
        (variable, variables') := variables.newTypeVariable(tag)
        inferProjection'(getBody(node), variables', variable :: stack)
    )
    undefined
)

inferProjection(node, variables) :=
    inferProjection'(getRight(getBody(node)), variables, [])

infer(node, stack, variables) := (
    tag := getTag(node)
    isInteger(node) ? (newIntegerType(tag), variables)
    isBuiltin(node) ? (getBuiltinType(node), variables)
    isStringLiteral(node) ? (newListType(tag, newIntegerType(tag)), variables)
    isList(node) ? (
        elements := getListElements(node)
        isEmpty(elements) ?
            variables.newTypeVariable(tag).mapFirst(newListType(tag))
        (elementTypes, variables') := elements.foldl(
            (types, variables'') -> element -> (
                stack' := repeat(undefined).take(length(types) + 1) ++ stack
                infer(element, stack', variables'').mapFirst((:: types))
            ), ([], variables)).mapFirst(reverse)
        (newListType(tag, elementTypes[0]), variables'.unifyAll(elementTypes))
    )
    isTuple(node) ? getTupleElements(node).foldMap(
        `infer(undefined :: stack), variables).mapFirst(newTupleType(tag))
    isProjection(node) ? inferProjection(node, variables)
    isRecursiveFunction(node) ? (
        (functionType, variables') := variables.newTypeVariable(tag)
        body := getBody(getRight(node))
        stack' := newScheme([], functionType) :: stack
        (functionType', variables'') := body.infer(stack', variables')
        (functionType, variables''.unify((functionType, functionType')))
    )
    isReference(node) ? stack[getDebruijnIndex(node)].instantiate(variables)
    isLambda(node) ? (
        (parameterType, variables') := variables.newTypeVariable(tag)
        stack' := newScheme([], parameterType) :: stack
        (bodyType, variables'') := getBody(node).infer(stack', variables')
        (newFunctionType(tag, parameterType, bodyType), variables'')
    )
    isDefinition(node) ? (
        (valueType, variables') := getRight(node).infer(stack, variables)
        stack' := valueType.generalize(variables') :: stack
        getDefinitionScope(node).infer(stack', variables')
    )
    isApplication(node) ? (
        (rightType, variables') := getRight(node).infer(stack, variables)
        (leftType, variables'') := getLeft(node).infer(stack, variables')
        (returnType, variables''') := variables''.newTypeVariable(tag)
        functionType := newFunctionType(getTag(leftType), rightType, returnType)
        (returnType, variables'''.unify((leftType, functionType)))
    )
    undefined
)

inferType(stack, definition) := (
    (name, value) := definition
    (knownTypeScheme, variables) := getKnownTypeScheme(name)
    !isFreeType(second(knownTypeScheme)) ? knownTypeScheme :: stack
    (type, variables') := infer(value, stack, variables)
    type.substitute(variables').generalize(variables') :: stack
)

addLabels(labels, type) := (
    isTypeVariable(type) ? (
        labels.hasKey(type) ? labels
        labels.insert(type, #labels)
    )
    getComponentTypes(type).foldl(addLabels, labels)
)

makeLabels(type) := newVariableMap([]).addLabels(type)

showTypeWithLabels(type, labels) := (
    isBottomType(type) ? "Bottom"
    isIntegerType(type) ? "Integer"
    isBooleanType(type) ? "Boolean"
    isTypeVariable(type) ? getVariableName(labels.get(type, undefined))
    isFunctionType(type) ?
        "(" ++ getComponentTypes(type).map(
            `showTypeWithLabels(labels)).joinWith(" --> ") ++ ")"
    isTupleType(type) ?
        "(" ++ getComponentTypes(type).map(
            `showTypeWithLabels(labels)).joinWith("; ") ++ ")"
    isListType(type) ?
        showTypeWithLabels(getComponentTypes(type)[0], labels) ++ "[]"
    isMaybeType(type) ?
        "Maybe(" ++ showTypeWithLabels(
            getComponentTypes(type)[0], labels) ++ ")"
    undefined
)

showPrettyType(type) := showTypeWithLabels(type, makeLabels(type))

newDefinition(definition) :=
    (getDefinitionName(definition), getDefinitionValue(definition))

getDefinitions(node) := (
    !isDefinition(node) ? []
    newDefinition(node) :: getDefinitions(getDefinitionScope(node))
)

showDefinition((name, value)) := getLexeme(name) ++ " := " ++ showAST(value)
showDefinitions(definitions) := definitions.map(showDefinition).joinWith("\n")

showTypings(typings) :=
    typings.map((name, scheme) -> (
        (universals, type) := scheme
        labels := makeLabels(type)
        getLexeme(name) ++ " : forall(" ++
            universals.map(`showTypeWithLabels(labels)).joinWith(", ") ++
            ") " ++ showTypeWithLabels(type, labels))).joinWith("\n\n")

main(input) := (
    node := parse(input, "")
    definitions := getDefinitions(node)
    stack := definitions.foldl(inferType, [])
    schemes := reverse(stack)
    (names, _) := unzip(definitions)
    showTypings(zip(names, schemes))
)
