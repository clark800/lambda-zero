
getFreeVariables(type, variables) := (
    isTypeVariable(type) ? (
        type.isFree(variables) ? [type]
        getFreeVariables(variables.get(type, undefined), variables)
    )
    join(getComponentTypes(type).map(`getFreeVariables(variables))).
        deduplicateBy((=~=))
)

getAllFreeVariables(variables, variables') :=
    join(variables.getKeys.map(`getFreeVariables(variables'))).
        deduplicateBy((=~=))

substitute(type, variables) := (
    isTypeVariable(type) ? (
        type.isFree(variables) ? type
        type' := variables.get(type, undefined).setNode(getNode(type))
        type'.getFreeVariables(empty).any((=~= type)) ?
            recursionError(type, type, variables)
        type'.substitute(variables)
    )
    type.mapComponents(`substitute(variables))
)

// Robinson's Unification Algorithm
// see Comparing Unification Algorithms in First-Order Theorem Proving
// by Krystof Hoder and Andrei Voronkov
unify'(originals, variables, (left, right)) := (
    isTypeVariable(left) /\ !left.isFree(variables) ?
        unify'(originals, variables, (left.substitute(variables), right))
    isTypeVariable(right) /\ !right.isFree(variables) ?
        unify'(originals, variables, (left, right.substitute(variables)))
    isBottomType(left) \/ isBottomType(right) ? variables
    left =~= right ? variables
    isTypeVariable(left) ? variables.insert(left, right)
    isTypeVariable(right) ? variables.insert(right, left)
    (getTypeCode(left) = getTypeCode(right) /\
        length(getComponentTypes(left)) = length(getComponentTypes(right))) ?
        zip(getComponentTypes(left), getComponentTypes(right)).
            foldl(unify'(originals), variables)
    unificationError(originals.mapPair(`substitute(variables)),
        left.substitute(variables), right.substitute(variables))
)

unify(variables, types) := unify'(types, variables, types)

unifyAll(variables, types) := (
    isEmpty(types) ? variables
    zip(repeat(types[0]), --types).foldl(unify, variables)
)

generalize(type, variables, oldVariables) := (
    vs \\ vs' := vs | v -> !vs'.any((=~= v))
    type' := type.substitute(variables)
    universals := type'.getFreeVariables(variables) \\
        oldVariables.getAllFreeVariables(variables)
    newScheme(universals, type')
)

instantiate(scheme, variables, node) := (
    (universals, type) := scheme
    (freshVariables, variables') := newTypeVariables(universals, variables)
    renaming := newVariableMap(zip(universals, freshVariables))
    (type.rename(renaming).setNode(node), variables')
)

inferProjection'(root, node, variables, stack) := (
    isReference(node) ? (
        projectedType := stack[getDebruijnIndex(node)]
        (newProjectionType(root, reverse(stack), projectedType), variables)
    )
    isLambda(node) ? (
        (variable, variables') := variables.newTypeVariable(blank)
        inferProjection'(root, getBody(node), variables', variable :: stack)
    )
    undefined
)

inferProjection(node, variables) :=
    inferProjection'(node, getRight(getBody(node)), variables, [])

inferList(node, stack, variables, infer) := (
    elements := getListElements(node)
    isEmpty(elements) ?
        variables.newTypeVariable(blank).mapFirst(newListType(node))
    arguments := zip(elements, iterate((undefined ::), undefined :: stack))
    (types, variables') := arguments.foldMap(uncurry(infer), variables)
    (newListType(node, types[0]), variables'.unifyAll(types))
)

inferTuple(node, stack, variables, infer) := (
    (elementTypes, variables') :=
        getTupleElements(node).foldMap(`infer(undefined :: stack), variables)
    (newTupleType(node, elementTypes), variables')
)

infer(node, stack, variables) := (
    isInteger(node) ? (newIntegerType(node), variables)
    isBuiltin(node) ? (getBuiltinType(node), variables)
    isStringLiteral(node) ? (newStringType(node), variables)
    isList(node) ? inferList(node, stack, variables, infer)
    isTuple(node) ? inferTuple(node, stack, variables, infer)
    isProjection(node) ? inferProjection(node, variables)
    isReference(node) ?
        stack[getDebruijnIndex(node)].instantiate(variables, node)
    isRecursiveFunction(node) ? (
        function := getBody(getRight(node))
        (functionType, variables') := variables.newTypeVariable(function)
        stack' := newScheme([], functionType) :: stack
        (functionType', variables'') := function.infer(stack', variables')
        (functionType, variables''.unify((functionType', functionType)))
    )
    isLambda(node) ? (
        parameter := getParameter(node)
        (parameterType, variables') := variables.newTypeVariable(parameter)
        stack' := newScheme([], parameterType) :: stack
        (bodyType, variables'') := getBody(node).infer(stack', variables')
        (newFunctionType(node, parameterType, bodyType), variables'')
    )
    isDefinition(node) ? (
        (valueType, variables') := getRight(node).infer(stack, variables)
        stack' := valueType.generalize(variables', variables) :: stack
        getDefinitionScope(node).infer(stack', variables')
    )
    isApplication(node) ? (
        (rightType, variables') := getRight(node).infer(stack, variables)
        (leftType, variables'') := getLeft(node).infer(stack, variables')
        (returnType, variables''') := variables''.newTypeVariable(node)
        functionType := newFunctionType(blank, rightType, returnType)
        (returnType, variables'''.unify((leftType, functionType)))
    )
    undefined
)

inferType(stack, definition) := (
    (name, value) := definition
    knownTypeScheme := getKnownTypeScheme(name)
    !isFreeType(second(knownTypeScheme)) ? knownTypeScheme :: stack
    (type, variables') := infer(value, stack, empty)
    type.generalize(variables', empty) :: stack
)

main(input) := (
    node := parse(input, "")
    definitions := getDefinitions(node)
    schemes := reverse(definitions.foldl(inferType, []))
    (names, _) := unzip(definitions)
    showTypings(zip(names, schemes))
)
