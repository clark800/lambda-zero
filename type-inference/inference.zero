#* inference.zero

def onTag(tag, message)
    message ++ " " ++ showTagWithLocation(tag) ++ "\n"


def onTerm(term, message)
    onTag(getTermTag(term), message)


def pushContext(type, term, context @ (environment, types))
    (environment.push(Closure(term, environment)), types.push(type))


def newInstantiationMetavariable(tag, domainClosure)
    _ @ Closure(domain, environment) := evaluateClosure(domainClosure)
    metavariable <- newPositiveMetavariable(tag)
    if isType(domain) or isSingleton(domain) or isConstruction(domain)
        # TODO: verify construction is non-empty
        lift return metavariable
    if domain is Equation(_, left, right)
        try _ <- unify(Closure(left, environment), Closure(right, environment))
        lift return metavariable
    lift error "cannot determine that domain is nonempty".onTerm(domain)


def instantiateWith(newMetavariable, closure @ Closure(term, environment))
    if term is Intersection(tag, domain, body)
        try metavariable <- newMetavariable(tag, Closure(domain, environment))
        closure' := Closure(body, environment.push(enclose(metavariable)))
        closure'.instantiateWith(newMetavariable)
    lift return closure


def instantiate(closure)
    instantiateWith(newInstantiationMetavariable, closure)


def convertFunctionsToIntersections(term)
    if term is Function(tag, domain, body)
        Intersection(tag, domain, convertFunctionsToIntersections(body))
    term


def getPatternMatchDomain(Closure(typeConstructor, environment))
    term := convertFunctionsToIntersections(typeConstructor)
    try closure <- instantiate(Closure(term, environment))
    lift return evaluateClosure(closure)  # evaluate application of type constructor


def instantiateConstruction(closure, environment)
    _ @ Closure(construction, environment') := evaluateClosure(closure)
    if construction is Construction(tag, index, arguments, term)
        if environment.get(index) is Just(typeConstructor)
            if term is Intersection(tag, domain, body)
                closure' := Closure(body, environment'.push(typeConstructor))
                instantiate(closure')  # instantiate "r"
            lift error "expected intersection".onTerm(term)
        lift error "invalid construction".onTerm(construction)
    lift error "expected construction".onTerm(construction)


def getDomain(closure @ Closure(domain, environment))
    if domain is Type(tag, index)
        if index is -_ n
            if environment.get(n) is Just(typeConstructor)
                getPatternMatchDomain(typeConstructor)
            lift error "undefined type family".onTerm(domain)
        lift return closure
    if isUnknown(domain)
        metavariable <- newPositiveMetavariable(getTermTag(domain))
        lift return enclose(metavariable)
    lift return closure


def newFunctionType(tag, domainClosure, body)
    _ @ Closure(domain, environment) := domainClosure
    Closure(Implication(tag, domain, body), environment)


def getVariableType(context @ (_, types), tag, index)
    types.seek(-_ abs(index)) ?? throwError("unbound variable", tag)


def inferType(context @ (environment, types))
    enclose'(term) := Closure(term, environment)

    case Metavariable(tag, index)
        # todo: check for annotated type in metacontext
        lift error "not implemented".onTag(tag)
    case Type(tag, index)
        match index
            case +_ level -> lift return enclose(Type(tag, +_(up level)))
            case -_ family -> lift return enclose(Type(tag, +_ 1))
    case Variable(tag, index)
        if isUnknown(this)
            lift return enclose(this)
        type := getVariableType(context, tag, index)
        if isNegative(index)
            instantiateConstruction(type, environment)
        instantiate(type)
    case Inference(tag, domain)
        lift error "not implemented".onTag(tag)
    case Singleton(tag, type, index)
        lift return enclose(Type(tag, +_ 0))
    case Function(tag, domain, body)
        try _ <- domain.inferType(context)
        try domainClosure <- getDomain(enclose'(domain))
        argument <- newNegativeMetavariable(tag)
        context' := context.pushContext(domainClosure, argument)
        try range <- body.inferType(context')
        codomain <- addPositiveMetavariable(tag, range)
        lift return newFunctionType(tag, domainClosure, codomain)
    case Implication(tag, domain, body)
        try _ <- domain.inferType(context)
        argument <- newNegativeMetavariable(tag)
        try _ <- body.inferType(context.pushContext(enclose'(domain), argument))
        lift return enclose(Type(tag, +_ 0))
    case Intersection(tag, domain, body)
        try _ <- domain.inferType(context)
        argument <- newNegativeMetavariable(tag)
        try _ <- body.inferType(context.pushContext(enclose'(domain), argument))
        lift return enclose(Type(tag, +_ 0))
    case Application(tag, applicand, argument)
        try argumentType <- argument.inferType(context)
        if applicand is Function(tag', domain, body)
            # handle local definitions specially so that we have argument in env
            if isUnknown(domain)  # avoid creating unnecessary metavariable
                body.inferType(context.pushContext(argumentType, argument))
            try domainClosure <- getDomain(enclose'(domain))
            try _ <- unify(argumentType, domainClosure)
            body.inferType(context.pushContext(domainClosure, argument))
        try applicandType <- applicand.inferType(context)
        metacontext <- getState
        try closure' <- lift tryEvaluate(metacontext, applicandType)
        _ @ Closure(term', environment') := closure'
        if term' is Implication(tag, domain, body)
            try _ <- unify(argumentType, Closure(domain, environment'))
            lift return Closure(body, environment'.push(argumentType))
        returnType <- newPositiveMetavariable(tag)
        tag := getTermTag(applicand)
        functionType := newFunctionType(tag, argumentType, returnType)
        # applicandType <: functionType  =>  argumentType <: parameterType
        try _ <- unify(applicandType, functionType)
        lift return enclose(returnType)
    case Equation(tag, left, right)
        try leftType <- left.inferType(context)
        try rightType <- right.inferType(context)
        lift return enclose(Type(tag, +_ 0))
    case Construction(tag, index, arguments, term)
        lift return enclose(Type(tag, +_ 0))
    case Numeral(tag, type, value)
        lift return enclose'(type)
    case Operation(tag, term, _)
        term.inferType(context)


def inferGeneralizedType(context, term)
    if term is Variable(tag, index)
        # prevent re-generalization, which could change forall names
        lift return getVariableType(context, tag, index)
    try type <- term.inferType(context)
    metacontext <- getState
    lift return enclose(type.generalize(metacontext))

#*
