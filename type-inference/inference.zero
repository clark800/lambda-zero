#* inference.zero

define pushContext(term, scheme, context @ (terms, schemes))
    # TODO: replace schemes with an array of closures of types
    (terms.push(Closure(term, terms)), schemes.push(scheme))


define pushParameter(scheme, context)
    # TODO: term should be an atom
    pushContext(Top(noTag), scheme, context)


define getAllFreeVariables(metacontext, metacontext')
    indices := (0 ...)[0, metacontext.getSize]
    join(indices.map(MetaVariable(noTag)).map(
        getFreeVariables(metacontext'))).deduplicateBy(sameHead)


define generalize(metacontext, oldMetacontext, type)
    syntax(\\) := syntax(\)
    vs \\ vs' := vs |: (v -> not vs'.any(sameHead(v)))
    type' := type.substitute(metacontext)
    universals := type'.getFreeVariables(metacontext) \\
        metacontext.getAllFreeVariables(oldMetacontext)
    Scheme(universals, type')


define newInstantiationMapping(universals, metacontext)
    tags := universals.map(getTermTag)
    (metaVariables, metacontext') := newMetaVariables(tags, metacontext)
    addresses := universals.map(maybeAddress).prune
    mapping := newMapping(zip(addresses, metaVariables))
    (mapping, metacontext')


define instantiate(tag, metacontext, Scheme(universals, type))
    (mapping, metacontext') := newInstantiationMapping(universals, metacontext)
    (type.applyMapping(mapping).setLocation(tag), metacontext')


define peelImplicits(type)
    with type as Implicit(tag, _, body)
        (tags, type') := peelImplicits(body)
        (tag :: tags, type')
    ([], type)


define convertToScheme(metacontext, type)
    # type may be wrapped in some implicits; we create a new metavariable
    # for each implicit, then substitute them in the type
    (tags, type') := peelImplicits(type)
    (metaVariables, metacontext') := newMetaVariables(tags, metacontext)
    environment := newArray(metaVariables.map(v -> Closure(v, newArray([]))))
    type'' := flattenClosure(Closure(type', environment))
    (Scheme(metaVariables, type''), metacontext')


define instantiateType(metacontext, type)
    convertToScheme(metacontext, type).mapFirst(getType)


define getInnerType(tag, outerType, environment)
    _ @ Closure(construction, environment') :=
        evaluateClosure(Closure(outerType, environment))
    with construction as Construction(_, _, type)
        flattenClosure(Closure(type, environment'))
    throwError("expected construction in case annotation", tag)


define infer(context @ (environment, types), metacontext)
    case Top(tag)
        (Top(tag), metacontext)
    case Constant(tag, index)
        scheme := types.get(index) ?? throwError("unbound constant", tag)
        scheme.instantiate(tag, metacontext)
    case Variable(tag, debruijn)
        scheme := types.peek(debruijn -- 1) ??
            throwError("unbound variable", tag)
        scheme.instantiate(tag, metacontext)
    case MetaVariable(tag, address)
        with metacontext.get(address) ?? Void as Just(Closure(term, _))
            infer(context, metacontext, term)
        newMetaVariable(tag, metacontext)
    case Binder(tag, variety, type, body)
        # a metavariable in the annotation field means there is no annotation
        (type, metacontext) := if isMetaVariable(type) then
            metacontext.newMetaVariable(tag) else (type, metacontext)
        # todo: type may contain variables which would get lost here
        context' := context.pushParameter(Scheme([], type))
        match variety
            case AbstractionV
                (bodyType, metacontext') := infer(context', metacontext, body)
                (Implication(tag, type, bodyType), metacontext')
            case CaseAbstractionV
                (outerType, metacontext) := instantiateType(metacontext, type)
                type' := getInnerType(tag, outerType, environment)
                (scheme, metacontext) := convertToScheme(metacontext, type')
                context' := context.pushParameter(scheme)
                (bodyType, metacontext) := infer(context', metacontext, body)
                (Implication(tag, outerType, bodyType), metacontext)
            case InstanceV
                instantiateType(metacontext, type)
    case Implication(tag, type, body)
        (type, metacontext) := if isMetaVariable(type) then
            metacontext.newMetaVariable(tag) else (type, metacontext)
        context' := context.pushParameter(Scheme([], type))
        infer(context', metacontext, body).mapFirst(_ -> Top(veil(tag)))
    case Implicit(tag, type, body)
        (type, metacontext) := if isMetaVariable(type) then
            metacontext.newMetaVariable(tag) else (type, metacontext)
        context' := context.pushParameter(Scheme([], type))
        infer(context', metacontext, body)
    case Application(tag, applicand, argument)
        (argumentType, metacontext') := infer(context, metacontext, argument)
        with applicand as Binder(_, variety, type, body)
            if isAbstractionV(variety) and isMetaVariable(type)
                # suppport polymorphism in nested functions
                scheme := argumentType.generalize(metacontext', metacontext)
                context' := context.pushParameter(scheme)
                infer(context', metacontext', body)
            pass
        (applicandType, metacontext'') :=
            infer(context, metacontext', applicand)
        (returnType, metacontext''') := metacontext''.newMetaVariable(tag)
        applicandTag := getTermTag(applicand)
        functionType := Implication(applicandTag, argumentType, returnType)
        (returnType, unify(context, metacontext''',
            (applicandType, functionType)))
    case Construction(tag, parameters, objectType)
        (Top(veil(tag)), metacontext)
    case Numeral(tag, type, value)
        (type, metacontext)
    case Operation(tag, type, _, _)
        instantiateType(metacontext, type)


define getFixScheme(tag)
    syntax(>->) := syntax(++)
    (>->) := Implication(tag)
    a := MetaVariable(veil(tag), 0)
    Scheme([a], (a >-> a) >-> a)


define inferType(context, (tag, term))
    if getTagLexeme(tag) =*= "fix"
        context.pushContext(term, getFixScheme(getTermTag(term)))
    metacontext := newArray([])
    (type, metacontext') := infer(context, metacontext, term)
    scheme := type.generalize(metacontext', metacontext)
    context.pushContext(term, scheme)


define main(input)
    (tags, _, environment) := parse(input)
    terms := environment.toList.map(getTerm)
    context := (newArray([]), newArray([]))
    context' := zip(tags, terms).cascade(inferType, context)
    schemes := second(context').toList
    showTypings(zip(tags, schemes))

#*
