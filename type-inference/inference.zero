#* inference.zero


define getValue(variable, variables)
    variables.access(getAddress(variable)) ?? FreeType


define isFree(variable, variables)
    isFreeType(variables.getValue(variable))


define getFreeVariables(variables, type)
    if isTypeVariable(type)
        type' := variables.getValue(type)
        if isFreeType(type')
            [type]
        getFreeVariables(variables, type')
    join(getInternalTypes(type).map(getFreeVariables(variables))).
        deduplicateBy(sameRoot)

define getAllFreeVariables(variables, variables')
    join(variables.dump.map(first).map(TypeVariable(noTerm)).map(
        getFreeVariables(variables'))).deduplicateBy(sameRoot)

define substitute(variables, type)
    if isTypeVariable(type)
        type' := variables.getValue(type)
        if isFreeType(type')
            type
        type'' := type'.setSource(getSource(type))
        if type''.getFreeVariables(newStore([])).any(sameRoot(type))
            recursionError(type, type, variables)
        type''.substitute(variables)

    type.mapInternalTypes(substitute(variables))

# Robinson's Unification Algorithm
# see Comparing Unification Algorithms in First-Order Theorem Proving
# by Krystof Hoder and Andrei Voronkov
define unify'(originals, variables, (left, right))
    if isTypeVariable(left) and not isFree(left, variables)
        unify'(originals, variables, (variables.getValue(left), right))
    if isTypeVariable(right) and not isFree(right, variables)
        unify'(originals, variables, (left, variables.getValue(right)))
    if isBottomType(left) or isBottomType(right)
        variables
    if sameRoot(left, right)
        zip(getComponentTypes(left), getComponentTypes(right)).
            cascade(unify'(originals), variables)
    if isTypeVariable(left)
        variables.assign(getAddress(left), right)
    if isTypeVariable(right)
        variables.assign(getAddress(right), left)
    if isADT(left) and not isFreeType(getMatchType(left))
        unify'(originals, variables, (getMatchType(left), right))
    unificationError(originals.mapPair(substitute(variables)),
        left.substitute(variables), right.substitute(variables))

define unify(variables, types)
    unify'(types, variables, types)

define unifyAll(variables, types)
    with types as type :: types'
        zip(repeat(type), types').cascade(unify, variables)
    variables

define generalize(variables, oldVariables, type)
    syntax(\\) := syntax(\)
    vs \\ vs' := vs |: (v -> not vs'.any(sameRoot(v)))
    type' := type.substitute(variables)
    universals := type'.getFreeVariables(variables) \\
        variables.getAllFreeVariables(oldVariables)
    Scheme(universals, type')

define instantiate(variables, term, Scheme(universals, type))
    (freshVariables, variables') := newTypeVariables(universals, variables)
    mappings := zip(universals, freshVariables)
    renaming := newRenaming(mappings)
    (type.rename(renaming).setSource(term), variables')


define getResultType(type)
    if isFunctionType(type) then getResultType(getBodyType(type)) else type


define convertConstructorType(variable, type)
    if isADT(type)
        variable
    if isFunctionType(type)
        FunctionType(getSource(type), getParameterType(type),
            convertConstructorType(variable, getBodyType(type)))
    abort "Type error: invalid constructor at " ++ showTypeLocation(type)


define constructInnerParameterType(types, variable, term)
    types' := types.map(convertConstructorType(variable))
    types'.fold(FunctionType(term), variable)


define constructParameterType(variables, schemes, term)
    tag := getTermTag(term)
    if isNil(schemes)
        throwError("Type error: no cases:", tag)
    types := schemes.map(getType)
    adtTypes := types.map(getResultType)
    if not adtTypes.all(isADT)
        throwError("Type error: invalid cases:", tag)
    names := deduplicateBy((=*=), adtTypes.map(getName))
    counts := deduplicate(adtTypes.map(getCount))
    if length(names) =/= 1 or length(counts) =/= 1
        throwError("Type error: inconsistent cases:", tag)
    count := safeHead(counts) ?? 0
    indices := adtTypes.map(getIndex)
    if length(indices) < count
        throwError("Type error: missing case:", tag)
    if length(indices) > count
        throwError("Type error: too many cases:", tag)
    if not indices =*= sort(indices)
        throwError("Type error: cases out of order:", tag)

    # note: all schemes should have the same universals
    universals := getUniversals(safeHead(schemes) ?? Free)
    variable := TypeVariable(term, length(universals))
    universals' := variable :: universals

    outerType := safeHead(adtTypes) ?? FreeType   # todo: set index to zero
    innerType := constructInnerParameterType(types, variable, term)

    # note: the variables in inner and outer must be instantiated together
    # so we use a trick of packaging them together in a FunctionType
    scheme := Scheme(universals', FunctionType(term, outerType, innerType))
    (polarType, variables') := scheme.instantiate(variables, term)
    outerType := getParameterType(polarType)
    matchType := getBodyType(polarType)
    fullType := setMatchType(outerType, matchType)
    universal := getResultType(matchType)
    fullScheme := Scheme([universal], fullType)
    (outerType, fullScheme, variables')


define inferParameterType(stack, variables, term)
    metadata := getMetadata(term)
    schemes := getConstructorDebruijnIndices(metadata).map(k ->
        stack.seek(k -- 1)).prune
    if isNil(schemes)
        (parameterType, variables') := variables.newTypeVariable(term)
        (parameterType, Scheme([], parameterType), variables')
    constructParameterType(variables, schemes, term)


# stack is a list of type schemes for all the lambda-bound symbols in scope
# variables is a table that maps type variables to types (either type
#   variables or concrete types); every type variable appears in variables
define infer(stack, variables)
    case term @ Variable(_, debruijn)
        scheme := stack.seek(debruijn -- 1) ?? Free
        scheme.instantiate(variables, term)
    case term @ Abstraction(_, metadata, body)
        if not isFreeType(getType(getAscription(metadata)))
            getAscription(metadata).instantiate(newStore([]), term)
        (type, scheme, variables') := inferParameterType(stack, variables, term)
        (bodyType, variables'') := infer(stack.push(scheme), variables', body)
        (FunctionType(term, type, bodyType), variables'')
    case term @ Application(_, isLet, applicand, argument)
        if isLet
            (valueType, variables') := infer(stack, variables, argument)
            stack' := stack.push(valueType.generalize(variables', variables))
            infer(stack', variables', getBody(applicand))
        (argumentType, variables') := infer(stack, variables, argument)
        (applicandType, variables'') := infer(stack, variables', applicand)
        (returnType, variables''') := variables''.newTypeVariable(term)
        functionType := FunctionType(noTerm, argumentType, returnType)
        (returnType, unify(variables''', (applicandType, functionType)))
    case term @ Numeral(_, value)
        index := if value = 0 then 1 else 2
        (ADT(term, "â„•", NOFIX, [], FreeType, 2, index), variables)
    case term @ Operation(_, _, _)
        (getBuiltinType(term), variables)


define inferType(stack, definition)
    if getTagLexeme(first(definition)) =*= "fix"
        stack.push(getFixScheme(second(definition)))
    (type, variables') := infer(stack, newStore([]), second(definition))
    stack.push(type.generalize(variables', newStore([])))


define getDefinitions(term)
    with term as Application(_, isLet, applicand, argument)
        if isLet then (getTermTag(applicand), argument) ::
            getDefinitions(getBody(applicand)) else []
    []


define main(input)
    term := parse(input)
    definitions := getDefinitions(term)
    stack := definitions.cascade(inferType, newRandomAccessList([]))
    schemes := stack.getList.reverse
    (names, _) := unzip(definitions)
    showTypings(zip(names, schemes))

#*
