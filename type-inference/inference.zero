
getDefinitionName(definition) := getParameter(getLeft(definition))
getDefinitionValue(definition) := getRight(definition)
getDefinitionScope(definition) := getBody(getLeft(definition))

newType(node, code, components) := newNode((node, code), components)
getNode(type) := first(getData(type))
newFreeType(node) := newType(node, -1, [])
newBooleanType(node) := newType(node, -2, [])
newIntegerType(node) := newType(node, -3, [])
newFunctionType(node, left, right) := newType(node, -4, [left, right])
newTupleType(node, types) := newType(node, -5, types)
newListType(node, type) := newType(node, -6, [type])
newTreeType(node, type) := newType(node, -7, [type])
newMaybeType(node, type) := newType(node, -8, [type])
newBottomType(node) := newType(node, -9, [])
newTypeVariable(variables, node) := (
    type := newType(node, #variables, [])
    (type, variables.insert(type, newFreeType(node)))
)
newProjectionType(node, elementTypes, returnType) :=
    newFunctionType(node, newTupleType(node, elementTypes), returnType)
newScheme(universals, type) := (universals, type)

getTypeCode := second <> first
isNewVariable(variable, variables) := getTypeCode(variable) >= #variables
getComponentTypes := second
isCompositeType(type) := length(getComponentTypes(type)) > 0
isTypeVariable(type) := getTypeCode(type) >= 0
isFreeType(type) := getTypeCode(type) = -1
isBooleanType(type) := getTypeCode(type) = -2
isIntegerType(type) := getTypeCode(type) = -3
isFunctionType(type) := getTypeCode(type) = -4
isTupleType(type) := getTypeCode(type) = -5
isListType(type) := getTypeCode(type) = -6
isTreeType(type) := getTypeCode(type) = -7
isMaybeType(type) := getTypeCode(type) = -8
isBottomType(type) := getTypeCode(type) = -9
isFree(type, variables) := !variables.hasKey(type) \/
    isFreeType(variables.get(type, undefined))
isSameType(a, b) := getTypeCode(a) = getTypeCode(b) /\
    zip(getComponentTypes(a), getComponentTypes(b)).all(uncurry(isSameType))
mapComponents(type, f) := newType(getNode(type), getTypeCode(type),
    getComponentTypes(type).map(f))

newVariableMap(mappings) := newTable((<=).on(getTypeCode), mappings)

getVariableName(index) := (
    characters := ['a', 'b', 'c', 'd']
    index < 4 ? [characters[index]]
    getVariableName((index / 4) - 1) ++ [characters[index % 4]]
)

showType(type) := (
    showType'(type') :=
        isFunctionType(type') ? "(" ++ showType(type') ++ ")" || showType(type')
    arrowUTF8 := [226, 134, 146]
    isFreeType(type) ? "_"
    isBottomType(type) ? "Bottom"
    isIntegerType(type) ? [226, 132, 164]
    isBooleanType(type) ? [240, 157, 148, 185]
    isTypeVariable(type) ? getVariableName(getTypeCode(type))
    isTupleType(type) ?
        "(" ++ getComponentTypes(type).map(showType).joinWith("; ") ++ ")"
    isMaybeType(type) ?
        "Maybe(" ++ showType(getComponentTypes(type)[0]) ++ ")"
    isListType(type) ? showType'(getComponentTypes(type)[0]) ++ "[]"
    isTreeType(type) ? "Tree(" ++ showType(getComponentTypes(type)[0]) ++ ")"
    isFunctionType(type) ? (
        components := getComponentTypes(type)
        showType'(components[0]) ++ " " ++ arrowUTF8 ++ " " ++
            showType(components[1])
    )
    undefined
)

showVariableMap(variables) :=
    variables.getElements.map((key, value) ->
        showType(key) ++ " := " ++ showType(value)).joinWith("\n")

newBinaryOperatorType(node) := newFunctionType(node, newIntegerType(node),
    newFunctionType(node, newIntegerType(node), newIntegerType(node)))

newComparisonOperatorType(node) := newFunctionType(node, newIntegerType(node),
    newFunctionType(node, newIntegerType(node), newBooleanType(node)))

newErrorBuiltinType(node) := newFunctionType(node,
    newListType(node, newIntegerType(node)), newBottomType(node))

builtinTypeConstructors := newDictionary([
    ("+", newBinaryOperatorType),
    ("-", newBinaryOperatorType),
    ("*", newBinaryOperatorType),
    ("/", newBinaryOperatorType),
    ("%", newBinaryOperatorType),
    ("=", newComparisonOperatorType),
    ("!=", newComparisonOperatorType),
    ("<", newComparisonOperatorType),
    (">", newComparisonOperatorType),
    ("<=", newComparisonOperatorType),
    (">=", newComparisonOperatorType),
    ("error", newErrorBuiltinType)
])

getBuiltinType(node) := (
    constructor := builtinTypeConstructors.get(getLexeme(node), undefined)
    constructor(node)
)

getKnownTypeScheme(name) := (
    lexeme := getLexeme(name)
    (-->) := newFunctionType(name)
    boolean := newBooleanType(name)
    variables := newVariableMap([])
    (a, variables') := variables.newTypeVariable(name)
    (b, variables'') := variables'.newTypeVariable(name)
    aList := newListType(name, a)
    lexeme =*= "true" ? (newScheme([], boolean), variables)
    lexeme =*= "false" ? (newScheme([], boolean), variables)
    lexeme =*= "if" ?
        (newScheme([a], boolean --> (a --> (a --> a))), variables')
    lexeme =*= "::" ? (newScheme([a], a --> (aList --> aList)), variables')
    lexeme =*= "head" ? (newScheme([a], aList --> a), variables')
    lexeme =*= "--" ? (newScheme([a], aList --> aList), variables')
    lexeme =*= "isEmpty" ? (newScheme([a], aList --> boolean), variables')
    lexeme =*= "nothing" ? (newScheme([a], newMaybeType(name, a)), variables')
    lexeme =*= "just" ? (newScheme([a],
        a --> newMaybeType(name, a)), variables')
    lexeme =*= "maybe" ? (newScheme([a, b],
        newMaybeType(name, a) --> ((a --> b) --> (b --> b))), variables'')
    lexeme =*= "newNode" ? (newScheme([a], a --> (
        newListType(name, newTreeType(name, a)) -->
            newTreeType(name, a))), variables')
    lexeme =*= "getData" ? (newScheme([a],
        newTreeType(name, a) --> a), variables')
    lexeme =*= "getChildren" ? (newScheme([a], newTreeType(name, a) -->
        newListType(name, newTreeType(name, a))), variables')
    (newScheme([], newFreeType(name)), variables)
)

getFreeVariables(type, variables) := (
    isTypeVariable(type) /\ type.isFree(variables) ?
        [type]
    join(getComponentTypes(type).map(`getFreeVariables(variables))).
        deduplicateBy(isSameType)
)

rename(type, variables) := (
    isTypeVariable(type) ? variables.get(type, type)
    type.mapComponents(`rename(variables))
)

substitute(type, variables) := (
    isTypeVariable(type) /\ !type.isFree(variables) ? (
        type' := variables.get(type, undefined)
        type'.getFreeVariables(newVariableMap([])).any(isSameType(type)) ?
            error("occurs check failed at " ++
                showLocation(getTag(getNode(type))) ++
                " and " ++ showLocation(getTag(getNode(type'))) ++
                ":\n" ++ showType(type) ++ " = " ++ showType(type') ++ "\n\n" ++
                showVariableMap(variables))
        type'.substitute(variables)
    )
    type.mapComponents(`substitute(variables))
)

showTypeAndLocation(type) := showType(type) ++ " at " ++
    showLocation(getTag(getNode(type)))

unificationError(left, right) := (
    error("type unification error:\n" ++ showTypeAndLocation(left) ++
        "\nvs\n" ++ showTypeAndLocation(right))
)

// Robinson's Unification Algorithm
// see Comparing Unification Algorithms in First-Order Theorem Proving
// by Krystof Hoder and Andrei Voronkov
unify(variables, (left, right)) := (
    isTypeVariable(left) /\ !left.isFree(variables) ?
        variables.unify((left.substitute(variables), right))
    isTypeVariable(right) /\ !right.isFree(variables) ?
        variables.unify((left, right.substitute(variables)))
    isBottomType(left) \/ isBottomType(right) ? variables
    isSameType(left, right) ? variables
    isTypeVariable(left) ? variables.insert(left, right)
    isTypeVariable(right) ? variables.insert(right, left)
    (getTypeCode(left) = getTypeCode(right) /\
        length(getComponentTypes(left)) = length(getComponentTypes(right))) ?
        zip(getComponentTypes(left), getComponentTypes(right)).
            foldl(unify, variables)
    unificationError(left, right)
)

unifyAll(variables, types) := (
    isEmpty(types) ? variables
    zip(repeat(types[0]), --types).foldl(unify, variables)
)

generalize(type, variables, oldVariables) := (
    type' := type.substitute(variables)
    universals := type'.getFreeVariables(variables) |
        `isNewVariable(oldVariables)
    newScheme(universals, type')
)

newTypeVariables(originals, variables) := originals.map(getNode).
    foldMap(`newTypeVariable, variables)

instantiate(scheme, variables) := (
    (universals, type) := scheme
    (freshVariables, variables') := newTypeVariables(universals, variables)
    renaming := newVariableMap(zip(universals, freshVariables))
    (type.rename(renaming), variables')
)

inferProjection'(node, variables, stack) := (
    isReference(node) ?
        (newProjectionType(node, reverse(stack), stack[getDebruijnIndex(node)]),
        variables)
    isLambda(node) ? (
        (variable, variables') := variables.newTypeVariable(node)
        inferProjection'(getBody(node), variables', variable :: stack)
    )
    undefined
)

inferProjection(node, variables) :=
    inferProjection'(getRight(getBody(node)), variables, [])

infer(node, stack, variables) := (
    isInteger(node) ? (newIntegerType(node), variables)
    isBuiltin(node) ? (getBuiltinType(node), variables)
    isStringLiteral(node) ? (newListType(node, newIntegerType(node)), variables)
    isList(node) ? (
        elements := getListElements(node)
        isEmpty(elements) ?
            variables.newTypeVariable(node).mapFirst(newListType(node))
        (elementTypes, variables') := elements.foldl(
            (types, variables'') -> element -> (
                stack' := repeat(undefined).take(length(types) + 1) ++ stack
                infer(element, stack', variables'').mapFirst((:: types))
            ), ([], variables)).mapFirst(reverse)
        (newListType(node, elementTypes[0]), variables'.unifyAll(elementTypes))
    )
    isTuple(node) ? getTupleElements(node).foldMap(
        `infer(undefined :: stack), variables).mapFirst(newTupleType(node))
    isProjection(node) ? inferProjection(node, variables)
    isRecursiveFunction(node) ? (
        (functionType, variables') := variables.newTypeVariable(node)
        body := getBody(getRight(node))
        stack' := newScheme([], functionType) :: stack
        (functionType', variables'') := body.infer(stack', variables')
        (functionType, variables''.unify((functionType, functionType')))
    )
    isReference(node) ? stack[getDebruijnIndex(node)].instantiate(variables)
    isLambda(node) ? (
        (parameterType, variables') := variables.newTypeVariable(node)
        stack' := newScheme([], parameterType) :: stack
        (bodyType, variables'') := getBody(node).infer(stack', variables')
        (newFunctionType(node, parameterType, bodyType), variables'')
    )
    isDefinition(node) ? (
        (valueType, variables') := getRight(node).infer(stack, variables)
        stack' := valueType.generalize(variables', variables) :: stack
        getDefinitionScope(node).infer(stack', variables')
    )
    isApplication(node) ? (
        (rightType, variables') := getRight(node).infer(stack, variables)
        (leftType, variables'') := getLeft(node).infer(stack, variables')
        (returnType, variables''') := variables''.newTypeVariable(node)
        functionType := newFunctionType(blank, rightType, returnType)
        (returnType, variables'''.unify((leftType, functionType)))
    )
    undefined
)

inferType(stack, definition) := (
    (name, value) := definition
    (knownTypeScheme, variables) := getKnownTypeScheme(name)
    !isFreeType(second(knownTypeScheme)) ? knownTypeScheme :: stack
    (type, variables') := infer(value, stack, variables)
    type.generalize(variables', newVariableMap([])) :: stack
)

addRenaming((renaming, variables), type) := (
    isTypeVariable(type) ? (
        renaming.hasKey(type) ? (renaming, variables)
        (type', variables') := variables.newTypeVariable(getNode(type))
        (renaming.insert(type, type'), variables')
    )
    getComponentTypes(type).foldl(addRenaming, (renaming, variables))
)

makeRenaming(type) :=
    first(addRenaming((newVariableMap([]), newVariableMap([])), type))

showTypeWithRenaming(type, renaming) := showType(type.rename(renaming))

newDefinition(definition) :=
    (getDefinitionName(definition), getDefinitionValue(definition))

getDefinitions(node) := (
    !isDefinition(node) ? []
    newDefinition(node) :: getDefinitions(getDefinitionScope(node))
)

showDefinition((name, value)) := getLexeme(name) ++ " := " ++ showAST(value)
showDefinitions(definitions) := definitions.map(showDefinition).joinWith("\n")

showUniversals(universals, renaming) := (
    forallUTF8 := [226, 136, 128]
    universals.map(universal ->
        forallUTF8 ++ showTypeWithRenaming(universal, renaming) ++ " ").join
)

showScheme((universals, type)) := (
    renaming := makeRenaming(type)
    showUniversals(universals, renaming) ++ showTypeWithRenaming(type, renaming)
)

showTyping((name, scheme)) := getLexeme(name) ++ " : " ++ showScheme(scheme)
showTypings(typings) := typings.map(showTyping).joinWith("\n")

main(input) := (
    node := parse(input, "")
    definitions := getDefinitions(node)
    stack := definitions.foldl(inferType, [])
    schemes := reverse(stack)
    (names, _) := unzip(definitions)
    showTypings(zip(names, schemes))
)
