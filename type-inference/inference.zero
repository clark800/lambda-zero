#* inference.zero

def pushContext(type, term, context @ (environment, types))
    (environment.push(Closure(term, environment)), types.push(type))


def getDomain(tag, environment)
    case Annotation(domain)
        if isUnknown(domain)
            metavariable <- newPositiveMetaVariable(tag)
            lift (metavariable, metavariable)
        domain := resolveClosure(evaluateClosure(Closure(domain, environment)))
        lift (domain, domain)
    case PatternMatch(domain)
        outerDomain <- instantiateClosure(Closure(domain, environment))
        if outerDomain is Construction(tag', domain, _, innerDomain)
            if domain is Type(_, index)
                if index is -_ n
                    closure := Closure(Variable(tag', +_ n), environment)
                    closure' := Closure(innerDomain, environment.push(closure))
                    innerDomain' := resolveClosure(closure')
                    lift (outerDomain, innerDomain')
                throwError("invalid domain for construction", tag')
            throwError("invalid domain for construction", tag')
        throwError("expected construction in pattern match annotation", tag)


def infer(context @ (environment, types))
    case Unknown(tag)
        lift Unknown(tag)
    case MetaVariable(tag, index)
        # todo: check for annotated type in metacontext
        throwError("not implemented", tag)
    case Type(tag, index)
        match index
            +_ level -> lift Type(tag, +_(up level))
            -_ family -> lift Type(tag, +_ 1)
    case Variable(tag, index)
        type := types.seek(index) ?? throwError("unbound variable", tag)
        instantiateAll(type)  # todo: remove this after implementing subtyping
    case Function(tag, domain, body)
        (outerDomain, innerDomain) <- domain.getDomain(tag, environment)
        range <- body.infer(context.pushContext(innerDomain, Unknown(tag)))
        lift Implication(tag, outerDomain, range)
    case Implication(tag, domain, body)
        domain' := resolveClosure(evaluateClosure(Closure(domain, environment)))
        _ <- body.infer(context.pushContext(domain', Unknown(tag)))
        lift Type(tag, +_ 0)
    case Intersection(tag, domain, body)
        domain' := resolveClosure(evaluateClosure(Closure(domain, environment)))
        body.infer(context.pushContext(domain', Unknown(tag)))
    case Application(tag, applicand, argument)
        argumentType <- argument.infer(context)
        applicandType <- applicand.infer(context)
        returnType <- newPositiveMetaVariable(tag)
        applicandTag := getTermTag(applicand)
        functionType := Implication(applicandTag, argumentType, returnType)
        # applicandType <: functionType  =>  argumentType <: parameterType
        _ <- unify(Closure(applicandType, environment),
                  Closure(functionType, environment))
        lift returnType
    case Construction(tag, domain, parameters, objectType)
        lift Type(tag, +_ 0)
    case Numeral(tag, type, value)
        lift type
    case Operation(tag, term, _)
        term.infer(context)


def getFixType(tag)
    syntax(=>>) := syntax(++)
    tag := renameTag(tag, "a", NOFIX)
    (=>>) := Implication(veil(tag))
    a1 := Variable(tag, -_ 1)
    a2 := Variable(tag, -_ 2)
    Intersection(tag, Type(veil(tag), +_ 0), (a1 =>> a2) =>> a2)


def reduceTerm(term)
    if term is Application(tag, left, right)
        left' := reduceTerm(left)
        right' := reduceTerm(right)
        if left' is Function(tag', domain, body)
            reduceTerm(substituteArgument(right', body))
        Application(tag, left', right')
    term


def normalize(term)
    reduceTerm(term).mapComponents(normalize)


def renameUniversals(closure)
    term := closure.resolve(emptyMetacontext)
    (term', metacontext) := instantiateAll(term, emptyMetacontext)
    normalize(enclose(term').generalize(metacontext))


def inferType(types, Binding(tag, closure, ascription))
    if getTagLexeme(tag) =*= "fix"
        types.push(getFixType(tag))
    if ascription is Just(closure)
        types.push(renameUniversals(closure))
    _ @ Closure(term, environment) := closure
    context := (environment, types)
    (type, metacontext) := infer(context, term, emptyMetacontext)
    type' := Closure(type, environment).generalize(metacontext)
    types.push(normalize(type'))


def showType(type)
    if type is Intersection(tag, _, body)
        "âˆ€" ++ showTag(tag) ++ " " ++ showType(body)
    showTerm(type)


def showTyping((tag, type))
    showTag(tag) ++ " : " ++ showType(type)


def showTypings(typings)
    typings.map(showTyping).joinWith("\n") ++ "\n"


def main(input)
    bindings := reverse(parse(getBuiltin, input))
    types := bindings.cascade(inferType, newArray([]))
    tags := bindings.map(getBindingTag)
    showTypings(zip(tags, types.toList))

#*
