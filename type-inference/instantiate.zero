#* instantiate.zero


def shiftIndices'(offset, depth, term)
    if term is Variable(tag, index)
        match index
            +_ n -> term
            -_ n -> if n > depth then Variable(tag, -_(n + offset)) else term
    mapComponentsWithDepth(shiftIndices'(offset), depth, term)


def shiftIndices(offset, term)
    if offset = 0 then term else shiftIndices'(offset, 0, term)


def substituteArgument'(argument, depth, term)
    if term is Variable(tag, index)
        match index
            +_ n -> term
            -_ n -> if n > depth then Variable(tag, -_(down n)) else
                  (if n = depth then
                   shiftIndices(down depth, argument) else term)
    mapComponentsWithDepth(substituteArgument'(argument), depth, term)


def substituteArgument(argument, term)
    substituteArgument'(argument, 1, term)


def instantiate(term, intersection)
    if intersection is Intersection(_, _, body)
        substituteArgument(term, body)
    throwError("expected intersection in instantiate", getTermTag(intersection))


def instantiateAll(term)
    if isIntersection(term)
        metavariable <- newPositiveMetaVariable(getTermTag(term))
        instantiateAll(instantiate(metavariable, term))
    lift term


def instantiateClosure(closure)
    term <- instantiateAll(resolve(closure))
    lift resolve(evaluateClosure(enclose(term)))

#*
