#* instantiate.zero

def substituteArgument'(argument, depth, term)
    if term is Variable(tag, index)
        match index
            +_ n -> term
            -_ n -> if n > depth then Variable(tag, -_(up n)) else
                  (if n = depth then argument else term)
    mapComponentsWithDepth(substituteArgument'(argument), depth, term)


def substituteArgument(argument, term)
    substituteArgument'(argument, 1, term)


def instantiate(term, intersection)
    if intersection is Intersection(_, _, body)
        substituteArgument(term, body)
    throwError("expected intersection in instantiate", getTermTag(intersection))


def splitUniversals(term)
    if term is Intersection(tag, _, body)
        (universals, body') <- splitUniversals(body)
        metavariable <- newPositiveMetaVariable(tag)
        lift (universals ++ [metavariable], body')
    lift ([], term)


def instantiateAll(term)
    if isIntersection(term)
        metavariable <- newPositiveMetaVariable(getTermTag(term))
        instantiateAll(instantiate(metavariable, term))
    lift term


def instantiateClosure(closure)
    term <- instantiateAll(resolve(closure))
    lift resolve(evaluateClosure(enclose(term)))

#*
