#@ main.zero

def getFixType(tag)
    syntax(=>>) := syntax(++)
    tag := renameTag(tag, "a", NOFIX)
    (=>>) := Implication(veil(tag))
    a1 := Variable(tag, +_ 1)
    a2 := Variable(tag, +_ 2)
    Intersection(tag, Type(veil(tag), +_ 0), (a1 =>> a2) =>> a2)


def renameUniversals(closure)
    (either, metacontext) := instantiate(closure, emptyMetacontext)
    try closure' := either
    generalize(closure', metacontext).mapRight(enclose)


def unifyTypes(a, b)
    (a', metacontext) := instantiate(a, emptyMetacontext)
    try a'' := a'
    (b', metacontext') := instantiate(b, metacontext)
    try b'' := b'
    (either, _) := unify(a'', b'', metacontext')
    try metacontext'' := either
    generalize(a'', metacontext'').mapRight(enclose)


def getType(types, Binding(tag, closure, annotations, isConstruct))
    if getTagLexeme(tag) =*= "fix"
        lift return enclose(getFixType(tag))
    _ @ Closure(term, environment) := closure
    context := (environment, types)
    if annotations is firstAnnotation :: annotations'
        try type <- lift annotations'.tryCascade(unifyTypes, firstAnnotation)
        try _ <- getTerm(type).inferType(context) # typecheck the type
        if isConstruct  # skip check for constructors and deconstructors
            lift renameUniversals(type)
        try _ <- check(context, type, term)
        lift return type
    inferGeneralizedType(context, term)


def pushType(types, binding)
    try type := first(getType(types, binding, emptyMetacontext))
    return types.push(type)


def showTyping((tag, type))
    showTag(tag) ++ " : " ++ showClosure(type)


def showTypings(typings)
    typings.map(showTyping).joinWith("\n") ++ "\n"


def checkedCascade(f, z)
    case [] -> (z, Void)
    case x :: xs'
        match f(z, x)
            case Left(y) -> (z, Just(y))
            case Right(z') -> xs'.checkedCascade(f, z')


def showTypeError
    case Void -> ""
    case Just(message) -> "\n\n" ++ message ++ "\n"


def inference(input)
    try bindings := parse(getBuiltin, input)
    bindings := reverse(bindings)
    (types, maybeError) := bindings.checkedCascade(pushType, newArray([]))
    tags := bindings.map(getBindingTag)
    return showTypings(zip(tags, types.toList)) ++ showTypeError(maybeError)


def main(input)
    match inference(input)
        case Left(message) -> abort(message)
        case Right(output) -> output

#@
