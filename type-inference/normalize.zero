#* normalize.zero


def shiftIndices'(offset, depth, term)
    if term is Variable(tag, index)
        match index
            +_ n -> term
            -_ n -> if n > depth then Variable(tag, -_(n + offset)) else term
    mapComponentsWithDepth(shiftIndices'(offset), depth, term)


def shiftIndices(offset, term)
    if offset = 0 then term else shiftIndices'(offset, 0, term)


def substituteArgument'(argument, depth, term)
    if term is Variable(tag, index)
        match index
            +_ n -> term
            -_ n -> if n > depth then Variable(tag, -_(down n)) else
                  (if n = depth then
                   shiftIndices(down depth, argument) else term)
    mapComponentsWithDepth(substituteArgument'(argument), depth, term)


def substituteArgument(argument, term)
    substituteArgument'(argument, 1, term)


def reduceTerm(term)
    if term is Application(tag, left, right)
        left' := reduceTerm(left)
        right' := reduceTerm(right)
        if left' is Function(tag', domain, body)
            reduceTerm(substituteArgument(right', body))
        Application(tag, left', right')
    term


def normalize(term)
    reduceTerm(term).mapComponents(normalize)


#*
