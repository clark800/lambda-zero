#* normalize.zero


def setAbsoluteValue(n)
    +_ _ -> +_ n
    -_ _ -> -_ n


def shiftIndices'(offset, depth, term)
    if term is Variable(tag, index)
        if abs(index) > depth
            Variable(tag, index.setAbsoluteValue(abs(index) + offset))
        term
    mapComponentsWithDepth(shiftIndices'(offset), depth, term)


def shiftIndices(offset, term)
    if offset = 0 then term else shiftIndices'(offset, 0, term)


def substituteArgument'(argument, depth, term)
    if term is Variable(tag, index)
        if abs(index) > depth
            Variable(tag, index.setAbsoluteValue(down abs(index)))
        if abs(index) = depth
            shiftIndices(down depth, argument)
        term
    mapComponentsWithDepth(substituteArgument'(argument), depth, term)


def substituteArgument(argument, term)
    substituteArgument'(argument, 1, term)


def reduceTerm(term)
    if term is Application(tag, left, right)
        left' := reduceTerm(left)
        right' := reduceTerm(right)
        if left' is Function(tag', domain, body)
            reduceTerm(substituteArgument(right', body))
        Application(tag, left', right')
    term


def normalize(term)
    reduceTerm(term).mapComponents(normalize)


#*
