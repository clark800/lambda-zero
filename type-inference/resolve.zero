#* resolve.zero

def pushUnknown(tag, environment)
    environment.push(enclose(Unknown(tag)))


def recursionError(metavariable, metacontext)
    abort("Type error: recursion in " ++
        showTermAndLocation(metavariable) ++ ":\n\n" ++
        showMetacontext(metacontext))


# for any variable in term that has a value in the environment, replace
# the variable with the value from the environment recursively
def resolve'(metacontext, metaindices, closure @ Closure(term, environment))
    resolve''(t) := resolve'(metacontext, metaindices, Closure(t, environment))
    resolve'''(t) := resolve'(metacontext, metaindices,
        Closure(t, pushUnknown(getTermTag(term), environment)))

    match term
        case Unknown(tag) -> term
        case MetaVariable(tag, index)
            if index is +_ index'
                if metacontext.getMetaValue(index') is Just(closure')
                    if metaindices.contains((= index'))
                        recursionError(term, metacontext)
                    # todo: setLocation of term in closure' to tag
                    resolve'(metacontext, index' :: metaindices, closure')
                term
            term
        case Type(tag, index) -> term
        case Variable(tag, index)
            if environment.seek(index) is Just(closure')
                if isUnknown(getTerm(closure'))
                    term
                resolve'(metacontext, metaindices, closure')
            term
        case Singleton(tag, type, index)
            Singleton(tag, resolve''(type), index)
        case Function(tag, domain, body)
            Function(tag, resolve''(domain), resolve'''(body))
        case Implication(tag, domain, body)
            Implication(tag, resolve''(domain), resolve'''(body))
        case Intersection(tag, domain, body)
            Intersection(tag, resolve''(domain), resolve'''(body))
        case Application(tag, left, right)
            Application(tag, resolve''(left), resolve''(right))
        case Numeral(_, _, _) -> term
        case Operation(_, _, _) -> term


def resolve(metacontext, closure)
    resolve'(metacontext, [], closure)


def resolveClosure(closure)
    closure.resolve(emptyMetacontext)

#*
