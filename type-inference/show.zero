--* show.zero

getVariableName(index) := (
    characters := ['a', 'b', 'c', 'd']
    if index < 4
        [characters[index]]
    getVariableName((index // 4) - 1) ++ [characters[index % 4]]
)

showType(type) := (
    showType'(type') :=
        isFunctionType(type') ? "(" ++ showType(type') ++ ")" || showType(type')
    if isFreeType(type)
        "_"
    if isBottomType(type)
        "⊥"
    if isNaturalType(type)
        "ℕ"
    if isBooleanType(type)
        "𝔹"
    if isTypeVariable(type)
        getVariableName(getTypeVariableIndex(type))
    if isTupleType(type)
        components := getComponentTypes(type)
        size := length(components)
        if size = 2
            "(" ++ components.map(showType).joinWith(" × ") ++ ")"
        "Tuple_" ++ showNatural(size) ++ "(" ++
            components.map(showType).joinWith(", ") ++ ")"
    if isMaybeType(type)
        "Maybe(" ++ showType(getComponentTypes(type)[0]) ++ ")"
    if isListType(type)
        showType'(getComponentTypes(type)[0]) ++ "[]"
    if isTreeType(type)
        "Tree(" ++ showType(getComponentTypes(type)[0]) ++ ")"
    if isFunctionType(type)
        components := getComponentTypes(type)
        showType'(components[0]) ++ " → " ++ showType(components[1])
    undefined
)

showTypeAndLocation(type) := showType(type) ++ (isNull(getNode(type)) ? ""
    " at " ++ showLocation(getLocation(getNode(type))))

showVariableMap(variables) :=
    variables.getElements.map((key, value) ->
        showAST(getNode(key)) ++ " = " ++ showAST(getNode(value)) ++
        "\n" ++ showType(key) ++ " := " ++ showType(value)).joinWith("\n")

addRenaming((renaming, variables), type) := (
    if isTypeVariable(type)
        if renaming.hasKey(type)
            (renaming, variables)
        (type', variables') := variables.newTypeVariable(getNode(type))
        (renaming.insert(type, type'), variables')
    getComponentTypes(type).cascade(addRenaming, (renaming, variables))
)

makeRenaming(type) :=
    first(addRenaming((empty, empty), type))

showTypeWithRenaming(type, renaming) := showType(type.rename(renaming))

showUniversals(universals, renaming) := (
    universals.map(universal ->
        "∀" ++ showTypeWithRenaming(universal, renaming) ++ " ").join
)

showScheme((universals, type)) := (
    renaming := makeRenaming(type)
    showUniversals(universals, renaming) ++ showTypeWithRenaming(type, renaming)
)

showTyping((name, scheme)) := getLexeme(name) ++ " : " ++ showScheme(scheme)
showTypings(typings) := typings.map(showTyping).joinWith("\n")

--*
