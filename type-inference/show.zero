#* show.zero

define showTypeLocation(type)
    showLocation(getTagLocation(getTermTag(getSource(type))))


define showTypeAndLocation(type)
    showType(type) ++ (if isNoTerm(getSource(type)) then "" else
        " at " ++ showTypeLocation(type))

define showVariableMap(variables)
    variables.getElements.map((key, value) ->
        showTerm(getSource(key)) ++ " = " ++ showTerm(getSource(value)) ++
        "\n" ++ showType(key) ++ " := " ++ showType(value)).joinWith("\n")

define addRenaming((renaming, variables), type)
    if isTypeVariable(type)
        if renaming.hasKey(type)
            (renaming, variables)
        (type', variables') := variables.newTypeVariable(getSource(type))
        (renaming.insert(type, type'), variables')
    getComponentTypes(type).cascade(addRenaming, (renaming, variables))

define makeRenaming(type)
    first(addRenaming((empty, empty), type))

define showTypeWithRenaming(type, renaming)
    showType(type.rename(renaming))

define showUniversals(universals, renaming)
    universals.map(universal ->
        "âˆ€" ++ showTypeWithRenaming(universal, renaming) ++ " ").join

define showScheme((universals, type))
    renaming := makeRenaming(type)
    showUniversals(universals, renaming) ++ showTypeWithRenaming(type, renaming)

define showTyping((tag, scheme))
    getTagLexeme(tag) ++ " : " ++ showScheme(scheme)

define showTypings(typings)
    typings.map(showTyping).joinWith("\n")

#*
