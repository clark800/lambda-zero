#* show.zero

define showTypeLocation(type)
    showLocation(getTagLocation(getTermTag(type)))

define showTypeAndLocation(type)
    showTerm(type) ++ " at " ++ showTypeLocation(type)

define showMaybeType(maybeType)
    with maybeType as Just(type)
        showTerm(type)
    "Free"

define showVariables(variables)
    variables.dump.map((address, maybeValue) ->
        showMetaVariable(address) ++ " := " ++
        showMaybeType(maybeValue)).joinWith("\n")

define addRenaming((renaming, variables), type)
    with type as MetaVariable(source, address)
        if renaming.hasKey(address)
            (renaming, variables)
        (type', variables') := variables.newMetaVariable(source)
        (renaming.set(address, type'), variables')
    getComponents(type).cascade(addRenaming, (renaming, variables))

define makeRenaming(type)
    renaming := newRenaming([])
    variables := newStore([])
    first(addRenaming((renaming, variables), type))

define showTypeWithRenaming(type, renaming)
    showTerm(type.rename(renaming))

define showUniversalsWithRenaming(universals, renaming)
    universals.map(universal ->
        "âˆ€" ++ showTypeWithRenaming(universal, renaming) ++ " ").join

define showPrettyScheme(Scheme(universals, type))
    renaming := makeRenaming(type)
    showUniversalsWithRenaming(universals, renaming) ++
        showTypeWithRenaming(type, renaming)

define showTyping((tag, scheme))
    getTagLexeme(tag) ++ " : " ++ showPrettyScheme(scheme)

define showTypings(typings)
    typings.map(showTyping).joinWith("\n")

#*
