#* show.zero

define getVariableName(index)
    characters := ['a', 'b', 'c', 'd']
    if index < 4
        [characters[index]]
    getVariableName((index // 4) - 1) ++ [characters[index % 4]]

define showType(type)
    define showType'(type')
        if isFunctionType(type') then
            "(" ++ showType(type') ++ ")" else showType(type')
    if isFreeType(type)
        "_"
    if isBottomType(type)
        "⊥"
    if isNaturalType(type)
        "ℕ"
    if isBooleanType(type)
        "𝔹"
    if isTypeVariable(type)
        getVariableName(getTypeVariableIndex(type))
    if isTupleType(type)
        components := getComponentTypes(type)
        size := length(components)
        if size = 2
            "(" ++ components.map(showType).joinWith(" × ") ++ ")"
        "Tuple_" ++ showNatural(size) ++ "(" ++
            components.map(showType).joinWith(", ") ++ ")"
    if isMaybeType(type)
        "Maybe(" ++ showType(getComponentTypes(type)[0]) ++ ")"
    if isListType(type)
        showType'(getComponentTypes(type)[0]) ++ "[]"
    if isTreeType(type)
        "Tree(" ++ showType(getComponentTypes(type)[0]) ++ ")"
    if isFunctionType(type)
        components := getComponentTypes(type)
        showType'(components[0]) ++ " → " ++ showType(components[1])
    undefined


define showTypeLocation(type)
    showLocation(getTagLocation(getTermTag(getSource(type))))


define showTypeAndLocation(type)
    showType(type) ++ (if isNoTerm(getSource(type)) then "" else
        " at " ++ showTypeLocation(type))

define showVariableMap(variables)
    variables.getElements.map((key, value) ->
        showAST(getSource(key)) ++ " = " ++ showAST(getSource(value)) ++
        "\n" ++ showType(key) ++ " := " ++ showType(value)).joinWith("\n")

define addRenaming((renaming, variables), type)
    if isTypeVariable(type)
        if renaming.hasKey(type)
            (renaming, variables)
        (type', variables') := variables.newTypeVariable(getSource(type))
        (renaming.insert(type, type'), variables')
    getComponentTypes(type).cascade(addRenaming, (renaming, variables))

define makeRenaming(type)
    first(addRenaming((empty, empty), type))

define showTypeWithRenaming(type, renaming)
    showType(type.rename(renaming))

define showUniversals(universals, renaming)
    universals.map(universal ->
        "∀" ++ showTypeWithRenaming(universal, renaming) ++ " ").join

define showScheme((universals, type))
    renaming := makeRenaming(type)
    showUniversals(universals, renaming) ++ showTypeWithRenaming(type, renaming)

define showTyping((tag, scheme))
    getTagLexeme(tag) ++ " : " ++ showScheme(scheme)

define showTypings(typings)
    typings.map(showTyping).joinWith("\n")

#*
