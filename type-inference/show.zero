#* show.zero

SchemeT(term) ::= {Scheme(universals : List(term), type : term)}

getUniversals(Scheme(universals, _)) := universals
getType(Scheme(_, type)) := type


define showScheme(Scheme(universals, term))
    universals.map(universal -> "∀" ++ showTerm(universal) ++ " ").join ++
        showTerm(term)


define addRenaming((renaming, metacontext), type)
    with type as MetaVariable(source, address)
        if renaming.hasKey(address)
            (renaming, metacontext)
        (type', metacontext') := metacontext.newMetaVariable(source)
        (renaming.insert(address, type'), metacontext')
    getComponents(type).cascade(addRenaming, (renaming, metacontext))


define makeRenaming(type)
    renaming := newMapping([])
    metacontext := newArray([])
    first(addRenaming((renaming, metacontext), type))


define showTypeWithRenaming(type, renaming)
    showTerm(type.applyMapping(renaming))


define showUniversalsWithRenaming(universals, renaming)
    universals.map(universal ->
        "∀" ++ showTypeWithRenaming(universal, renaming) ++ " ").join


define showPrettyScheme(Scheme(universals, type))
    renaming := makeRenaming(type)
    showUniversalsWithRenaming(universals, renaming) ++
        showTypeWithRenaming(type, renaming)


define showTyping((tag, scheme))
    showTag(tag) ++ " : " ++ showPrettyScheme(scheme)


define showTypings(typings)
    typings.map(showTyping).joinWith("\n") ++ "\n"

#*
