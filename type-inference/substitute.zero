#* substitute.zero

def getFreeVariables(metacontext, term)
    if term is MetaVariable(_, address)
        if metacontext.get(address) ?? Void is Just(term)
            getFreeVariables(metacontext, term)
        [term]
    join(getComponents(term).map(getFreeVariables(metacontext))).
        deduplicateBy(isSameHead)


def showMaybeTerm(maybeTerm)
    if maybeTerm is Just(term)
        showTerm(term)
    "Free"


def showMetacontext(metacontext)
    zip(0 ..., metacontext.toList).map((address, maybeTerm) ->
        showMetaVariable(address) ++ " := " ++
        showMaybeTerm(maybeTerm)).joinWith("\n")


def recursionError(term, term', metacontext)
    abort("Type error: recursion at " ++
        showTermLocation(term) ++ " and " ++ showTermLocation(term') ++
        ":\n" ++ showTerm(term) ++ " = " ++ showTerm(term') ++ "\n\n" ++
        showMetacontext(metacontext))


def substitute(metacontext, term)
    if term is MetaVariable(tag, address)
        if metacontext.get(address) ?? Void is Just(term')
            term' := term'.setLocation(tag)
            if term'.getFreeVariables(newArray([])).any(isSameHead(term))
                recursionError(term, term', metacontext)
            term'.substitute(metacontext)
        term
    term.mapComponents(substitute(metacontext))

#*
