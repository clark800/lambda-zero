#* substitute.zero

MetacontextT ::= {
    Metacontext(positives : ArrayT((Term)?), negatives : ArrayT((Term)?))
}

emptyMetacontext := Metacontext(newArray([]), newArray([]))


def newPositiveMetaVariable(tag, Metacontext(positives, negatives))
    (index, positives') := positives.append(Void)
    (MetaVariable(tag, +_ index), Metacontext(positives', negatives))


def newNegativeMetaVariable(tag, Metacontext(positives, negatives))
    (index, negatives') := negatives.append(Void)
    (MetaVariable(tag, -_ index), Metacontext(positives, negatives'))


def setMetaVariable(index, value, Metacontext(positives, negatives))
    Metacontext(positives.set(index, value), negatives)


def getFreeVariables(metacontext @ Metacontext(positives, negatives), term)
    if term is MetaVariable(_, index)
        if index is +_ index'
            if positives.get(index') ?? Void is Just(term)
                getFreeVariables(metacontext, term)
            [term]
        []
    join(getComponents(term).map(getFreeVariables(metacontext))).
        deduplicateBy(isSameHead)


def showMaybeTerm(maybeTerm)
    if maybeTerm is Just(term)
        showTerm(term)
    "Free"


def showMetacontext(Metacontext(positives, negatives))
    zip((0 ...).map((+_)), positives.toList).map((index, maybeTerm) ->
        showMetaVariable(index) ++ " := " ++
        showMaybeTerm(maybeTerm)).joinWith("\n")


def recursionError(term, term', metacontext)
    abort("Type error: recursion at " ++
        showTermLocation(term) ++ " and " ++ showTermLocation(term') ++
        ":\n" ++ showTerm(term) ++ " = " ++ showTerm(term') ++ "\n\n" ++
        showMetacontext(metacontext))


def substitute(metacontext @ Metacontext(positives, negatives), term)
    if term is MetaVariable(tag, index)
        if index is +_ index'
            if positives.get(index') ?? Void is Just(term')
                term' := term'.setLocation(tag)
                freeVariables := term'.getFreeVariables(emptyMetacontext)
                if freeVariables.any(isSameHead(term))
                    recursionError(term, term', metacontext)
                term'.substitute(metacontext)
            term
        term
    term.mapComponents(substitute(metacontext))

#*
