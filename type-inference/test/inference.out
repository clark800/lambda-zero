undefined : ⊥
id : ∀a a → a
constant : ∀a ∀b a → b → a
f' : ∀a ∀b a → (a → b) → b
f'' : ∀a ∀b (a → b) → a → b
g : ℕ → ℕ
h : ℕ → ℕ → 𝔹
false : 𝔹
true : 𝔹
Boolean : ⊥
v : ∀a a → 𝔹
if : ∀a 𝔹 → a → a → a
c : ℕ → ℕ
, : ∀a ∀b a → b → (a × b)
first : ∀a ∀b (a × b) → a
second : ∀a ∀b (a × b) → b
Pair : ⊥
q : ∀a ∀b a → b → (a × b)
q' : ∀a ∀b a → b → a
[] : ∀a a[]
:: : ∀a a → a[] → a[]
head : ∀a a[] → a
tail : ∀a a[] → a[]
List : ⊥
list : ℕ[]
list' : ∀a ((a → a) → a → a)[]
nothing : ∀a Maybe(a)
just : ∀a a → Maybe(a)
Maybe : ⊥
maybe : ∀a ∀b Maybe(a) → (a → b) → b → b
maybeTest : ℕ
string : ℕ[]
e : ℕ
isNothing : ∀a Maybe(a) → 𝔹