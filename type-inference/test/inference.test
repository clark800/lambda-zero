id(x) := x

constant(x) := _ -> x

true(t, f) := t
false(t, f) := f
first((x, y)) := x
second((x, y)) := y

f(x, y) := y(x)

f'(x, y) := x(y)

g(x) := x * x

h(x, y) := x > y

v(x) := true

if(c, a, b) := c(a, b)

c(a) := if(a = 0, 1, a)

p := (1, true, c(1))

q(x, y) := (x, y)

q'(x, y) := first((x, y))

list := [1 + 2, c(3), first(q(1, true)), f(2, c)]

list' := [x -> x, y -> y, x -> y -> y]

swap((x, y)) := (y, x)

rot((w, x, y, z)) := (x, y, z, w)

nothing := z -> f -> z

just(x) := z -> f -> f(x)

maybe(mx, f, x) := mx(x, f)

maybeTest := maybe(just(2), (* 2), 0)

string := "test"

e := if(true, 1, error("..."))

x :: xs := (x, xs)

repeat(x) := x :: repeat(x)

isNothing(mx) := maybe(mx, constant(false), true)

r(x) := (
    (y, z) := r(x + 1)
    (x, y)
)
