id(x) := x

constant(x) := _ -> x

f'(x, y) := y(x)

f''(x, y) := x(y)

fix := x -> x  # dummy definition

𝔹 ::= {False, True}

ℕ ::= {0, up(down : ℕ)}

syntax(*) := infixL(18)

g(x) := x * x

syntax(>) := infix(13)

h(x, y) := x > y

v(x) := True

if(c, a, b) := c |> False -> a; True -> b

syntax(=) := infix(13)

c(a) := if(a = 0, 1, a)

Pair(a, b) ::= {(first : a, second : b)}

p := (True, c(1))

q(x, y) := (x, y)

q'(x, y) := first((x, y))

syntax(+) := infixL(16)

syntax(::) := infixR(15)

List(a) ::= {[], (head : a) :: (tail : List(a))}

list := [1 + 2, c(3), first(q(1, True)), f'(2, c)]

list' := [x -> x, y -> y, x -> y -> y]

swap((x, y)) := (y, x)

string := "test"

e := if(True, 1, abort("..."))

repeat(x) := x :: repeat(x)

syntax(--) := infixL(21)

r(n, m) := r(n -- 1, r(n, n))

f(x) := x |> 0 -> 1; up(n) -> 2

pp(x) := ((a, b) -> a + b)((x, x))

pp'(x) := (
    (a, b) := (x, x)
    a + b
)

abort' := abort "0"

factorial(n) := n |> 0 -> 1; up(n') -> n * n'

#head'(xs) := (x :: xs' -> x)(xs)

r(x) := (
    (y, z) := r(x + 1)
    (x, y)
)

0
