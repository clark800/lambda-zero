#* types.zero

define getSource
    case FreeType -> undefined
    case BottomType(source) -> source
    case TypeVariable(source, _) -> source
    case FunctionType(source, _, _) -> source
    case ADT(source, _, _, _, _) -> source


define setSource(type, source)
    match type
        case FreeType -> FreeType
        case BottomType(_) -> BottomType(source)
        case TypeVariable(_, index) -> TypeVariable(source, index)
        case FunctionType(_, parameter, body) ->
            FunctionType(source, parameter, body)
        case ADT(_, name, parameters, count, index) ->
            ADT(source, name, parameters, count, index)


define indexType
    case FreeType -> 0
    case BottomType(_) -> 1
    case TypeVariable(_, _) -> 2
    case FunctionType(_, _, _) -> 3
    case ADT(_, _, _, _, _) -> 4


isFreeType(type) := indexType(type) = 0
isBottomType(type) := indexType(type) = 1
isTypeVariable(type) := indexType(type) = 2
isFunctionType(type) := indexType(type) = 3
isADT(type) := indexType(type) = 4


define getVariableName(index)
    characters := ['a', 'b', 'c', 'd']
    if index < 4
        [characters[index]]
    getVariableName((index // 4) - 1) ++ [characters[index % 4]]


define getSuffix(count, index)
    if count <= 1 or index = 0 then ""
    subscripts := ["₀", "₁", "₂", "₃", "₄", "₅", "₆", "₇", "₈", "₉"]
    showNatural(index).map(x -> x - '0').map(x -> subscripts[x]).join


define showType
    case FreeType -> "_"
    case BottomType(_) ->"⊥"
    case TypeVariable(_, index) -> getVariableName(index)
    case FunctionType(_, parameter, body)
        if isFunctionType(parameter)
            "(" ++ showType(parameter) ++ ")" ++ " → " ++ showType(body)
        showType(parameter) ++ " → " ++ showType(body)
    case ADT(_, name, parameters, count, index)
        suffix := getSuffix(count, index)
        if isNil(parameters) then name ++ suffix else name ++ "(" ++
            parameters.map(showType).joinWith(", ") ++ ")" ++ suffix


define getComponentTypes
    case FreeType -> []
    case BottomType(_) -> []
    case TypeVariable(_, _) -> []
    case FunctionType(_, parameter, body) -> [parameter, body]
    case ADT(_, _, parameters, _, _) -> parameters


syntax(=~=) := syntax(=)

define a =~= b
    match a
        case FreeType -> undefined
        case BottomType(_) -> isBottomType(b)
        case TypeVariable(_, _) -> isTypeVariable(b) and
            getTypeVariableIndex(a) = getTypeVariableIndex(b)
        case FunctionType(_, _, _) -> isFunctionType(b) and
            getParameterType(a) =~= getParameterType(b) and
            getBodyType(a) =~= getBodyType(b)
        case ADT(_, _, _, _, _) -> isADT(b) and getName(a) =*= getName(b) and
            all(zipWith(getComponentTypes(a), (=~=), getComponentTypes(b)), id)


define newTypeVariable(variables, source)
    type := TypeVariable(source, cardinality(variables))
    (type, variables.insert(type, FreeType))

newTypeVariables(originals, variables) :=
    originals.map(getSource).cascadeMap(`newTypeVariable, variables)

isFree(type, variables) := not variables.hasKey(type) or
    isFreeType(variables.get(type))

define mapComponents(type, f)
    match type
        case FreeType -> type
        case BottomType(_) -> type
        case TypeVariable(_, _) -> type
        case FunctionType(source, parameter, body) ->
            FunctionType(source, f(parameter), f(body))
        case ADT(source, name, parameters, count, index) ->
            ADT(source, name, parameters.map(f), count, index)

newVariableMap(mappings) := newTable((<=).on(getTypeVariableIndex), mappings)
empty := newVariableMap([])

define rename(type, variables)
    if isTypeVariable(type)
        variables.lookup(type) ?? type
    type.mapComponents(`rename(variables))

#*
