#* types.zero

define maybeAddress(type)
    with type as TypeVariable(_, address)
        Just(address)
    Void

define maybeCount(type)
    with type as ADT(_, _, count, _)
        Just(count)
    Void

define maybeIndex(type)
    with type as ADT(_, _, _, index)
        Just(index)
    Void

define setLocation(Tag(_, _, location))
    FreeType -> FreeType
    TypeVariable(tag, index) ->
        TypeVariable(tag.setTagLocation(location), index)
    FunctionType(tag, parameter, body) ->
        FunctionType(tag.setTagLocation(location), parameter, body)
    ADT(tag, parameters, count, index) ->
        ADT(tag.setTagLocation(location), parameters, count, index)


isFreeType := FreeType -> True; _ -> False
isTypeVariable := TypeVariable(_, _) -> True; _ -> False
isFunctionType := FunctionType(_, _, _) -> True; _ -> False
isADT := ADT(_, _, _, _) -> True; _ -> False


define getVariableName(index)
    characters := ['a', 'b', 'c', 'd']
    if index < 4
        [characters.safeAt(index) ?? '#']
    getVariableName((index // 4) -- 1) ++ [characters.safeAt(index % 4) ?? '#']


define getSuffix(count, index)
    if count <= 1 or index = 0 then ""
    subscripts := ["₀", "₁", "₂", "₃", "₄", "₅", "₆", "₇", "₈", "₉"]
    showNatural(index).map(x -> subscripts.safeAt(x -- '0') ?? "").join


define showADT(Tag(name, fixity, _), arguments)
    with arguments as argument :: arguments'
        if fixity = INFIX and length(arguments) = 2
            "(" ++ (argument :: name :: arguments').joinWith(" ") ++ ")"
        if fixity = PREFIX and length(arguments) = 1
            name ++ "(" ++ argument ++ ")"
        if fixity = POSTFIX and length(arguments) = 1
            "(" ++ argument ++ ")" ++ name
        name ++ "(" ++ arguments.joinWith(", ") ++ ")"
    name


define showType
    case FreeType; "_"
    case TypeVariable(_, address); getVariableName(address)
    case FunctionType(_, parameter, body)
        if isFunctionType(parameter)
            "(" ++ showType(parameter) ++ ")" ++ " ⇒ " ++ showType(body)
        showType(parameter) ++ " ⇒ " ++ showType(body)
    case ADT(tag, parameters, count, index)
        showADT(tag, parameters.map(showType))


define getComponentTypes
    FreeType -> []
    TypeVariable(_, _) -> []
    FunctionType(_, parameter, body) -> [parameter, body]
    ADT(_, parameters, _, _) -> parameters


define sameRoot(a, b)
    match a
        case FreeType
            False
        case TypeVariable(_, address)
            with b as TypeVariable(_, address')
                address = address'
            False
        case FunctionType(_, _, _)
            isFunctionType(b)
        case ADT(tag, parameters, _, _)
            with b as ADT(tag', parameters', _, _)
                getTagLexeme(tag) =*= getTagLexeme(tag') and
                    length(parameters) = length(parameters')
            False


define newTypeVariable(tag, variables)
    (address, variables') := variables.allocate(FreeType)
    (TypeVariable(tag, address), variables')

newTypeVariables(originals, variables) :=
    originals.map(getTypeTag).cascadeMap(newTypeVariable, variables)

define mapInternalTypes(f, type)
    match type
        FreeType -> type
        TypeVariable(_, _) -> type
        FunctionType(tag, parameter, body) ->
            FunctionType(tag, f(parameter), f(body))
        ADT(tag, parameters, count, index) ->
            ADT(tag, parameters.map(f), count, index)

newRenaming(mappings) := newTable((<=), mappings)

define rename(renaming, type)
    with type as TypeVariable(_, address)
        renaming.lookup(address) ?? type
    type.mapInternalTypes(rename(renaming))

#*
