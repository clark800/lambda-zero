#* unify.zero

def unificationError(originals, left, right)
    abort("Type error: Can't unify\n" ++
        showTerm(left) ++ "\nwith\n" ++ showTerm(right) ++
        "\nwhile trying to unify\n" ++
        showTermAndLocation(first(originals)) ++
        "\nwith\n" ++
        showTermAndLocation(second(originals)))


def unifyFailure(originals, metacontext, (left, right))
    unificationError(originals.mapPair(normalize <> resolve(metacontext)),
        normalize(left.resolve(metacontext)),
        normalize(right.resolve(metacontext)))


def isSameMetavariable
    case Metavariable(_, index)
        case Metavariable(_, index') -> index =:= index'
        case _ -> False
    case _ -> _ -> False


def tryEvaluate(metacontext, closure)
    closure' := evaluate(metacontext, [], [], closure)
    term := getTerm(closure')
    if isDeterminedMetavariable(term, metacontext)
        recursionError(term, metacontext)
    if isUnknown(term) then closure else closure'


def unify'(fail, metacontext, (left, right))
    fail' := fail(metacontext, (left, right))
    left := left.tryEvaluate(metacontext)
    right := right.tryEvaluate(metacontext)
    _ @ Closure(leftTerm, leftEnv) := left
    _ @ Closure(rightTerm, rightEnv) := right

    if isSameMetavariable(leftTerm, rightTerm)
        metacontext

    if isNegativeMetavariable(leftTerm) or isNegativeMetavariable(rightTerm)
        fail'

    if rightTerm is Metavariable(_, index)
        metacontext.setMetaValue(abs(index), left)

    def unifyBinder(tag, leftDomain, rightDomain, leftBody, rightBody)
        metacontext' := unify'(fail, metacontext,
            (Closure(rightDomain, rightEnv),
             Closure(leftDomain, leftEnv)))
        (m, metacontext'') := metacontext'.newNegativeMetavariable(tag)
        unify'(fail, metacontext'',
            (Closure(leftBody, leftEnv.push(enclose(m))),
             Closure(rightBody, rightEnv.push(enclose(m)))))

    match leftTerm
        case Metavariable(tag, index)
            metacontext.setMetaValue(abs(index), right)
        case Type(tag, index)
            if rightTerm is Type(_, index')
                if index =:= index' then metacontext else fail'
            fail'
        case Variable(tag, index)
            fail'  # evaluate should never return a Variable
        case Singleton(tag, type, element)
            if rightTerm is Singleton(tag', type', element')
                metacontext' := unify'(fail, metacontext,
                    (Closure(type, leftEnv), Closure(type', rightEnv)))
                if isUnknown(element) and isUnknown(element')
                    metacontext'  # only constructions can have unknown element
                unify'(fail, metacontext',
                    (Closure(element, leftEnv), Closure(element', rightEnv)))
            fail'
        case Function(tag, domain, body)
            if rightTerm is Function(tag', domain', body')
                unifyBinder(tag, domain, domain', body, body')
            fail'
        case Implication(tag, domain, body)
            if rightTerm is Implication(tag', domain', body')
                unifyBinder(tag, domain, domain', body, body')
            fail'
        case Intersection(tag, domain, body)
            if rightTerm is Intersection(tag', domain', body')
                if isConstruction(leftTerm) and isConstruction(rightTerm)
                    unify'(fail, metacontext,
                        (Closure(domain, leftEnv), Closure(domain', rightEnv)))
                unifyBinder(tag, domain, domain', body, body')
            fail'
        case Application(tag, left', right')
            if rightTerm is Application(tag', left'', right'')
                metacontext' := unify'(fail, metacontext,
                    (Closure(left', leftEnv), Closure(left'', rightEnv)))
                unify'(fail, metacontext',
                    (Closure(right', leftEnv), Closure(right'', rightEnv)))
            fail'
        case Numeral(tag, type, value)
            if rightTerm is Numeral(_, _, value')
                if value = value' then metacontext else fail'
            fail'
        case Operation(tag, term, optimization)
            fail'    # evaluate should never return an Operation


def unify(left, right, metacontext)
    originals := (left, right)
    metacontext' := unify'(unifyFailure(originals), metacontext, originals)
    _ @ Metacontext(positives, negatives) := metacontext'
    if getSize(positives) < 0  # todo: remove this and use either type
        abort("force unification errors")
    ((), metacontext')

#*
