#@ unify.zero

def unificationError(originals, left, right)
    error("Type error: Can't unify\n" ++
        showTermAndLocation(left) ++ "\nwith\n" ++ showTermAndLocation(right) ++
        "\nwhile trying to unify\n" ++
        showTermAndLocation(first(originals)) ++
        "\nwith\n" ++
        showTermAndLocation(second(originals)))


def unifyFailure(originals, metacontext, (left, right))
    unificationError(originals.mapPair(normalize <> resolveLocals(metacontext)),
        normalize(left.resolveLocals(metacontext)),
        normalize(right.resolveLocals(metacontext)))


def isSameMetavariable
    case Metavariable(_, index)
        case Metavariable(_, index') -> index =:= index'
        case _ -> False
    case _ -> _ -> False


def unify'(fail, metacontext, (left, right))
    fail' := fail(metacontext, (left, right))
    left := left.metaevaluate(metacontext)
    right := right.metaevaluate(metacontext)

    # if metaevaluate returns a positive metavariable, it must be free.
    # free means value-unconstrained, but it may have a domain constraint.
    # if the metavariable is constrained to be an expression that evaluates to
    # the metavariable itself, that is equivalent to no constraint beyond
    # the domain constraint which is maintained separately from the value
    # constraint, so we consider such a metavariable to be free and its value
    # may be overwritten.

    _ @ Closure(leftTerm, leftEnv) := left
    _ @ Closure(rightTerm, rightEnv) := right

    unify''(metacontext', left', right') := unify'(fail, metacontext',
        (Closure(left', leftEnv), Closure(right', rightEnv)))
    unify'''(metacontext', (left', right')) :=
        unify''(metacontext', left', right')

    if isSameMetavariable(leftTerm, rightTerm)
        return metacontext

    # we don't check for recursion when setting metavariable values because
    # it is not a problem from a unification standpoint and unify should be
    # as general as possible.

    if leftTerm is Metavariable(tag, index)
        if index is +_ index'
            return metacontext.setMetaValue(index', right)
        if rightTerm is Metavariable(_, index')
            if index' is +_ index''
                return metacontext.setMetaValue(index'', left)
            fail'
        fail'

    if rightTerm is Metavariable(tag, index)
        if index is +_ index'
            return metacontext.setMetaValue(index', left)
        fail'

    def unifyBodies(tag, metacontext', leftBody, rightBody)
        (m, metacontext'') := metacontext'.newNegativeMetavariable(tag)
        unify'(fail, metacontext'',
            (Closure(leftBody, leftEnv.push(enclose(m))),
             Closure(rightBody, rightEnv.push(enclose(m)))))

    def unifyBinder(tag, leftDomain, rightDomain, leftBody, rightBody)
        try metacontext' := unify'(fail, metacontext,
            (Closure(rightDomain, rightEnv),
             Closure(leftDomain, leftEnv)))
        unifyBodies(tag, metacontext', leftBody, rightBody)

    match leftTerm
        case Metavariable(tag, index)
            fail'  # already handled above
        case Type(tag, index)
            if rightTerm is Type(_, index')
                if index =:= index' then return metacontext else fail'
            fail'
        case Variable(tag, index)
            fail'  # evaluate should never return a Variable
        case Inference(tag, maybeDomain)
            if rightTerm is Inference(tag', maybeDomain')
                if maybeDomain is Just(domain)
                    if maybeDomain' is Just(domain')
                        unify''(metacontext, domain, domain')
                    fail'
                if maybeDomain' is Just(domain')
                    fail'
                return metacontext
            fail'
        case Singleton(tag, type, index)
            if rightTerm is Singleton(tag', type', index')
                if index = index' then return metacontext else fail'
            fail'
        case Abstraction(tag, domain, body)
            if rightTerm is Abstraction(tag', domain', body')
                if isUnknown(domain) and isUnknown(domain')
                    unifyBodies(tag, metacontext, body, body')
                unifyBinder(tag, domain, domain', body, body')
            fail'
        case Implication(tag, domain, body)
            if rightTerm is Implication(tag', domain', body')
                unifyBinder(tag, domain, domain', body, body')
            fail'
        case Intersection(tag, domain, body)
            if rightTerm is Intersection(tag', domain', body')
                unifyBinder(tag, domain, domain', body, body')
            fail'
        case Application(tag, left', right')
            if rightTerm is Application(tag', left'', right'')
                try metacontext' := unify''(metacontext, left', left'')
                unify''(metacontext', right', right'')
            fail'
        case Equation(tag, left', right')
            if rightTerm is Equation(tag', left'', right'')
                try metacontext' := unify''(metacontext, left', left'')
                unify''(metacontext', right', right'')
            fail'
        case Construction(tag, index, arguments, term)
            if rightTerm is Construction(tag', index', arguments', term')
                if index = index'
                    zip(arguments, arguments').tryCascade(unify''', metacontext)
                fail'
            fail'
        case Numeral(tag, type, value)
            if rightTerm is Numeral(_, _, value')
                if value = value' then return metacontext else fail'
            fail'
        case Operation(tag, term, optimization)
            fail'    # evaluate should never return an Operation


def unify(left, right, metacontext)
    originals := (left, right)
    match unify'(unifyFailure(originals), metacontext, originals)
        case Left(message) -> (Left(message), metacontext)
        case Right(metacontext') -> (Right(metacontext'), metacontext')

#@
