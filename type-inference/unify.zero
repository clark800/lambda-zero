#* unify.zero

def unificationError(originals, left, right)
    abort("Type error: Can't unify\n" ++
        showTermAndLocation(left) ++ "\nwith\n" ++ showTermAndLocation(right) ++
        "\nwhile trying to unify\n" ++
        showTermAndLocation(first(originals)) ++
        "\nwith\n" ++
        showTermAndLocation(second(originals)))


def unifyFailure(originals, metacontext, (left, right))
    unificationError(originals.mapPair(normalize <> resolve(metacontext)),
        normalize(left.resolve(metacontext)),
        normalize(right.resolve(metacontext)))


def isSameMetavariable
    case Metavariable(_, index)
        case Metavariable(_, index') -> index =:= index'
        case _ -> False
    case _ -> _ -> False


def tryEvaluate(metacontext, closure)
    closure' := evaluate(metacontext, [], [], closure)
    term := getTerm(closure')
    if isDeterminedMetavariable(term, metacontext)
        recursionError(term, metacontext)
    if isUnknown(term) then closure else closure'


def unify'(fail, metacontext, (left, right))
    fail' := fail(metacontext, (left, right))
    left := left.tryEvaluate(metacontext)
    right := right.tryEvaluate(metacontext)
    _ @ Closure(leftTerm, leftEnv) := left
    _ @ Closure(rightTerm, rightEnv) := right

    unify''(metacontext', left', right') := unify'(fail, metacontext',
        (Closure(left', leftEnv), Closure(right', rightEnv)))
    unify'''(metacontext', (left', right')) :=
        unify''(metacontext', left', right')

    if isSameMetavariable(leftTerm, rightTerm)
        metacontext

    if leftTerm is Metavariable(_, index)
        if index is +_ index'
            metacontext.setMetaValue(index', right)
        if rightTerm is Metavariable(_, index')
            if index' is +_ index''
                metacontext.setMetaValue(index'', left)
            fail'
        fail'

    if rightTerm is Metavariable(_, index)
        if index is +_ index'
            metacontext.setMetaValue(index', left)
        fail'

    def unifyBodies(tag, metacontext', leftBody, rightBody)
        (m, metacontext'') := metacontext'.newNegativeMetavariable(tag)
        unify'(fail, metacontext'',
            (Closure(leftBody, leftEnv.push(enclose(m))),
             Closure(rightBody, rightEnv.push(enclose(m)))))

    def unifyBinder(tag, leftDomain, rightDomain, leftBody, rightBody)
        metacontext' := unify'(fail, metacontext,
            (Closure(rightDomain, rightEnv),
             Closure(leftDomain, leftEnv)))
        unifyBodies(tag, metacontext', leftBody, rightBody)

    match leftTerm
        case Metavariable(tag, index)
            fail'  # already handled above
        case Type(tag, index)
            if rightTerm is Type(_, index')
                if index =:= index' then metacontext else fail'
            fail'
        case Variable(tag, index)
            fail'  # evaluate should never return a Variable
        case Singleton(tag, type, index)
            if rightTerm is Singleton(tag', type', index')
                if index = index' then metacontext else fail'
            fail'
        case Function(tag, domain, body)
            if rightTerm is Function(tag', domain', body')
                if isUnknown(domain) and isUnknown(domain')
                    unifyBodies(tag, metacontext, body, body')
                unifyBinder(tag, domain, domain', body, body')
            fail'
        case Implication(tag, domain, body)
            if rightTerm is Implication(tag', domain', body')
                unifyBinder(tag, domain, domain', body, body')
            fail'
        case Intersection(tag, domain, body)
            if rightTerm is Intersection(tag', domain', body')
                unifyBinder(tag, domain, domain', body, body')
            fail'
        case Application(tag, left', right')
            if rightTerm is Application(tag', left'', right'')
                metacontext' := unify''(metacontext, left', left'')
                unify''(metacontext', right', right'')
            fail'
        case Equation(tag, left', right')
            if rightTerm is Equation(tag', left'', right'')
                metacontext' := unify''(metacontext, left', left'')
                unify''(metacontext', right', right'')
            fail'
        case Construction(tag, index, arguments, term)
            if rightTerm is Construction(tag', index', arguments', term')
                if index = index'
                    zip(arguments, arguments').cascade(unify''', metacontext)
                fail'
            fail'
        case Numeral(tag, type, value)
            if rightTerm is Numeral(_, _, value')
                if value = value' then metacontext else fail'
            fail'
        case Operation(tag, term, optimization)
            fail'    # evaluate should never return an Operation


def unify(left, right, metacontext)
    originals := (left, right)
    metacontext' := unify'(unifyFailure(originals), metacontext, originals)
    _ @ Metacontext(positives, negatives) := metacontext'
    if getSize(positives) < 0  # todo: remove this and use either type
        abort("force unification errors")
    ((), metacontext')

#*
