#* unify.zero

def newPositiveMetaVariable(tag, Metacontext(positives, negatives))
    (index, positives') := positives.append(Void)
    (MetaVariable(tag, +_ index), Metacontext(positives', negatives))


def newNegativeMetaVariable(tag, Metacontext(positives, negatives))
    (index, negatives') := negatives.append(Void)
    (MetaVariable(tag, -_ index), Metacontext(positives, negatives'))


def unificationError(originals, left, right)
    abort("Type error: Can't unify\n" ++
        showTerm(left) ++ "\nwith\n" ++ showTerm(right) ++
        "\nwhile trying to unify\n" ++
        showTermAndLocation(first(originals)) ++
        "\nwith\n" ++
        showTermAndLocation(second(originals)))


def unifyFailure(originals, metacontext, (left, right))
    unificationError(originals.mapPair(substitute(metacontext)),
        left.substitute(metacontext), right.substitute(metacontext))


def getValue(index, Metacontext(positives, negatives))
    positives.get(index) ?? Void


def substituteAndEvaluate(metacontext, term)
    resolve(evaluateClosure(enclose(substitute(metacontext, term))))


def substituteArgument(argument, term)
    resolve(Closure(term, newArray([enclose(argument)])))


# Robinson's Unification Algorithm
# see Comparing Unification Algorithms in First-Order Theorem Proving
# by Krystof Hoder and Andrei Voronkov
# unify' enforces that left <: right
def unify'(fail, metacontext, (left, right))
    fail' := fail(metacontext, (left, right))
    left := substituteAndEvaluate(metacontext, left)
    right := substituteAndEvaluate(metacontext, right)

    if right is Unknown(_)
        fail'
    if right is MetaVariable(_, index)
        if isSameHead(left, right)
            metacontext
        if index is +_ index'
            if metacontext.getValue(index') is Just(right')
                unify'(fail, metacontext, (left, right'))
            metacontext.setMetaVariable(index', Just(left))
        fail'

    match left
        case MetaVariable(_, index)
            if isSameHead(left, right)
                metacontext
            if index is +_ index'
                if metacontext.getValue(index') is Just(left')
                    unify'(fail, metacontext, (left', right))
                metacontext.setMetaVariable(index', Just(right))
            fail'
        case Universe(_, _)
            if isSameHead(left, right) then metacontext else fail'
        case Implication(tag, domain, body)
            if right is Implication(tag', domain', body')
                metacontext' := unify'(fail, metacontext, (domain', domain))
                (m, metacontext'') := newNegativeMetaVariable(tag, metacontext')
                unify'(fail, metacontext'',
                    (body.substituteArgument(m), body'.substituteArgument(m)))
            fail'
        case Intersection(tag, domain, body)
            if right is Intersection(tag', domain', body')
                metacontext' := unify'(fail, metacontext, (domain', domain))
                (m, metacontext'') := newNegativeMetaVariable(tag, metacontext')
                unify'(fail, metacontext'',
                    (body.substituteArgument(m), body'.substituteArgument(m)))
            (m, metacontext') := newPositiveMetaVariable(tag, metacontext)
            unify'(fail, metacontext', (body.substituteArgument(m), right))
        case Construction(_, parameters, _, _)
            if not isSameHead(left, right)
                fail'
            if right is Construction(_, parameters', _, _)
                zip(parameters, parameters').cascade(unify'(fail), metacontext)
            fail'
        case _
            fail'


def unify(left, right, metacontext)
    types := (left, right)
    metacontext' := unify'(unifyFailure(types), metacontext, types)
    _ @ Metacontext(positives, negatives) := metacontext'
    if getSize(positives) < 0  # todo: remove this and use either type
        abort("force unification errors")
    ((), metacontext')

#*
