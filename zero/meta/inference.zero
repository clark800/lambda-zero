
// Type := ASTNode
// VariableType : Type
// FunctionType : Type
// IntegerType : Type

// TypeVariable := String
// newVariableType : Tag -> TypeVariable -> VariableType
newVariableType := newReference
// isTypeVariable : Type -> Boolean
isVariableType := isReference
// getTypeVariable : VariableType -> TypeVariable
getTypeVariable := getData
// newFunctionType : Tag -> Type -> Type -> FunctionType
newFunctionType := newLambda
// isFunctionType : Type -> Boolean
isFunctionType := isLambda

isBaseType := isInteger

// newIntegerType : Tag -> IntegerType
newIntegerType(tag) := newInteger(tag, 0)
// isIntegerType : Type -> Boolean
isIntegerType(type) := isInteger(type) /\ getData(type) = 0

newBooleanType(tag) := newInteger(tag, 1)
isBooleanType(type) := isInteger(type) /\ getData(type) = 1

showType(type) := (
    isIntegerType(type) ? "Integer"
    isBooleanType(type) ? "Boolean"
    isVariableType(type) ? getTypeVariable(type)
    isFunctionType(type) ?
        "(" ++ showType(getParameter(type)) ++ " -> " ++
            showType(getBody(type)) ++ ")"
    undefined
)

// getFreeTypeVariablesInType : Type -> [TypeVariable]
getFreeTypeVariablesInType(type) := (
    isVariableType(type) ?
        [getTypeVariable(type)]
    isFunctionType(type) ?
        getFreeTypeVariablesInType(getParameter(type)) ++
            getFreeTypeVariablesInType(getBody(type))
    []
)

// Substitution := Dictionary(TypeVariable, Type)
nullSubstitution := newDictionary([])

// substituteInType : Substitution -> Type -> Type
substituteInType(substitution, type) := (
    isVariableType(type) ?
        substitution.get(getTypeVariable(type), type)
    isFunctionType(type) ?
        newFunctionType(getTag(type),
            substitution.substituteInType(getParameter(type)),
            substitution.substituteInType(getBody(type)))
    type
)

// Scheme : (universals : [TypeVariable], type)

// getFreeTypeVariablesInScheme : TypeScheme -> [TypeVariable]
getFreeTypeVariablesInScheme((universals, type)) :=
    getFreeTypeVariablesInType(type) | (!) <> universals.contains

substituteInScheme(substitution, (universals, type)) :=
    (universals, universals.foldr(`delete, substitution).substituteInType(type))

// composeSubstitutions : Substitution -> Substitution -> Substitution
composeSubstitutions(substitutionA, substitutionB) :=
    substitutionB.mapValues(substitutionA.substituteInType) \./ substitutionA

// Name := String
// Context := Dictionary(Name, Scheme)

getFreeTypeVariablesInContext(context) :=
    join(getValues(context).map(getFreeTypeVariablesInScheme))

substituteInContext(substitution, context) :=
   context.mapValues(substitution.substituteInScheme)

// generalize : Type -> Context -> Scheme
generalize(type, context) :=
    (getFreeTypeVariablesInType(type) |
        (!) <> getFreeTypeVariablesInContext(context).contains,
        type)

getInitialState(_) := 0
getFreshTypeVariable(state) := ("t" ++ showInteger(state), state + 1)

// State := Natural
// instantiate : Scheme -> State -> (Type, State')
instantiate((universals, type), state) := (
    (universals', state') :=
        universals.foldl((universals'', state'') -> _ -> (
        (newUniversal, state''') := getFreshTypeVariable(state'')
        (newUniversal :: universals'', state''')),
        ([], state))
    tag := getTag(type)
    substitution := newDictionary(
        zip(universals, universals'.map(newVariableType(tag))))
    (substitution.substituteInType(type), state')
)

// bindTypeVariable : TypeVariable -> Type -> Substitution
bindTypeVariable(typeVariable, type) := (
    isVariableType(type) /\ getTypeVariable(type) =*= typeVariable ?
        nullSubstitution
    getFreeTypeVariablesInType(type).contains(typeVariable) ?
        error("occurs check failed")
    newDictionary([(typeVariable, type)])
)

// unify : Type -> Type -> Substitution
unify(typeA, typeB) := (
    isBaseType(typeA) /\ isBaseType(typeB) /\ getData(typeA) = getData(typeB) ?
        nullSubstitution
    isVariableType(typeA) ?
        bindTypeVariable(getTypeVariable(typeA), typeB)
    isVariableType(typeB) ?
        bindTypeVariable(getTypeVariable(typeB), typeA)
    isFunctionType(typeA) /\ isFunctionType(typeB) ? (
        s1 := unify(getParameter(typeA), getParameter(typeB))
        s2 := unify(s1.substituteInType(getBody(typeA)),
                   s1.substituteInType(getBody(typeB)))
        composeSubstitutions(s1, s2)
    )
    error("types do not unify")
)

// infer : ASTNode -> Context -> (Substitution, Type, State)
infer(node, context, state) := (
    tag := getTag(node)
    isInteger(node) ? (
        (nullSubstitution, newIntegerType(tag), state)
    )
    isReference(node) \/ isBuiltin(node) ? (
        scheme := context.get(getLexeme(node), error("unbound variable"))
        (type, state') := instantiate(scheme, state)
        (nullSubstitution, type, state')
    )
    isLambda(node) ? (
        (typeVariable, state') := getFreshTypeVariable(state)
        variableType := newVariableType(tag, typeVariable)
        parameterName := getLexeme(getParameter(node))
        context' := context.delete(parameterName)
        context'' := context'.insert(parameterName, ([], variableType))
        (substitution, bodyType, state'') :=
            infer(getBody(node), context'', state')
        parameterType := substitution.substituteInType(variableType)
        (substitution, newFunctionType(tag, parameterType, bodyType), state'')
    )
    isDefinition(node) ? (
        (substitution, rightType, state') :=
            infer(getRight(node), context, state)
        context' := context.delete(getLexeme(getParameter(getLeft(node))))
        rightType' := generalize(rightType,
            substitution.substituteInContext(context))
        name := getLexeme(getParameter(getLeft(node)))
        context'' := context'.insert(name, rightType')
        (substitution', scopeType, state'') :=
            infer(getBody(getLeft(node)), context'', state')
        substitution'' := composeSubstitutions(substitution, substitution')
        (substitution'', scopeType, state'')
    )
    isApplication(node) ? (
        (typeVariable, state') := getFreshTypeVariable(state)
        variableType := newVariableType(tag, typeVariable)
        (substitution, leftType, state'') :=
            infer(getLeft(node), context, state')
        (substitution', rightType, state''') := infer(getRight(node),
            substitution.substituteInContext(context), state'')
        substitution'' := unify(substitution'.substituteInType(leftType),
            newFunctionType(tag, rightType, variableType))
        (composeSubstitutions(composeSubstitutions(substitution'',
            substitution'), substitution),
            substitution''.substituteInType(variableType), state''')
    )
    undefined
)

// inferType : ASTNode -> Context -> Type
inferType(node, context) := (
    (substitution, type, state') := infer(node, context, getInitialState())
    substitution.substituteInType(type)
)

getDefinitionName(definition) := getLexeme(getParameter(getLeft(definition)))
getDefinitionValue(definition) := getRight(definition)
getDefinitionScope(definition) := getBody(getLeft(definition))

newDefinition(definition) :=
    (getDefinitionName(definition), getDefinitionValue(definition))

getDefinitions(node) := (
    !isDefinition(node) ? []
    newDefinition(node) :: getDefinitions(getDefinitionScope(node))
)

showDefinition((name, value)) := name ++ " := " ++ showAST(value)
showDefinitions(definitions) := definitions.map(showDefinition).joinWith("\n")

addDefinitionToContext(context, definition) := (
    (name, value) := definition
    type := inferType(value, context)
    scheme := generalize(type, context)
    context.insert(name, scheme)
)

newBinaryOperatorType(name) := (
    tag := (name, (0, 0))
    newFunctionType(tag, newIntegerType(tag), newFunctionType(tag,
        newIntegerType(tag), newIntegerType(tag)))
)

newComparisonOperatorType(name) := (
    tag := (name, (0, 0))
    newFunctionType(tag, newIntegerType(tag), newFunctionType(tag,
        newIntegerType(tag), newBooleanType(tag)))
)

initialContext := newDictionary([
    ("+", ([], newBinaryOperatorType("+"))),
    ("-", ([], newBinaryOperatorType("-"))),
    ("*", ([], newBinaryOperatorType("*"))),
    ("/", ([], newBinaryOperatorType("/"))),
    ("%", ([], newBinaryOperatorType("%"))),
    ("=", ([], newComparisonOperatorType("="))),
    ("!=", ([], newComparisonOperatorType("!="))),
    ("<", ([], newComparisonOperatorType("<"))),
    (">", ([], newComparisonOperatorType(">"))),
    ("<=", ([], newComparisonOperatorType("<="))),
    (">=", ([], newComparisonOperatorType(">=")))
])

showTypes(types) :=
    types.map((name, type) -> name ++ " : " ++ showType(type)).joinWith("\n\n")

main(input) := (
    node := parse(input, "")
    definitions := getDefinitions(node)
    context := definitions.foldl(addDefinitionToContext, initialContext)
    (names, _) := unzip(definitions)
    types := names.map(name -> second(context.get(name, undefined)))
    showTypes(zip(names, types))
)
