isDelimiterCharacter(n) := " \n\0,;`()[]{}".any((= n))
isReservedCharacter(n) := "{};@$".any((= n))
isOperandCharacter(n) := isAlphanumeric(n) \/ n = '_' \/ n = '\''
isOperatorCharacter(n) := isPunctuation(n) /\ !isDelimiterCharacter(n) /\
    !isOperandCharacter(n) /\ !isQuote(n) /\ !isReservedCharacter(n)

isLineComment(lexeme) := lexeme.startsWith("//")
isBlockComment(lexeme) := lexeme.startsWith("/*")
isComment(lexeme) := isLineComment(lexeme) \/ isBlockComment(lexeme)

splitQuoteCharacter(quote, ns) := (
    ns.isEmpty \/ ns[0] = quote \/ ns[0] = '\n' ? ([], ns)
    n := (ns[0] = '\\' /\ !(--ns =*= []))? 2 || 1
    ns.splitAt(n)
)

shiftSplit((a, b)) := b =*= [] ? (a, b) || (a ++ [b[0]], --b)

splitQuote(ns) := (
    quote := ns[0]
    (a, b) := (--ns).splitWith(splitQuoteCharacter(quote))
    !b.isEmpty /\ b[0] = quote ? shiftSplit((quote :: a, b)) || (quote :: a, b)
)

splitLexeme(ns) := (
    ns.isEmpty? []
    ns.isLineComment? ns.splitOn("\n")
    ns.isBlockComment? ns.splitOn("*/").shiftSplit.shiftSplit
    ns[0].isBlank? ns.splitWhen((!) <> isBlank)
    ns[0].isQuote? splitQuote(ns)
    ns[0].isOperandCharacter? ns.splitWhen((!) <> isOperandCharacter)
    ns[0].isOperatorCharacter? ns.splitWhen((!) <> isOperatorCharacter)
    ([ns[0]], --ns)
)

advanceLocation(location, lexeme) := (
    (line, column) := location
    (lexeme[0] = '\n')? (line + 1, 1)
    (line, column + length(lexeme))
)

splitLexemes(string, splitter, location) := (
    string.isEmpty? []
    (lexeme, remaining) := splitter(string)
    nextLocation := advanceLocation(location, lexeme)
    (lexeme, location) :: remaining.splitLexemes(splitter, nextLocation)
)

scan(string) := string.splitLexemes(splitLexeme, (1, 1)) |
    (!) <> isComment <> first

showTag(tag) := showPair((showString(tag.first), showIntegerPair(tag.second)))

getTagLexeme(tag) := tag.first
getTagLine(tag) := tag.second.first
getTagColumn(tag) := tag.second.second

showPrettyTag(tag) := "'" ++ getTagLexeme(tag) ++
    "' at line " ++ showInteger(getTagLine(tag)) ++
    " column " ++ showInteger(getTagColumn(tag))
